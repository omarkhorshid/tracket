
tRacketCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009324  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080094c8  080094c8  000194c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a8  080099a8  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b0  080099b0  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080099b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000270  08009c24  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08009c24  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e22f  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e9  00000000  00000000  0002e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  000306b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018765  00000000  00000000  00031c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe47  00000000  00000000  0004a3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094eea  00000000  00000000  0005a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef0ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  000ef140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094ac 	.word	0x080094ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	080094ac 	.word	0x080094ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0x7c>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_ADC1_Init+0x80>)
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000fbe:	f001 fb6b 	bl	8002698 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 fd6c 	bl	8001aa4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000028c 	.word	0x2000028c
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	0f000001 	.word	0x0f000001

08000fe0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_ADC_MspInit+0x7c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d127      	bne.n	8001052 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_ADC_MspInit+0x80>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0x80>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_MspInit+0x80>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_ADC_MspInit+0x80>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_ADC_MspInit+0x80>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0x80>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800103a:	231f      	movs	r3, #31
 800103c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103e:	2303      	movs	r3, #3
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_ADC_MspInit+0x84>)
 800104e:	f001 ffeb 	bl	8003028 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40012000 	.word	0x40012000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_GPIO_Init+0xe4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <MX_GPIO_Init+0xe4>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_GPIO_Init+0xe4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_GPIO_Init+0xe4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <MX_GPIO_Init+0xe4>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_GPIO_Init+0xe4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_GPIO_Init+0xe4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <MX_GPIO_Init+0xe4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_GPIO_Init+0xe4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_GPIO_Init+0xe4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <MX_GPIO_Init+0xe4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_GPIO_Init+0xe4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010f6:	f002 f91b 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_GPIO_Init+0xec>)
 8001102:	f002 f915 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0xe8>)
 8001120:	f001 ff82 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_GPIO_Init+0xec>)
 800113e:	f001 ff73 	bl	8003028 <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000

08001158 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MX_I2C1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x58>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <MX_I2C1_Init+0x50>)
 8001196:	f002 f8e5 	bl	8003364 <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 fc80 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200002d4 	.word	0x200002d4
 80011ac:	40005400 	.word	0x40005400
 80011b0:	00061a80 	.word	0x00061a80

080011b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_I2C_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_I2C_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_I2C_MspInit+0x88>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_I2C_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f6:	2312      	movs	r3, #18
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001202:	2304      	movs	r3, #4
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <HAL_I2C_MspInit+0x8c>)
 800120e:	f001 ff0b 	bl	8003028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_I2C_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_I2C_MspInit+0x88>)
 800121c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_I2C_MspInit+0x88>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <ADC_Select_CH>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH(int ch){
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
	uint32_t channel;
	switch(ch){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d82e      	bhi.n	80012be <ADC_Select_CH+0x7a>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <ADC_Select_CH+0x24>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001283 	.word	0x08001283
 8001270:	08001289 	.word	0x08001289
 8001274:	0800128f 	.word	0x0800128f
 8001278:	08001295 	.word	0x08001295
	case 0:
		channel = ADC_CHANNEL_0;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
		break;
 8001280:	e00b      	b.n	800129a <ADC_Select_CH+0x56>
	case 1:
		channel = ADC_CHANNEL_1;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
		break;
 8001286:	e008      	b.n	800129a <ADC_Select_CH+0x56>
	case 2:
		channel = ADC_CHANNEL_2;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
		break;
 800128c:	e005      	b.n	800129a <ADC_Select_CH+0x56>
	case 3:
		channel = ADC_CHANNEL_3;
 800128e:	2303      	movs	r3, #3
 8001290:	61fb      	str	r3, [r7, #28]
		break;
 8001292:	e002      	b.n	800129a <ADC_Select_CH+0x56>
	case 4:
		channel = ADC_CHANNEL_4;
 8001294:	2304      	movs	r3, #4
 8001296:	61fb      	str	r3, [r7, #28]
		break;
 8001298:	bf00      	nop
	default:
		return;
		break;
	}
	sConfig.Channel = channel;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <ADC_Select_CH+0x84>)
 80012ae:	f001 fbb7 	bl	8002a20 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <ADC_Select_CH+0x7c>
	{
	Error_Handler();
 80012b8:	f000 fbf4 	bl	8001aa4 <Error_Handler>
 80012bc:	e000      	b.n	80012c0 <ADC_Select_CH+0x7c>
		return;
 80012be:	bf00      	nop
	}
}
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000028c 	.word	0x2000028c

080012cc <ADC_Read>:

uint16_t ADC_Read(int ch){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	uint16_t AD_VAL;
	ADC_Select_CH(ch);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffb5 	bl	8001244 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <ADC_Read+0x58>)
 80012dc:	f001 fa20 	bl	8002720 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80012e0:	2101      	movs	r1, #1
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <ADC_Read+0x58>)
 80012e4:	f001 fb03 	bl	80028ee <HAL_ADC_PollForConversion>
	AD_VAL = HAL_ADC_GetValue(&hadc1);
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <ADC_Read+0x58>)
 80012ea:	f001 fb8b 	bl	8002a04 <HAL_ADC_GetValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <ADC_Read+0x58>)
 80012f4:	f001 fac8 	bl	8002888 <HAL_ADC_Stop>
	return AD_VAL*calibPiezo[ch];
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ADC_Read+0x5c>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	b29b      	uxth	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000028c 	.word	0x2000028c
 8001328:	080094d4 	.word	0x080094d4
 800132c:	00000000 	.word	0x00000000

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	f5ad 6d2a 	sub.w	sp, sp, #2720	; 0xaa0
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133a:	f001 f917 	bl	800256c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133e:	f000 fb47 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001342:	f7ff fe91 	bl	8001068 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001346:	f7ff ff07 	bl	8001158 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800134a:	f001 f873 	bl	8002434 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800134e:	f7ff fe05 	bl	8000f5c <MX_ADC1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	48b5      	ldr	r0, [pc, #724]	; (8001630 <main+0x300>)
 800135a:	f001 ffe9 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800135e:	2032      	movs	r0, #50	; 0x32
 8001360:	f001 f976 	bl	8002650 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	48b1      	ldr	r0, [pc, #708]	; (8001630 <main+0x300>)
 800136c:	f001 ffe0 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f001 f96d 	bl	8002650 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001376:	bf00      	nop
 8001378:	48ae      	ldr	r0, [pc, #696]	; (8001634 <main+0x304>)
 800137a:	f000 fb9a 	bl	8001ab2 <MPU6050_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d0f9      	beq.n	8001378 <main+0x48>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138a:	48a9      	ldr	r0, [pc, #676]	; (8001630 <main+0x300>)
 800138c:	f001 ffd0 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001390:	2064      	movs	r0, #100	; 0x64
 8001392:	f001 f95d 	bl	8002650 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139c:	48a4      	ldr	r0, [pc, #656]	; (8001630 <main+0x300>)
 800139e:	f001 ffc7 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a8:	48a3      	ldr	r0, [pc, #652]	; (8001638 <main+0x308>)
 80013aa:	f001 ffc1 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80013ae:	2064      	movs	r0, #100	; 0x64
 80013b0:	f001 f94e 	bl	8002650 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	489f      	ldr	r0, [pc, #636]	; (8001638 <main+0x308>)
 80013bc:	f001 ffb8 	bl	8003330 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  uint16_t piezoWindowBuf [5][250] = {0};
 80013c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80013c4:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 80013c8:	4618      	mov	r0, r3
 80013ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013ce:	461a      	mov	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	f003 ffcb 	bl	800536c <memset>
  uint16_t maxs [5] = {0};
 80013d6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80013da:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	811a      	strh	r2, [r3, #8]
  uint16_t absMax;
  float xHitLoc,yHitLoc;
  float weights[5] = {0.0};
 80013e6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80013ea:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80013ee:	461a      	mov	r2, r3
 80013f0:	2300      	movs	r3, #0
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	6053      	str	r3, [r2, #4]
 80013f6:	6093      	str	r3, [r2, #8]
 80013f8:	60d3      	str	r3, [r2, #12]
 80013fa:	6113      	str	r3, [r2, #16]
  int triggerdIterator =0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t AD_RES = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f8a7 3a6e 	strh.w	r3, [r7, #2670]	; 0xa6e
	  char adcval[128];
	  //shift the first half of the window
	  if(triggerdIterator == 0){
 8001408:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800140c:	2b00      	cmp	r3, #0
 800140e:	d16d      	bne.n	80014ec <main+0x1bc>
		  for(int i=0;i<5;i++){
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8001416:	e064      	b.n	80014e2 <main+0x1b2>
			  for(int j = 0; j<124; j++){
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 800141e:	e022      	b.n	8001466 <main+0x136>
				  piezoWindowBuf[i][j] = piezoWindowBuf[i][j+1];
 8001420:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800142a:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 800142e:	f8d7 1a8c 	ldr.w	r1, [r7, #2700]	; 0xa8c
 8001432:	20fa      	movs	r0, #250	; 0xfa
 8001434:	fb00 f101 	mul.w	r1, r0, r1
 8001438:	440a      	add	r2, r1
 800143a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800143e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001442:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 8001446:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 800144a:	21fa      	movs	r1, #250	; 0xfa
 800144c:	fb02 f101 	mul.w	r1, r2, r1
 8001450:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 8001454:	440a      	add	r2, r1
 8001456:	4601      	mov	r1, r0
 8001458:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  for(int j = 0; j<124; j++){
 800145c:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 8001466:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 800146a:	2b7b      	cmp	r3, #123	; 0x7b
 800146c:	ddd8      	ble.n	8001420 <main+0xf0>
			  }
			  piezoWindowBuf[i][124] = ADC_Read(i);
 800146e:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 8001472:	f7ff ff2b 	bl	80012cc <ADC_Read>
 8001476:	4603      	mov	r3, r0
 8001478:	4618      	mov	r0, r3
 800147a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800147e:	f6a3 12fc 	subw	r2, r3, #2556	; 0x9fc
 8001482:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 8001486:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	4413      	add	r3, r2
 8001490:	33f8      	adds	r3, #248	; 0xf8
 8001492:	4602      	mov	r2, r0
 8001494:	801a      	strh	r2, [r3, #0]
			  if(piezoWindowBuf[i][124] > 1500){
 8001496:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800149a:	f6a3 12fc 	subw	r2, r3, #2556	; 0x9fc
 800149e:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 80014a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	33f8      	adds	r3, #248	; 0xf8
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d90f      	bls.n	80014d8 <main+0x1a8>
				  HAL_Delay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f001 f8c9 	bl	8002650 <HAL_Delay>
				  if(ADC_Read(i)> 1500){
 80014be:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 80014c2:	f7ff ff03 	bl	80012cc <ADC_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d902      	bls.n	80014d8 <main+0x1a8>
					  triggerdIterator =125;
 80014d2:	237d      	movs	r3, #125	; 0x7d
 80014d4:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
		  for(int i=0;i<5;i++){
 80014d8:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 80014e2:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	dd96      	ble.n	8001418 <main+0xe8>
 80014ea:	e78a      	b.n	8001402 <main+0xd2>
				  }
			  }
		  }
	  }else if(triggerdIterator < 250){
 80014ec:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80014f0:	2bf9      	cmp	r3, #249	; 0xf9
 80014f2:	dc27      	bgt.n	8001544 <main+0x214>
		  for(int i=0;i<5;i++){
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 80014fa:	e019      	b.n	8001530 <main+0x200>
			  piezoWindowBuf[i][triggerdIterator] = ADC_Read(i);
 80014fc:	f8d7 0a84 	ldr.w	r0, [r7, #2692]	; 0xa84
 8001500:	f7ff fee4 	bl	80012cc <ADC_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800150c:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 8001510:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	; 0xa84
 8001514:	21fa      	movs	r1, #250	; 0xfa
 8001516:	fb02 f101 	mul.w	r1, r2, r1
 800151a:	f8d7 2a90 	ldr.w	r2, [r7, #2704]	; 0xa90
 800151e:	440a      	add	r2, r1
 8001520:	4601      	mov	r1, r0
 8001522:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i=0;i<5;i++){
 8001526:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 800152a:	3301      	adds	r3, #1
 800152c:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 8001530:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8001534:	2b04      	cmp	r3, #4
 8001536:	dde1      	ble.n	80014fc <main+0x1cc>
		  }
		  triggerdIterator++;
 8001538:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800153c:	3301      	adds	r3, #1
 800153e:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
 8001542:	e75e      	b.n	8001402 <main+0xd2>
	  }else{
		  triggerdIterator =0;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
//	  				HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
//	  				HAL_UART_Transmit(&huart1, (uint8_t *) "\t" , 1, HAL_MAX_DELAY);
//			  }
//			  HAL_UART_Transmit(&huart1, (uint8_t *) "\r\n" , 2, HAL_MAX_DELAY);
//		  			  }
		  for(int i=0;i<5;i++){
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
 8001550:	e03f      	b.n	80015d2 <main+0x2a2>
			  for(int j=0;j<250;j++){
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
 8001558:	e032      	b.n	80015c0 <main+0x290>
				  if (piezoWindowBuf[i][j]>maxs[i]){
 800155a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800155e:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 8001562:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 8001566:	21fa      	movs	r1, #250	; 0xfa
 8001568:	fb02 f101 	mul.w	r1, r2, r1
 800156c:	f8d7 2a7c 	ldr.w	r2, [r7, #2684]	; 0xa7c
 8001570:	440a      	add	r2, r1
 8001572:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001576:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800157a:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 800157e:	f8d7 1a80 	ldr.w	r1, [r7, #2688]	; 0xa80
 8001582:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001586:	429a      	cmp	r2, r3
 8001588:	d915      	bls.n	80015b6 <main+0x286>
					  maxs[i] = piezoWindowBuf[i][j];
 800158a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800158e:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 8001592:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 8001596:	21fa      	movs	r1, #250	; 0xfa
 8001598:	fb02 f101 	mul.w	r1, r2, r1
 800159c:	f8d7 2a7c 	ldr.w	r2, [r7, #2684]	; 0xa7c
 80015a0:	440a      	add	r2, r1
 80015a2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80015a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80015aa:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80015ae:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 80015b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  for(int j=0;j<250;j++){
 80015b6:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 80015ba:	3301      	adds	r3, #1
 80015bc:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
 80015c0:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 80015c4:	2bf9      	cmp	r3, #249	; 0xf9
 80015c6:	ddc8      	ble.n	800155a <main+0x22a>
		  for(int i=0;i<5;i++){
 80015c8:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 80015cc:	3301      	adds	r3, #1
 80015ce:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
 80015d2:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	ddbb      	ble.n	8001552 <main+0x222>
				  }
			  }

		  }
		  absMax = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8a7 3a9e 	strh.w	r3, [r7, #2718]	; 0xa9e
		  for(int k=0;k<5;k++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78
 80015e6:	e01a      	b.n	800161e <main+0x2ee>
			  if(maxs[k]>absMax){
 80015e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80015ec:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80015f0:	f8d7 2a78 	ldr.w	r2, [r7, #2680]	; 0xa78
 80015f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015f8:	f8b7 2a9e 	ldrh.w	r2, [r7, #2718]	; 0xa9e
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d209      	bcs.n	8001614 <main+0x2e4>
				  absMax = maxs[k];
 8001600:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001604:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8001608:	f8d7 2a78 	ldr.w	r2, [r7, #2680]	; 0xa78
 800160c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001610:	f8a7 3a9e 	strh.w	r3, [r7, #2718]	; 0xa9e
		  for(int k=0;k<5;k++){
 8001614:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8001618:	3301      	adds	r3, #1
 800161a:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78
 800161e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8001622:	2b04      	cmp	r3, #4
 8001624:	dde0      	ble.n	80015e8 <main+0x2b8>
			  }
		  }
		  for(int k=0;k<5;k++){
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
 800162c:	e067      	b.n	80016fe <main+0x3ce>
 800162e:	bf00      	nop
 8001630:	40020800 	.word	0x40020800
 8001634:	200002d4 	.word	0x200002d4
 8001638:	40020000 	.word	0x40020000
				  weights[k] = (float) maxs[k]/absMax;
 800163c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001640:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8001644:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 8001648:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001654:	f8b7 3a9e 	ldrh.w	r3, [r7, #2718]	; 0xa9e
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001664:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001668:	f6a3 221c 	subw	r2, r3, #2588	; 0xa1c
 800166c:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	edc3 7a00 	vstr	s15, [r3]
				  xHitLoc += weights[k]*xHitCoords[k];
 8001678:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800167c:	f6a3 221c 	subw	r2, r3, #2588	; 0xa1c
 8001680:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	4ac6      	ldr	r2, [pc, #792]	; (80019a8 <main+0x678>)
 800168e:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016b2:	edc3 7a00 	vstr	s15, [r3]
				  yHitLoc += weights[k]*yHitCoords[k];
 80016b6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80016ba:	f6a3 221c 	subw	r2, r3, #2588	; 0xa1c
 80016be:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	4ab8      	ldr	r2, [pc, #736]	; (80019ac <main+0x67c>)
 80016cc:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80016f0:	edc3 7a00 	vstr	s15, [r3]
		  for(int k=0;k<5;k++){
 80016f4:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80016f8:	3301      	adds	r3, #1
 80016fa:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
 80016fe:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8001702:	2b04      	cmp	r3, #4
 8001704:	dd9a      	ble.n	800163c <main+0x30c>
		  }
		  	HAL_Delay(5);
 8001706:	2005      	movs	r0, #5
 8001708:	f000 ffa2 	bl	8002650 <HAL_Delay>
		  	MPU6050_Read_All(&hi2c1, &MPU6050);
 800170c:	49a8      	ldr	r1, [pc, #672]	; (80019b0 <main+0x680>)
 800170e:	48a9      	ldr	r0, [pc, #676]	; (80019b4 <main+0x684>)
 8001710:	f000 fa26 	bl	8001b60 <MPU6050_Read_All>
			sprintf(adcval,"%f",xHitLoc);
 8001714:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f7fe ff1d 	bl	8000558 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	1d38      	adds	r0, r7, #4
 8001724:	49a4      	ldr	r1, [pc, #656]	; (80019b8 <main+0x688>)
 8001726:	f004 fa93 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	1d39      	adds	r1, r7, #4
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	489f      	ldr	r0, [pc, #636]	; (80019bc <main+0x68c>)
 800173e:	f003 fa76 	bl	8004c2e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) "," , 1, HAL_MAX_DELAY);
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	2201      	movs	r2, #1
 8001748:	499d      	ldr	r1, [pc, #628]	; (80019c0 <main+0x690>)
 800174a:	489c      	ldr	r0, [pc, #624]	; (80019bc <main+0x68c>)
 800174c:	f003 fa6f 	bl	8004c2e <HAL_UART_Transmit>
			sprintf(adcval,"%f",yHitLoc);
 8001750:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	1d38      	adds	r0, r7, #4
 8001760:	4995      	ldr	r1, [pc, #596]	; (80019b8 <main+0x688>)
 8001762:	f004 fa75 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fd39 	bl	80001e0 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	1d39      	adds	r1, r7, #4
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	4890      	ldr	r0, [pc, #576]	; (80019bc <main+0x68c>)
 800177a:	f003 fa58 	bl	8004c2e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) "," , 1, HAL_MAX_DELAY);
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	2201      	movs	r2, #1
 8001784:	498e      	ldr	r1, [pc, #568]	; (80019c0 <main+0x690>)
 8001786:	488d      	ldr	r0, [pc, #564]	; (80019bc <main+0x68c>)
 8001788:	f003 fa51 	bl	8004c2e <HAL_UART_Transmit>
			sprintf(adcval,"%f",MPU6050.KalmanAngleX);
 800178c:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <main+0x680>)
 800178e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001792:	1d38      	adds	r0, r7, #4
 8001794:	4988      	ldr	r1, [pc, #544]	; (80019b8 <main+0x688>)
 8001796:	f004 fa5b 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd1f 	bl	80001e0 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	1d39      	adds	r1, r7, #4
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	4883      	ldr	r0, [pc, #524]	; (80019bc <main+0x68c>)
 80017ae:	f003 fa3e 	bl	8004c2e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) "," , 1, HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	2201      	movs	r2, #1
 80017b8:	4981      	ldr	r1, [pc, #516]	; (80019c0 <main+0x690>)
 80017ba:	4880      	ldr	r0, [pc, #512]	; (80019bc <main+0x68c>)
 80017bc:	f003 fa37 	bl	8004c2e <HAL_UART_Transmit>
			sprintf(adcval,"%f",MPU6050.KalmanAngleY);
 80017c0:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <main+0x680>)
 80017c2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80017c6:	1d38      	adds	r0, r7, #4
 80017c8:	497b      	ldr	r1, [pc, #492]	; (80019b8 <main+0x688>)
 80017ca:	f004 fa41 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd05 	bl	80001e0 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	1d39      	adds	r1, r7, #4
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	4876      	ldr	r0, [pc, #472]	; (80019bc <main+0x68c>)
 80017e2:	f003 fa24 	bl	8004c2e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) "," , 1, HAL_MAX_DELAY);
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	2201      	movs	r2, #1
 80017ec:	4974      	ldr	r1, [pc, #464]	; (80019c0 <main+0x690>)
 80017ee:	4873      	ldr	r0, [pc, #460]	; (80019bc <main+0x68c>)
 80017f0:	f003 fa1d 	bl	8004c2e <HAL_UART_Transmit>
			float force = fabs(sqrt(pow(MPU6050.Ax,2)+pow(MPU6050.Ay,2)+pow(MPU6050.Az,2))-1)*9.8*0.0027;
 80017f4:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <main+0x680>)
 80017f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80017fa:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001988 <main+0x658>
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f006 fe47 	bl	8008498 <pow>
 800180a:	ec59 8b10 	vmov	r8, r9, d0
 800180e:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <main+0x680>)
 8001810:	ed93 7b04 	vldr	d7, [r3, #16]
 8001814:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001988 <main+0x658>
 8001818:	eeb0 0a47 	vmov.f32	s0, s14
 800181c:	eef0 0a67 	vmov.f32	s1, s15
 8001820:	f006 fe3a 	bl	8008498 <pow>
 8001824:	ec53 2b10 	vmov	r2, r3, d0
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fd36 	bl	800029c <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4690      	mov	r8, r2
 8001836:	4699      	mov	r9, r3
 8001838:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <main+0x680>)
 800183a:	ed93 7b06 	vldr	d7, [r3, #24]
 800183e:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001988 <main+0x658>
 8001842:	eeb0 0a47 	vmov.f32	s0, s14
 8001846:	eef0 0a67 	vmov.f32	s1, s15
 800184a:	f006 fe25 	bl	8008498 <pow>
 800184e:	ec53 2b10 	vmov	r2, r3, d0
 8001852:	4640      	mov	r0, r8
 8001854:	4649      	mov	r1, r9
 8001856:	f7fe fd21 	bl	800029c <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b17 	vmov	d7, r2, r3
 8001862:	eeb0 0a47 	vmov.f32	s0, s14
 8001866:	eef0 0a67 	vmov.f32	s1, s15
 800186a:	f006 fe85 	bl	8008578 <sqrt>
 800186e:	ec51 0b10 	vmov	r0, r1, d0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <main+0x694>)
 8001878:	f7fe fd0e 	bl	8000298 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001886:	a342      	add	r3, pc, #264	; (adr r3, 8001990 <main+0x660>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe feba 	bl	8000608 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	a33e      	add	r3, pc, #248	; (adr r3, 8001998 <main+0x668>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe feb1 	bl	8000608 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f983 	bl	8000bb8 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f607 2268 	addw	r2, r7, #2664	; 0xa68
 80018b8:	6013      	str	r3, [r2, #0]
			sprintf(adcval,"%f",force);
 80018ba:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f7fe fe4a 	bl	8000558 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	1d38      	adds	r0, r7, #4
 80018ca:	493b      	ldr	r1, [pc, #236]	; (80019b8 <main+0x688>)
 80018cc:	f004 f9c0 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	1d39      	adds	r1, r7, #4
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	4836      	ldr	r0, [pc, #216]	; (80019bc <main+0x68c>)
 80018e4:	f003 f9a3 	bl	8004c2e <HAL_UART_Transmit>
			if(force>0.015){
 80018e8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f7fe fe33 	bl	8000558 <__aeabi_f2d>
 80018f2:	a32b      	add	r3, pc, #172	; (adr r3, 80019a0 <main+0x670>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7ff f916 	bl	8000b28 <__aeabi_dcmpgt>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00e      	beq.n	8001920 <main+0x5f0>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	482f      	ldr	r0, [pc, #188]	; (80019c8 <main+0x698>)
 800190a:	f001 fd11 	bl	8003330 <HAL_GPIO_WritePin>
				  HAL_Delay(50);
 800190e:	2032      	movs	r0, #50	; 0x32
 8001910:	f000 fe9e 	bl	8002650 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191a:	482b      	ldr	r0, [pc, #172]	; (80019c8 <main+0x698>)
 800191c:	f001 fd08 	bl	8003330 <HAL_GPIO_WritePin>
			}
		  for(int i =0;i<5;i++){
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 8001926:	e022      	b.n	800196e <main+0x63e>
//		  sprintf(adcval,"%f",weights[i]);
//			HAL_UART_Transmit(&huart1, (uint8_t *) adcval , strlen(adcval), HAL_MAX_DELAY);
//			HAL_UART_Transmit(&huart1, (uint8_t *) "\t" , 1, HAL_MAX_DELAY);
			maxs[i] = 0;
 8001928:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800192c:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8001930:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 8001934:	2100      	movs	r1, #0
 8001936:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			weights[i] = 0;
 800193a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800193e:	f6a3 221c 	subw	r2, r3, #2588	; 0xa1c
 8001942:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
			xHitLoc = 0;
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001958:	6013      	str	r3, [r2, #0]
			yHitLoc = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f607 2294 	addw	r2, r7, #2708	; 0xa94
 8001962:	6013      	str	r3, [r2, #0]
		  for(int i =0;i<5;i++){
 8001964:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8001968:	3301      	adds	r3, #1
 800196a:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 800196e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8001972:	2b04      	cmp	r3, #4
 8001974:	ddd8      	ble.n	8001928 <main+0x5f8>
	  }
		  HAL_UART_Transmit(&huart1, (uint8_t *) "\r\n" , 2, HAL_MAX_DELAY);
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	2202      	movs	r2, #2
 800197c:	4913      	ldr	r1, [pc, #76]	; (80019cc <main+0x69c>)
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <main+0x68c>)
 8001980:	f003 f955 	bl	8004c2e <HAL_UART_Transmit>
  {
 8001984:	e53d      	b.n	8001402 <main+0xd2>
 8001986:	bf00      	nop
 8001988:	00000000 	.word	0x00000000
 800198c:	40000000 	.word	0x40000000
 8001990:	9999999a 	.word	0x9999999a
 8001994:	40239999 	.word	0x40239999
 8001998:	765fd8ae 	.word	0x765fd8ae
 800199c:	3f661e4f 	.word	0x3f661e4f
 80019a0:	eb851eb8 	.word	0xeb851eb8
 80019a4:	3f8eb851 	.word	0x3f8eb851
 80019a8:	080094e8 	.word	0x080094e8
 80019ac:	080094fc 	.word	0x080094fc
 80019b0:	20000328 	.word	0x20000328
 80019b4:	200002d4 	.word	0x200002d4
 80019b8:	080094c8 	.word	0x080094c8
 80019bc:	20000388 	.word	0x20000388
 80019c0:	080094cc 	.word	0x080094cc
 80019c4:	3ff00000 	.word	0x3ff00000
 80019c8:	40020000 	.word	0x40020000
 80019cc:	080094d0 	.word	0x080094d0

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fcc4 	bl	800536c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a1c:	4a20      	ldr	r2, [pc, #128]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a44:	2319      	movs	r3, #25
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a48:	23a8      	movs	r3, #168	; 0xa8
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a50:	2304      	movs	r3, #4
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fc43 	bl	80042e4 <HAL_RCC_OscConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a64:	f000 f81e 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	230f      	movs	r3, #15
 8001a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2102      	movs	r1, #2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fea5 	bl	80047d4 <HAL_RCC_ClockConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a90:	f000 f808 	bl	8001aa4 <Error_Handler>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3750      	adds	r7, #80	; 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b088      	sub	sp, #32
 8001ab6:	af04      	add	r7, sp, #16
 8001ab8:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001aba:	2364      	movs	r3, #100	; 0x64
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f107 030f 	add.w	r3, r7, #15
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	2275      	movs	r2, #117	; 0x75
 8001acc:	21d0      	movs	r1, #208	; 0xd0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f001 fe86 	bl	80037e0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b68      	cmp	r3, #104	; 0x68
 8001ad8:	d13d      	bne.n	8001b56 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	f107 030e 	add.w	r3, r7, #14
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	226b      	movs	r2, #107	; 0x6b
 8001af0:	21d0      	movs	r1, #208	; 0xd0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f001 fd7a 	bl	80035ec <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001af8:	2307      	movs	r3, #7
 8001afa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	2301      	movs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f107 030e 	add.w	r3, r7, #14
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2219      	movs	r2, #25
 8001b0e:	21d0      	movs	r1, #208	; 0xd0
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f001 fd6b 	bl	80035ec <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030e 	add.w	r3, r7, #14
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	221c      	movs	r2, #28
 8001b2c:	21d0      	movs	r1, #208	; 0xd0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 fd5c 	bl	80035ec <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	f107 030e 	add.w	r3, r7, #14
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	221b      	movs	r2, #27
 8001b4a:	21d0      	movs	r1, #208	; 0xd0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f001 fd4d 	bl	80035ec <HAL_I2C_Mem_Write>
        return 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <MPU6050_Init+0xa6>
    }
    return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b094      	sub	sp, #80	; 0x50
 8001b66:	af04      	add	r7, sp, #16
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	230e      	movs	r3, #14
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	223b      	movs	r2, #59	; 0x3b
 8001b7e:	21d0      	movs	r1, #208	; 0xd0
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f001 fe2d 	bl	80037e0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001b86:	7a3b      	ldrb	r3, [r7, #8]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	7a7b      	ldrb	r3, [r7, #9]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001b98:	7abb      	ldrb	r3, [r7, #10]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001baa:	7b3b      	ldrb	r3, [r7, #12]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001bca:	7c3b      	ldrb	r3, [r7, #16]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	7c7b      	ldrb	r3, [r7, #17]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001bdc:	7cbb      	ldrb	r3, [r7, #18]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001bee:	7d3b      	ldrb	r3, [r7, #20]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	7d7b      	ldrb	r3, [r7, #21]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc94 	bl	8000534 <__aeabi_i2d>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4bbd      	ldr	r3, [pc, #756]	; (8001f08 <MPU6050_Read_All+0x3a8>)
 8001c12:	f7fe fe23 	bl	800085c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc84 	bl	8000534 <__aeabi_i2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4bb5      	ldr	r3, [pc, #724]	; (8001f08 <MPU6050_Read_All+0x3a8>)
 8001c32:	f7fe fe13 	bl	800085c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc74 	bl	8000534 <__aeabi_i2d>
 8001c4c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001ef0 <MPU6050_Read_All+0x390>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fe03 	bl	800085c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001c60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001f0c <MPU6050_Read_All+0x3ac>
 8001c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c74:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f10 <MPU6050_Read_All+0x3b0>
 8001c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc53 	bl	8000534 <__aeabi_i2d>
 8001c8e:	a39a      	add	r3, pc, #616	; (adr r3, 8001ef8 <MPU6050_Read_All+0x398>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fde2 	bl	800085c <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc43 	bl	8000534 <__aeabi_i2d>
 8001cae:	a392      	add	r3, pc, #584	; (adr r3, 8001ef8 <MPU6050_Read_All+0x398>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fdd2 	bl	800085c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc33 	bl	8000534 <__aeabi_i2d>
 8001cce:	a38a      	add	r3, pc, #552	; (adr r3, 8001ef8 <MPU6050_Read_All+0x398>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001ce2:	f000 fca9 	bl	8002638 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <MPU6050_Read_All+0x3b4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc10 	bl	8000514 <__aeabi_ui2d>
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b87      	ldr	r3, [pc, #540]	; (8001f18 <MPU6050_Read_All+0x3b8>)
 8001cfa:	f7fe fdaf 	bl	800085c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001d06:	f000 fc97 	bl	8002638 <HAL_GetTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a81      	ldr	r2, [pc, #516]	; (8001f14 <MPU6050_Read_All+0x3b4>)
 8001d0e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	461a      	mov	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbfc 	bl	8000534 <__aeabi_i2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b10 	vmov	d0, r2, r3
 8001d44:	f006 fc18 	bl	8008578 <sqrt>
 8001d48:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d58:	f7fe febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11f      	bne.n	8001da2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbe3 	bl	8000534 <__aeabi_i2d>
 8001d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d72:	f7fe fd73 	bl	800085c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	ec43 2b17 	vmov	d7, r2, r3
 8001d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d82:	eef0 0a67 	vmov.f32	s1, s15
 8001d86:	f006 f9db 	bl	8008140 <atan>
 8001d8a:	ec51 0b10 	vmov	r0, r1, d0
 8001d8e:	a35c      	add	r3, pc, #368	; (adr r3, 8001f00 <MPU6050_Read_All+0x3a0>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fc38 	bl	8000608 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001da0:	e005      	b.n	8001dae <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	425b      	negs	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbbc 	bl	8000534 <__aeabi_i2d>
 8001dbc:	4682      	mov	sl, r0
 8001dbe:	468b      	mov	fp, r1
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbb4 	bl	8000534 <__aeabi_i2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	ec43 2b11 	vmov	d1, r2, r3
 8001dd4:	ec4b ab10 	vmov	d0, sl, fp
 8001dd8:	f006 fb5b 	bl	8008492 <atan2>
 8001ddc:	ec51 0b10 	vmov	r0, r1, d0
 8001de0:	a347      	add	r3, pc, #284	; (adr r3, 8001f00 <MPU6050_Read_All+0x3a0>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc0f 	bl	8000608 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <MPU6050_Read_All+0x3bc>)
 8001df8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dfc:	f7fe fe76 	bl	8000aec <__aeabi_dcmplt>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <MPU6050_Read_All+0x2bc>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MPU6050_Read_All+0x3c0>)
 8001e12:	f7fe fe89 	bl	8000b28 <__aeabi_dcmpgt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d114      	bne.n	8001e46 <MPU6050_Read_All+0x2e6>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MPU6050_Read_All+0x3c0>)
 8001e22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e26:	f7fe fe7f 	bl	8000b28 <__aeabi_dcmpgt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <MPU6050_Read_All+0x2fc>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <MPU6050_Read_All+0x3bc>)
 8001e3c:	f7fe fe56 	bl	8000aec <__aeabi_dcmplt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8001e46:	4937      	ldr	r1, [pc, #220]	; (8001f24 <MPU6050_Read_All+0x3c4>)
 8001e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001e5a:	e014      	b.n	8001e86 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e62:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e66:	eeb0 1a47 	vmov.f32	s2, s14
 8001e6a:	eef0 1a67 	vmov.f32	s3, s15
 8001e6e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e72:	482c      	ldr	r0, [pc, #176]	; (8001f24 <MPU6050_Read_All+0x3c4>)
 8001e74:	f000 f85a 	bl	8001f2c <Kalman_getAngle>
 8001e78:	eeb0 7a40 	vmov.f32	s14, s0
 8001e7c:	eef0 7a60 	vmov.f32	s15, s1
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001e8c:	4690      	mov	r8, r2
 8001e8e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <MPU6050_Read_All+0x3c0>)
 8001e98:	4640      	mov	r0, r8
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	f7fe fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001eac:	4614      	mov	r4, r2
 8001eae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001ebe:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001ec2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ec6:	eef0 1a67 	vmov.f32	s3, s15
 8001eca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001ece:	4816      	ldr	r0, [pc, #88]	; (8001f28 <MPU6050_Read_All+0x3c8>)
 8001ed0:	f000 f82c 	bl	8001f2c <Kalman_getAngle>
 8001ed4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed8:	eef0 7a60 	vmov.f32	s15, s1
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8001ee2:	bf00      	nop
 8001ee4:	3740      	adds	r7, #64	; 0x40
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	40cc2900 	.word	0x40cc2900
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	40606000 	.word	0x40606000
 8001f00:	1a63c1f8 	.word	0x1a63c1f8
 8001f04:	404ca5dc 	.word	0x404ca5dc
 8001f08:	40d00000 	.word	0x40d00000
 8001f0c:	43aa0000 	.word	0x43aa0000
 8001f10:	42121eb8 	.word	0x42121eb8
 8001f14:	20000380 	.word	0x20000380
 8001f18:	408f4000 	.word	0x408f4000
 8001f1c:	c0568000 	.word	0xc0568000
 8001f20:	40568000 	.word	0x40568000
 8001f24:	20000048 	.word	0x20000048
 8001f28:	20000000 	.word	0x20000000

08001f2c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b096      	sub	sp, #88	; 0x58
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	61f8      	str	r0, [r7, #28]
 8001f34:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f38:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f3c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4a:	f7fe f9a5 	bl	8000298 <__aeabi_dsub>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f64:	f7fe fb50 	bl	8000608 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe f994 	bl	800029c <__adddf3>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	69f9      	ldr	r1, [r7, #28]
 8001f7a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8e:	f7fe fb3b 	bl	8000608 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001fa0:	f7fe f97a 	bl	8000298 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001fb2:	f7fe f971 	bl	8000298 <__aeabi_dsub>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe f96a 	bl	800029c <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd4:	f7fe fb18 	bl	8000608 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe f95c 	bl	800029c <__adddf3>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	69f9      	ldr	r1, [r7, #28]
 8001fea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ffe:	f7fe fb03 	bl	8000608 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	f7fe f945 	bl	8000298 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	69f9      	ldr	r1, [r7, #28]
 8002014:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002028:	f7fe faee 	bl	8000608 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe f930 	bl	8000298 <__aeabi_dsub>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	69f9      	ldr	r1, [r7, #28]
 800203e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800204e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002052:	f7fe fad9 	bl	8000608 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f91d 	bl	800029c <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	69f9      	ldr	r1, [r7, #28]
 8002068:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002078:	f7fe f910 	bl	800029c <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800208a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800208e:	f7fe fbe5 	bl	800085c <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020a4:	f7fe fbda 	bl	800085c <__aeabi_ddiv>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ba:	f7fe f8ed 	bl	8000298 <__aeabi_dsub>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80020cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d4:	f7fe fa98 	bl	8000608 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4620      	mov	r0, r4
 80020de:	4629      	mov	r1, r5
 80020e0:	f7fe f8dc 	bl	800029c <__adddf3>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	69f9      	ldr	r1, [r7, #28]
 80020ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80020f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020fc:	f7fe fa84 	bl	8000608 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4620      	mov	r0, r4
 8002106:	4629      	mov	r1, r5
 8002108:	f7fe f8c8 	bl	800029c <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	69f9      	ldr	r1, [r7, #28]
 8002112:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800211c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002126:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002130:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002138:	f7fe fa66 	bl	8000608 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f8a8 	bl	8000298 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	69f9      	ldr	r1, [r7, #28]
 800214e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002158:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800215c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002160:	f7fe fa52 	bl	8000608 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe f894 	bl	8000298 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	69f9      	ldr	r1, [r7, #28]
 8002176:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002180:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002188:	f7fe fa3e 	bl	8000608 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe f880 	bl	8000298 <__aeabi_dsub>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	69f9      	ldr	r1, [r7, #28]
 800219e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80021a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021b0:	f7fe fa2a 	bl	8000608 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4620      	mov	r0, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	f7fe f86c 	bl	8000298 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	69f9      	ldr	r1, [r7, #28]
 80021c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d0:	ec43 2b17 	vmov	d7, r2, r3
};
 80021d4:	eeb0 0a47 	vmov.f32	s0, s14
 80021d8:	eef0 0a67 	vmov.f32	s1, s15
 80021dc:	3758      	adds	r7, #88	; 0x58
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_MspInit+0x4c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_MspInit+0x4c>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_MspInit+0x4c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_MspInit+0x4c>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_MspInit+0x4c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <HardFault_Handler+0x4>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <MemManage_Handler+0x4>

0800224e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <BusFault_Handler+0x4>

08002254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <UsageFault_Handler+0x4>

0800225a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002288:	f000 f9c2 	bl	8002610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
	return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_kill>:

int _kill(int pid, int sig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022aa:	f003 f835 	bl	8005318 <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2216      	movs	r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
	return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_exit>:

void _exit (int status)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffe7 	bl	80022a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0x12>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
	}

return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
	}
	return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x50>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x16>
		heap_end = &end;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <_sbrk+0x50>)
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <_sbrk+0x54>)
 80023c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <_sbrk+0x50>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <_sbrk+0x50>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	466a      	mov	r2, sp
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d907      	bls.n	80023ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023da:	f002 ff9d 	bl	8005318 <__errno>
 80023de:	4603      	mov	r3, r0
 80023e0:	220c      	movs	r2, #12
 80023e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e006      	b.n	80023f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <_sbrk+0x50>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <_sbrk+0x50>)
 80023f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000384 	.word	0x20000384
 8002404:	200003e0 	.word	0x200003e0

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <SystemInit+0x28>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <SystemInit+0x28>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SystemInit+0x28>)
 800241e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002422:	609a      	str	r2, [r3, #8]
#endif
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f002 fb92 	bl	8004b94 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff fb15 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000388 	.word	0x20000388
 8002484:	40011000 	.word	0x40011000

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_UART_MspInit+0x84>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12c      	bne.n	8002504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f4:	2307      	movs	r3, #7
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_UART_MspInit+0x8c>)
 8002500:	f000 fd92 	bl	8003028 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40011000 	.word	0x40011000
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800251c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800251e:	e003      	b.n	8002528 <LoopCopyDataInit>

08002520 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002522:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002524:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002526:	3104      	adds	r1, #4

08002528 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800252c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800252e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002530:	d3f6      	bcc.n	8002520 <CopyDataInit>
  ldr  r2, =_sbss
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002534:	e002      	b.n	800253c <LoopFillZerobss>

08002536 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002536:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002538:	f842 3b04 	str.w	r3, [r2], #4

0800253c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800253e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002540:	d3f9      	bcc.n	8002536 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002542:	f7ff ff61 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002546:	f002 feed 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7fe fef1 	bl	8001330 <main>
  bx  lr    
 800254e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002554:	080099b8 	.word	0x080099b8
  ldr  r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800255c:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8002560:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8002564:	200003e0 	.word	0x200003e0

08002568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>
	...

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <HAL_Init+0x40>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_Init+0x40>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_Init+0x40>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002594:	2003      	movs	r0, #3
 8002596:	f000 fd13 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 f808 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f7ff fe20 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x54>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd1d 	bl	800300e <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00e      	b.n	80025fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d80a      	bhi.n	80025fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f000 fcf3 	bl	8002fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_InitTick+0x5c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000090 	.word	0x20000090
 8002608:	20000098 	.word	0x20000098
 800260c:	20000094 	.word	0x20000094

08002610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000098 	.word	0x20000098
 8002634:	200003cc 	.word	0x200003cc

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200003cc 	.word	0x200003cc

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000098 	.word	0x20000098

08002698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e033      	b.n	8002716 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fc92 	bl	8000fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026de:	f023 0302 	bic.w	r3, r3, #2
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 faba 	bl	8002c64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	e001      	b.n	800270c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start+0x1a>
 8002736:	2302      	movs	r3, #2
 8002738:	e097      	b.n	800286a <HAL_ADC_Start+0x14a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d018      	beq.n	8002782 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002760:	4b45      	ldr	r3, [pc, #276]	; (8002878 <HAL_ADC_Start+0x158>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <HAL_ADC_Start+0x15c>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9a      	lsrs	r2, r3, #18
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002774:	e002      	b.n	800277c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d15f      	bne.n	8002850 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	d106      	bne.n	80027de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f023 0206 	bic.w	r2, r3, #6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_ADC_Start+0x160>)
 80027ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d129      	bne.n	8002868 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e020      	b.n	8002868 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_ADC_Start+0x164>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d11b      	bne.n	8002868 <HAL_ADC_Start+0x148>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d114      	bne.n	8002868 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	e00b      	b.n	8002868 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000090 	.word	0x20000090
 800287c:	431bde83 	.word	0x431bde83
 8002880:	40012300 	.word	0x40012300
 8002884:	40012000 	.word	0x40012000

08002888 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_ADC_Stop+0x16>
 800289a:	2302      	movs	r3, #2
 800289c:	e021      	b.n	80028e2 <HAL_ADC_Stop+0x5a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d113      	bne.n	8002934 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d10b      	bne.n	8002934 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e063      	b.n	80029fc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002934:	f7ff fe80 	bl	8002638 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800293a:	e021      	b.n	8002980 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d01d      	beq.n	8002980 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_ADC_PollForConversion+0x6c>
 800294a:	f7ff fe75 	bl	8002638 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d212      	bcs.n	8002980 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d00b      	beq.n	8002980 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0204 	orr.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e03d      	b.n	80029fc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d1d6      	bne.n	800293c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0212 	mvn.w	r2, #18
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d123      	bne.n	80029fa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d111      	bne.n	80029fa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e105      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x228>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d925      	bls.n	8002a98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68d9      	ldr	r1, [r3, #12]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b1e      	subs	r3, #30
 8002a62:	2207      	movs	r2, #7
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	400a      	ands	r2, r1
 8002a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68d9      	ldr	r1, [r3, #12]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	4603      	mov	r3, r0
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4403      	add	r3, r0
 8002a8a:	3b1e      	subs	r3, #30
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e022      	b.n	8002ade <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6919      	ldr	r1, [r3, #16]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	2207      	movs	r2, #7
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6919      	ldr	r1, [r3, #16]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4403      	add	r3, r0
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d824      	bhi.n	8002b30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b05      	subs	r3, #5
 8002af8:	221f      	movs	r2, #31
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b05      	subs	r3, #5
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2e:	e04c      	b.n	8002bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d824      	bhi.n	8002b82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3b23      	subs	r3, #35	; 0x23
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43da      	mvns	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	400a      	ands	r2, r1
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b23      	subs	r3, #35	; 0x23
 8002b74:	fa00 f203 	lsl.w	r2, r0, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b80:	e023      	b.n	8002bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	3b41      	subs	r3, #65	; 0x41
 8002b94:	221f      	movs	r2, #31
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b41      	subs	r3, #65	; 0x41
 8002bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_ADC_ConfigChannel+0x234>)
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_ADC_ConfigChannel+0x238>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1cc>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b12      	cmp	r3, #18
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_ADC_ConfigChannel+0x238>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d123      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x21e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d003      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x1e6>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b11      	cmp	r3, #17
 8002c04:	d11b      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d111      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_ADC_ConfigChannel+0x23c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_ADC_ConfigChannel+0x240>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	0c9a      	lsrs	r2, r3, #18
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c30:	e002      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f9      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40012300 	.word	0x40012300
 8002c58:	40012000 	.word	0x40012000
 8002c5c:	20000090 	.word	0x20000090
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c6c:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <ADC_Init+0x1f0>)
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <ADC_Init+0x1f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	e00f      	b.n	8002d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0202 	bic.w	r2, r2, #2
 8002d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e1b      	ldrb	r3, [r3, #24]
 8002d7c:	005a      	lsls	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	035a      	lsls	r2, r3, #13
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	e007      	b.n	8002dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	051a      	lsls	r2, r3, #20
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6899      	ldr	r1, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1a:	025a      	lsls	r2, r3, #9
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	029a      	lsls	r2, r3, #10
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40012300 	.word	0x40012300
 8002e58:	0f000001 	.word	0x0f000001

08002e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8e:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	60d3      	str	r3, [r2, #12]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <__NVIC_GetPriorityGrouping+0x18>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	f003 0307 	and.w	r3, r3, #7
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	; (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	; (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f8c:	d301      	bcc.n	8002f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <SysTick_Config+0x40>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f7ff ff8e 	bl	8002ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <SysTick_Config+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SysTick_Config+0x40>)
 8002fac:	2207      	movs	r2, #7
 8002fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e010 	.word	0xe000e010

08002fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff47 	bl	8002e5c <__NVIC_SetPriorityGrouping>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe8:	f7ff ff5c 	bl	8002ea4 <__NVIC_GetPriorityGrouping>
 8002fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ff8e 	bl	8002f14 <NVIC_EncodePriority>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff5d 	bl	8002ec0 <__NVIC_SetPriority>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffb0 	bl	8002f7c <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e159      	b.n	80032f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8148 	bne.w	80032f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d005      	beq.n	800307a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003076:	2b02      	cmp	r3, #2
 8003078:	d130      	bne.n	80030dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0201 	and.w	r2, r3, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a2 	beq.w	80032f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b57      	ldr	r3, [pc, #348]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_GPIO_Init+0x2e8>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ca:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_GPIO_Init+0x2ec>)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a49      	ldr	r2, [pc, #292]	; (8003318 <HAL_GPIO_Init+0x2f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x202>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_GPIO_Init+0x2f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x1fe>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a47      	ldr	r2, [pc, #284]	; (8003320 <HAL_GPIO_Init+0x2f8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a46      	ldr	r2, [pc, #280]	; (8003324 <HAL_GPIO_Init+0x2fc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x1f6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a45      	ldr	r2, [pc, #276]	; (8003328 <HAL_GPIO_Init+0x300>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x1f2>
 8003216:	2304      	movs	r3, #4
 8003218:	e008      	b.n	800322c <HAL_GPIO_Init+0x204>
 800321a:	2307      	movs	r3, #7
 800321c:	e006      	b.n	800322c <HAL_GPIO_Init+0x204>
 800321e:	2303      	movs	r3, #3
 8003220:	e004      	b.n	800322c <HAL_GPIO_Init+0x204>
 8003222:	2302      	movs	r3, #2
 8003224:	e002      	b.n	800322c <HAL_GPIO_Init+0x204>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_GPIO_Init+0x204>
 800322a:	2300      	movs	r3, #0
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f002 0203 	and.w	r2, r2, #3
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	4093      	lsls	r3, r2
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800323c:	4935      	ldr	r1, [pc, #212]	; (8003314 <HAL_GPIO_Init+0x2ec>)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_GPIO_Init+0x304>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326e:	4a2f      	ldr	r2, [pc, #188]	; (800332c <HAL_GPIO_Init+0x304>)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_GPIO_Init+0x304>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <HAL_GPIO_Init+0x304>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_GPIO_Init+0x304>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_GPIO_Init+0x304>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_GPIO_Init+0x304>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HAL_GPIO_Init+0x304>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3301      	adds	r3, #1
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	f67f aea2 	bls.w	8003044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	40013800 	.word	0x40013800
 8003318:	40020000 	.word	0x40020000
 800331c:	40020400 	.word	0x40020400
 8003320:	40020800 	.word	0x40020800
 8003324:	40020c00 	.word	0x40020c00
 8003328:	40021000 	.word	0x40021000
 800332c:	40013c00 	.word	0x40013c00

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12b      	b.n	80035ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd ff12 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c8:	f001 fbbc 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_I2C_Init+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d807      	bhi.n	80033e8 <HAL_I2C_Init+0x84>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_I2C_Init+0x278>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e006      	b.n	80033f6 <HAL_I2C_Init+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7d      	ldr	r2, [pc, #500]	; (80035e0 <HAL_I2C_Init+0x27c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0e7      	b.n	80035ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a78      	ldr	r2, [pc, #480]	; (80035e4 <HAL_I2C_Init+0x280>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a6a      	ldr	r2, [pc, #424]	; (80035d8 <HAL_I2C_Init+0x274>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <HAL_I2C_Init+0xd4>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	e009      	b.n	800344c <HAL_I2C_Init+0xe8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <HAL_I2C_Init+0x284>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800345e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	495c      	ldr	r1, [pc, #368]	; (80035d8 <HAL_I2C_Init+0x274>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d819      	bhi.n	80034a0 <HAL_I2C_Init+0x13c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e59      	subs	r1, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fbb1 f3f3 	udiv	r3, r1, r3
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003480:	400b      	ands	r3, r1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_I2C_Init+0x138>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e59      	subs	r1, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fbb1 f3f3 	udiv	r3, r1, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349a:	e051      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e04f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_I2C_Init+0x168>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e012      	b.n	80034f2 <HAL_I2C_Init+0x18e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Init+0x196>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_I2C_Init+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e58      	subs	r0, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	440b      	add	r3, r1
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6809      	ldr	r1, [r1, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800356e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6911      	ldr	r1, [r2, #16]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	001e847f 	.word	0x001e847f
 80035e0:	003d08ff 	.word	0x003d08ff
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	817b      	strh	r3, [r7, #10]
 80035fe:	460b      	mov	r3, r1
 8003600:	813b      	strh	r3, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003606:	f7ff f817 	bl	8002638 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b20      	cmp	r3, #32
 8003616:	f040 80d9 	bne.w	80037cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2319      	movs	r3, #25
 8003620:	2201      	movs	r2, #1
 8003622:	496d      	ldr	r1, [pc, #436]	; (80037d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fc7f 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
 8003632:	e0cc      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Mem_Write+0x56>
 800363e:	2302      	movs	r3, #2
 8003640:	e0c5      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d007      	beq.n	8003668 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2221      	movs	r2, #33	; 0x21
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a4d      	ldr	r2, [pc, #308]	; (80037dc <HAL_I2C_Mem_Write+0x1f0>)
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036aa:	88f8      	ldrh	r0, [r7, #6]
 80036ac:	893a      	ldrh	r2, [r7, #8]
 80036ae:	8979      	ldrh	r1, [r7, #10]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4603      	mov	r3, r0
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fab6 	bl	8003c2c <I2C_RequestMemoryWrite>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d052      	beq.n	800376c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e081      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fd00 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d107      	bne.n	80036f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06b      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11b      	bne.n	800376c <HAL_I2C_Mem_Write+0x180>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1aa      	bne.n	80036ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fcec 	bl	8004156 <I2C_WaitOnBTFFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e016      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	00100002 	.word	0x00100002
 80037dc:	ffff0000 	.word	0xffff0000

080037e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fa:	f7fe ff1d 	bl	8002638 <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 8208 	bne.w	8003c1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2319      	movs	r3, #25
 8003814:	2201      	movs	r2, #1
 8003816:	497b      	ldr	r1, [pc, #492]	; (8003a04 <HAL_I2C_Mem_Read+0x224>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fb85 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	e1fb      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_I2C_Mem_Read+0x56>
 8003832:	2302      	movs	r3, #2
 8003834:	e1f4      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2222      	movs	r2, #34	; 0x22
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <HAL_I2C_Mem_Read+0x228>)
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800389e:	88f8      	ldrh	r0, [r7, #6]
 80038a0:	893a      	ldrh	r2, [r7, #8]
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4603      	mov	r3, r0
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fa52 	bl	8003d58 <I2C_RequestMemoryRead>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1b0      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d113      	bne.n	80038ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e184      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d11b      	bne.n	800392e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e164      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b02      	cmp	r3, #2
 8003934:	d11b      	bne.n	800396e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	e144      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003984:	e138      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	2b03      	cmp	r3, #3
 800398c:	f200 80f1 	bhi.w	8003b72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b01      	cmp	r3, #1
 8003996:	d123      	bne.n	80039e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fc1b 	bl	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e139      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039de:	e10b      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d14e      	bne.n	8003a86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	2200      	movs	r2, #0
 80039f0:	4906      	ldr	r1, [pc, #24]	; (8003a0c <HAL_I2C_Mem_Read+0x22c>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fa98 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e10e      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
 8003a02:	bf00      	nop
 8003a04:	00100002 	.word	0x00100002
 8003a08:	ffff0000 	.word	0xffff0000
 8003a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a84:	e0b8      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4966      	ldr	r1, [pc, #408]	; (8003c28 <HAL_I2C_Mem_Read+0x448>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fa49 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0bf      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2200      	movs	r2, #0
 8003aea:	494f      	ldr	r1, [pc, #316]	; (8003c28 <HAL_I2C_Mem_Read+0x448>)
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fa1b 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e091      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b70:	e042      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fb2e 	bl	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e04c      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d118      	bne.n	8003bf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f aec2 	bne.w	8003986 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3728      	adds	r7, #40	; 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	00010004 	.word	0x00010004

08003c2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f960 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d103      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e05f      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	492d      	ldr	r1, [pc, #180]	; (8003d54 <I2C_RequestMemoryWrite+0x128>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f998 	bl	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04c      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa02 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02b      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e021      	b.n	8003d48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f9dc 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e005      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	00010002 	.word	0x00010002

08003d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8c2 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db8:	d103      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0aa      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	4952      	ldr	r1, [pc, #328]	; (8003f24 <I2C_RequestMemoryRead+0x1cc>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f8fa 	bl	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e097      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f964 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e076      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e021      	b.n	8003e84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f93e 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e050      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f923 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d107      	bne.n	8003eac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e035      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f82b 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d103      	bne.n	8003ef0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e013      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	4906      	ldr	r1, [pc, #24]	; (8003f24 <I2C_RequestMemoryRead+0x1cc>)
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f863 	bl	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00010002 	.word	0x00010002

08003f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f38:	e025      	b.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d021      	beq.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fe fb79 	bl	8002638 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d116      	bne.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e023      	b.n	8003fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d10d      	bne.n	8003fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	e00c      	b.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d0b6      	beq.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe4:	e051      	b.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d123      	bne.n	800403e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800400e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e046      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d021      	beq.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe faf7 	bl	8002638 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e020      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d10c      	bne.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e00b      	b.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d18d      	bne.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e0:	e02d      	b.n	800413e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8ce 	bl	8004284 <I2C_IsAcknowledgeFailed>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e02d      	b.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d021      	beq.n	800413e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fa9d 	bl	8002638 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e007      	b.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b80      	cmp	r3, #128	; 0x80
 800414a:	d1ca      	bne.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004162:	e02d      	b.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f88d 	bl	8004284 <I2C_IsAcknowledgeFailed>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e02d      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d021      	beq.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fe fa5c 	bl	8002638 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d116      	bne.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e007      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d1ca      	bne.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e4:	e042      	b.n	800426c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d119      	bne.n	8004228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e029      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7fe fa06 	bl	8002638 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e007      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d1b5      	bne.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d11b      	bne.n	80042d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e267      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d075      	beq.n	80043ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004302:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d00c      	beq.n	8004328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004316:	2b08      	cmp	r3, #8
 8004318:	d112      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431a:	4b82      	ldr	r3, [pc, #520]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004326:	d10b      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	4b7e      	ldr	r3, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05b      	beq.n	80043ec <HAL_RCC_OscConfig+0x108>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d157      	bne.n	80043ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e242      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x74>
 800434a:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a75      	ldr	r2, [pc, #468]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x98>
 8004362:	4b70      	ldr	r3, [pc, #448]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6f      	ldr	r2, [pc, #444]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6c      	ldr	r2, [pc, #432]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 800437c:	4b69      	ldr	r3, [pc, #420]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a68      	ldr	r2, [pc, #416]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b66      	ldr	r3, [pc, #408]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe f94c 	bl	8002638 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe f948 	bl	8002638 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e207      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xc0>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fe f938 	bl	8002638 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fe f934 	bl	8002638 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1f3      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0xe8>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d063      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043fa:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1c7      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4937      	ldr	r1, [pc, #220]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e03a      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b34      	ldr	r3, [pc, #208]	; (8004528 <HAL_RCC_OscConfig+0x244>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fe f8ed 	bl	8002638 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004462:	f7fe f8e9 	bl	8002638 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1a8      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4925      	ldr	r1, [pc, #148]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]
 8004494:	e015      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x244>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fe f8cc 	bl	8002638 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fe f8c8 	bl	8002638 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e187      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d036      	beq.n	800453c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCC_OscConfig+0x248>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fe f8ac 	bl	8002638 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fe f8a8 	bl	8002638 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e167      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCC_OscConfig+0x240>)
 80044f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x200>
 8004502:	e01b      	b.n	800453c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_OscConfig+0x248>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fe f895 	bl	8002638 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e00e      	b.n	8004530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004512:	f7fe f891 	bl	8002638 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d907      	bls.n	8004530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e150      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004524:	40023800 	.word	0x40023800
 8004528:	42470000 	.word	0x42470000
 800452c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ea      	bne.n	8004512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8097 	beq.w	8004678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	4a7c      	ldr	r2, [pc, #496]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	; 0x40
 800456a:	4b7a      	ldr	r3, [pc, #488]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x474>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b74      	ldr	r3, [pc, #464]	; (8004758 <HAL_RCC_OscConfig+0x474>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a73      	ldr	r2, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x474>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fe f851 	bl	8002638 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fe f84d 	bl	8002638 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e10c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCC_OscConfig+0x474>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x2ea>
 80045c0:	4b64      	ldr	r3, [pc, #400]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a63      	ldr	r2, [pc, #396]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x30c>
 80045d6:	4b5f      	ldr	r3, [pc, #380]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a5e      	ldr	r2, [pc, #376]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	4b5c      	ldr	r3, [pc, #368]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a5b      	ldr	r2, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	4a57      	ldr	r2, [pc, #348]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	; 0x70
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a54      	ldr	r2, [pc, #336]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004602:	f023 0304 	bic.w	r3, r3, #4
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fe f812 	bl	8002638 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fe f80e 	bl	8002638 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0cb      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	4b49      	ldr	r3, [pc, #292]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ee      	beq.n	8004618 <HAL_RCC_OscConfig+0x334>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463c:	f7fd fffc 	bl	8002638 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd fff8 	bl	8002638 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0b5      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	4a38      	ldr	r2, [pc, #224]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a1 	beq.w	80047c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d05c      	beq.n	8004748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d141      	bne.n	800471a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b31      	ldr	r3, [pc, #196]	; (800475c <HAL_RCC_OscConfig+0x478>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fd ffcc 	bl	8002638 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd ffc8 	bl	8002638 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e087      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b27      	ldr	r3, [pc, #156]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	491b      	ldr	r1, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x478>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fd ffa1 	bl	8002638 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fd ff9d 	bl	8002638 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e05c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x416>
 8004718:	e054      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_RCC_OscConfig+0x478>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fd ff8a 	bl	8002638 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fd ff86 	bl	8002638 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e045      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCC_OscConfig+0x470>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x444>
 8004746:	e03d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e038      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	40007000 	.word	0x40007000
 800475c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x4ec>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d028      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d11a      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	3b01      	subs	r3, #1
 80047aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cc      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d90c      	bls.n	8004810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b63      	ldr	r3, [pc, #396]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0b8      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004828:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a58      	ldr	r2, [pc, #352]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004840:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800484a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	494d      	ldr	r1, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d119      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d003      	beq.n	8004892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e067      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4934      	ldr	r1, [pc, #208]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fd feb8 	bl	8002638 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048cc:	f7fd feb4 	bl	8002638 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 020c 	and.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1eb      	bne.n	80048cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b25      	ldr	r3, [pc, #148]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20c      	bcs.n	800491c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b22      	ldr	r3, [pc, #136]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e032      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4916      	ldr	r1, [pc, #88]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	490e      	ldr	r1, [pc, #56]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800495a:	f000 f821 	bl	80049a0 <HAL_RCC_GetSysClockFreq>
 800495e:	4602      	mov	r2, r0
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	490a      	ldr	r1, [pc, #40]	; (8004994 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	5ccb      	ldrb	r3, [r1, r3]
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fe18 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00
 8004990:	40023800 	.word	0x40023800
 8004994:	08009510 	.word	0x08009510
 8004998:	20000090 	.word	0x20000090
 800499c:	20000094 	.word	0x20000094

080049a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b090      	sub	sp, #64	; 0x40
 80049a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
 80049ac:	2300      	movs	r3, #0
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b0:	2300      	movs	r3, #0
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d00d      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x40>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	f200 80a1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x3a>
 80049d2:	e09b      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049d8:	e09b      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049da:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80049dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049de:	e098      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e0:	4b4f      	ldr	r3, [pc, #316]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ea:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d028      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	2200      	movs	r2, #0
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	627a      	str	r2, [r7, #36]	; 0x24
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a0c:	fb03 f201 	mul.w	r2, r3, r1
 8004a10:	2300      	movs	r3, #0
 8004a12:	fb00 f303 	mul.w	r3, r0, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	4a43      	ldr	r2, [pc, #268]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a20:	460a      	mov	r2, r1
 8004a22:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a26:	4413      	add	r3, r2
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	61fa      	str	r2, [r7, #28]
 8004a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a3a:	f7fc f90d 	bl	8000c58 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4613      	mov	r3, r2
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	e053      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a48:	4b35      	ldr	r3, [pc, #212]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	099b      	lsrs	r3, r3, #6
 8004a4e:	2200      	movs	r2, #0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	617a      	str	r2, [r7, #20]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a5a:	f04f 0b00 	mov.w	fp, #0
 8004a5e:	4652      	mov	r2, sl
 8004a60:	465b      	mov	r3, fp
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	0159      	lsls	r1, r3, #5
 8004a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a70:	0150      	lsls	r0, r2, #5
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	ebb2 080a 	subs.w	r8, r2, sl
 8004a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a92:	ebb2 0408 	subs.w	r4, r2, r8
 8004a96:	eb63 0509 	sbc.w	r5, r3, r9
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	00eb      	lsls	r3, r5, #3
 8004aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa8:	00e2      	lsls	r2, r4, #3
 8004aaa:	4614      	mov	r4, r2
 8004aac:	461d      	mov	r5, r3
 8004aae:	eb14 030a 	adds.w	r3, r4, sl
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	eb45 030b 	adc.w	r3, r5, fp
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	028b      	lsls	r3, r1, #10
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	028a      	lsls	r2, r1, #10
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	2200      	movs	r2, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	60fa      	str	r2, [r7, #12]
 8004ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae4:	f7fc f8b8 	bl	8000c58 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3740      	adds	r7, #64	; 0x40
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	017d7840 	.word	0x017d7840

08004b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000090 	.word	0x20000090

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	08009520 	.word	0x08009520

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08009520 	.word	0x08009520

08004b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e03f      	b.n	8004c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd fc64 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f929 	bl	8004e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08a      	sub	sp, #40	; 0x28
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d17c      	bne.n	8004d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_UART_Transmit+0x2c>
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e075      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Transmit+0x3e>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e06e      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c82:	f7fd fcd9 	bl	8002638 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Transmit+0x82>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cc0:	e02a      	b.n	8004d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f840 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e036      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1cf      	bne.n	8004cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f810 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b090      	sub	sp, #64	; 0x40
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	e050      	b.n	8004e06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d04c      	beq.n	8004e06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d72:	f7fd fc61 	bl	8002638 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d241      	bcs.n	8004e06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da2:	637a      	str	r2, [r7, #52]	; 0x34
 8004da4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e5      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3314      	adds	r3, #20
 8004dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd6:	623a      	str	r2, [r7, #32]
 8004dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	69f9      	ldr	r1, [r7, #28]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e5      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e00f      	b.n	8004e26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d09f      	beq.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3740      	adds	r7, #64	; 0x40
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b0c0      	sub	sp, #256	; 0x100
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	ea40 0301 	orr.w	r3, r0, r1
 8004e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e88:	f021 010c 	bic.w	r1, r1, #12
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e96:	430b      	orrs	r3, r1
 8004e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	6999      	ldr	r1, [r3, #24]
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	ea40 0301 	orr.w	r3, r0, r1
 8004eb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b8f      	ldr	r3, [pc, #572]	; (80050fc <UART_SetConfig+0x2cc>)
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d005      	beq.n	8004ed0 <UART_SetConfig+0xa0>
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <UART_SetConfig+0x2d0>)
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d104      	bne.n	8004eda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7ff fe4c 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8004ed4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ed8:	e003      	b.n	8004ee2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eda:	f7ff fe33 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8004ede:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eec:	f040 810c 	bne.w	8005108 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004efa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004efe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	1891      	adds	r1, r2, r2
 8004f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f0a:	415b      	adcs	r3, r3
 8004f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f12:	4621      	mov	r1, r4
 8004f14:	eb12 0801 	adds.w	r8, r2, r1
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb43 0901 	adc.w	r9, r3, r1
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f32:	4690      	mov	r8, r2
 8004f34:	4699      	mov	r9, r3
 8004f36:	4623      	mov	r3, r4
 8004f38:	eb18 0303 	adds.w	r3, r8, r3
 8004f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f40:	462b      	mov	r3, r5
 8004f42:	eb49 0303 	adc.w	r3, r9, r3
 8004f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f5e:	460b      	mov	r3, r1
 8004f60:	18db      	adds	r3, r3, r3
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
 8004f64:	4613      	mov	r3, r2
 8004f66:	eb42 0303 	adc.w	r3, r2, r3
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f74:	f7fb fe70 	bl	8000c58 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <UART_SetConfig+0x2d4>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	011c      	lsls	r4, r3, #4
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fa8:	4641      	mov	r1, r8
 8004faa:	eb12 0a01 	adds.w	sl, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc8:	4692      	mov	sl, r2
 8004fca:	469b      	mov	fp, r3
 8004fcc:	4643      	mov	r3, r8
 8004fce:	eb1a 0303 	adds.w	r3, sl, r3
 8004fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ff0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	18db      	adds	r3, r3, r3
 8004ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800500a:	f7fb fe25 	bl	8000c58 <__aeabi_uldivmod>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4611      	mov	r1, r2
 8005014:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <UART_SetConfig+0x2d4>)
 8005016:	fba3 2301 	umull	r2, r3, r3, r1
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2264      	movs	r2, #100	; 0x64
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	1acb      	subs	r3, r1, r3
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <UART_SetConfig+0x2d4>)
 800502c:	fba3 2302 	umull	r2, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005038:	441c      	add	r4, r3
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005044:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005048:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	1891      	adds	r1, r2, r2
 8005052:	63b9      	str	r1, [r7, #56]	; 0x38
 8005054:	415b      	adcs	r3, r3
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800505c:	4641      	mov	r1, r8
 800505e:	1851      	adds	r1, r2, r1
 8005060:	6339      	str	r1, [r7, #48]	; 0x30
 8005062:	4649      	mov	r1, r9
 8005064:	414b      	adcs	r3, r1
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005074:	4659      	mov	r1, fp
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	4651      	mov	r1, sl
 800507a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507e:	4651      	mov	r1, sl
 8005080:	00ca      	lsls	r2, r1, #3
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	4603      	mov	r3, r0
 8005088:	4642      	mov	r2, r8
 800508a:	189b      	adds	r3, r3, r2
 800508c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005090:	464b      	mov	r3, r9
 8005092:	460a      	mov	r2, r1
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050b0:	460b      	mov	r3, r1
 80050b2:	18db      	adds	r3, r3, r3
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b6:	4613      	mov	r3, r2
 80050b8:	eb42 0303 	adc.w	r3, r2, r3
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050c6:	f7fb fdc7 	bl	8000c58 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x2d4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x2d4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4422      	add	r2, r4
 80050f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050f8:	e105      	b.n	8005306 <UART_SetConfig+0x4d6>
 80050fa:	bf00      	nop
 80050fc:	40011000 	.word	0x40011000
 8005100:	40011400 	.word	0x40011400
 8005104:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005112:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005116:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800511a:	4642      	mov	r2, r8
 800511c:	464b      	mov	r3, r9
 800511e:	1891      	adds	r1, r2, r2
 8005120:	6239      	str	r1, [r7, #32]
 8005122:	415b      	adcs	r3, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800512a:	4641      	mov	r1, r8
 800512c:	1854      	adds	r4, r2, r1
 800512e:	4649      	mov	r1, r9
 8005130:	eb43 0501 	adc.w	r5, r3, r1
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	00eb      	lsls	r3, r5, #3
 800513e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005142:	00e2      	lsls	r2, r4, #3
 8005144:	4614      	mov	r4, r2
 8005146:	461d      	mov	r5, r3
 8005148:	4643      	mov	r3, r8
 800514a:	18e3      	adds	r3, r4, r3
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005150:	464b      	mov	r3, r9
 8005152:	eb45 0303 	adc.w	r3, r5, r3
 8005156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005176:	4629      	mov	r1, r5
 8005178:	008b      	lsls	r3, r1, #2
 800517a:	4621      	mov	r1, r4
 800517c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005180:	4621      	mov	r1, r4
 8005182:	008a      	lsls	r2, r1, #2
 8005184:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005188:	f7fb fd66 	bl	8000c58 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4b60      	ldr	r3, [pc, #384]	; (8005314 <UART_SetConfig+0x4e4>)
 8005192:	fba3 2302 	umull	r2, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	011c      	lsls	r4, r3, #4
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	61b9      	str	r1, [r7, #24]
 80051b4:	415b      	adcs	r3, r3
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051bc:	4641      	mov	r1, r8
 80051be:	1851      	adds	r1, r2, r1
 80051c0:	6139      	str	r1, [r7, #16]
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d4:	4659      	mov	r1, fp
 80051d6:	00cb      	lsls	r3, r1, #3
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051de:	4651      	mov	r1, sl
 80051e0:	00ca      	lsls	r2, r1, #3
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	4642      	mov	r2, r8
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f0:	464b      	mov	r3, r9
 80051f2:	460a      	mov	r2, r1
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	67bb      	str	r3, [r7, #120]	; 0x78
 8005206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005214:	4649      	mov	r1, r9
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	4641      	mov	r1, r8
 800521a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521e:	4641      	mov	r1, r8
 8005220:	008a      	lsls	r2, r1, #2
 8005222:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005226:	f7fb fd17 	bl	8000c58 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b39      	ldr	r3, [pc, #228]	; (8005314 <UART_SetConfig+0x4e4>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	; 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <UART_SetConfig+0x4e4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524e:	441c      	add	r4, r3
 8005250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005254:	2200      	movs	r2, #0
 8005256:	673b      	str	r3, [r7, #112]	; 0x70
 8005258:	677a      	str	r2, [r7, #116]	; 0x74
 800525a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	1891      	adds	r1, r2, r2
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	415b      	adcs	r3, r3
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800526e:	4641      	mov	r1, r8
 8005270:	1851      	adds	r1, r2, r1
 8005272:	6039      	str	r1, [r7, #0]
 8005274:	4649      	mov	r1, r9
 8005276:	414b      	adcs	r3, r1
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005286:	4659      	mov	r1, fp
 8005288:	00cb      	lsls	r3, r1, #3
 800528a:	4651      	mov	r1, sl
 800528c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005290:	4651      	mov	r1, sl
 8005292:	00ca      	lsls	r2, r1, #3
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	4603      	mov	r3, r0
 800529a:	4642      	mov	r2, r8
 800529c:	189b      	adds	r3, r3, r2
 800529e:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a0:	464b      	mov	r3, r9
 80052a2:	460a      	mov	r2, r1
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	663b      	str	r3, [r7, #96]	; 0x60
 80052b4:	667a      	str	r2, [r7, #100]	; 0x64
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052c2:	4649      	mov	r1, r9
 80052c4:	008b      	lsls	r3, r1, #2
 80052c6:	4641      	mov	r1, r8
 80052c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052cc:	4641      	mov	r1, r8
 80052ce:	008a      	lsls	r2, r1, #2
 80052d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052d4:	f7fb fcc0 	bl	8000c58 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <UART_SetConfig+0x4e4>)
 80052de:	fba3 1302 	umull	r1, r3, r3, r2
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	2164      	movs	r1, #100	; 0x64
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	3332      	adds	r3, #50	; 0x32
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <UART_SetConfig+0x4e4>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4422      	add	r2, r4
 8005304:	609a      	str	r2, [r3, #8]
}
 8005306:	bf00      	nop
 8005308:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	51eb851f 	.word	0x51eb851f

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	2000009c 	.word	0x2000009c

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	; (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	; (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	; (8005368 <__libc_init_array+0x44>)
 8005338:	f004 f8b8 	bl	80094ac <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	080099b0 	.word	0x080099b0
 8005360:	080099b0 	.word	0x080099b0
 8005364:	080099b0 	.word	0x080099b0
 8005368:	080099b4 	.word	0x080099b4

0800536c <memset>:
 800536c:	4402      	add	r2, r0
 800536e:	4603      	mov	r3, r0
 8005370:	4293      	cmp	r3, r2
 8005372:	d100      	bne.n	8005376 <memset+0xa>
 8005374:	4770      	bx	lr
 8005376:	f803 1b01 	strb.w	r1, [r3], #1
 800537a:	e7f9      	b.n	8005370 <memset+0x4>

0800537c <__cvt>:
 800537c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	ec55 4b10 	vmov	r4, r5, d0
 8005384:	2d00      	cmp	r5, #0
 8005386:	460e      	mov	r6, r1
 8005388:	4619      	mov	r1, r3
 800538a:	462b      	mov	r3, r5
 800538c:	bfbb      	ittet	lt
 800538e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005392:	461d      	movlt	r5, r3
 8005394:	2300      	movge	r3, #0
 8005396:	232d      	movlt	r3, #45	; 0x2d
 8005398:	700b      	strb	r3, [r1, #0]
 800539a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800539c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053a0:	4691      	mov	r9, r2
 80053a2:	f023 0820 	bic.w	r8, r3, #32
 80053a6:	bfbc      	itt	lt
 80053a8:	4622      	movlt	r2, r4
 80053aa:	4614      	movlt	r4, r2
 80053ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053b0:	d005      	beq.n	80053be <__cvt+0x42>
 80053b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053b6:	d100      	bne.n	80053ba <__cvt+0x3e>
 80053b8:	3601      	adds	r6, #1
 80053ba:	2102      	movs	r1, #2
 80053bc:	e000      	b.n	80053c0 <__cvt+0x44>
 80053be:	2103      	movs	r1, #3
 80053c0:	ab03      	add	r3, sp, #12
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	ab02      	add	r3, sp, #8
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	ec45 4b10 	vmov	d0, r4, r5
 80053cc:	4653      	mov	r3, sl
 80053ce:	4632      	mov	r2, r6
 80053d0:	f000 fcea 	bl	8005da8 <_dtoa_r>
 80053d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053d8:	4607      	mov	r7, r0
 80053da:	d102      	bne.n	80053e2 <__cvt+0x66>
 80053dc:	f019 0f01 	tst.w	r9, #1
 80053e0:	d022      	beq.n	8005428 <__cvt+0xac>
 80053e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053e6:	eb07 0906 	add.w	r9, r7, r6
 80053ea:	d110      	bne.n	800540e <__cvt+0x92>
 80053ec:	783b      	ldrb	r3, [r7, #0]
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d10a      	bne.n	8005408 <__cvt+0x8c>
 80053f2:	2200      	movs	r2, #0
 80053f4:	2300      	movs	r3, #0
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80053fe:	b918      	cbnz	r0, 8005408 <__cvt+0x8c>
 8005400:	f1c6 0601 	rsb	r6, r6, #1
 8005404:	f8ca 6000 	str.w	r6, [sl]
 8005408:	f8da 3000 	ldr.w	r3, [sl]
 800540c:	4499      	add	r9, r3
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fb fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800541a:	b108      	cbz	r0, 8005420 <__cvt+0xa4>
 800541c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005420:	2230      	movs	r2, #48	; 0x30
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	454b      	cmp	r3, r9
 8005426:	d307      	bcc.n	8005438 <__cvt+0xbc>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800542c:	1bdb      	subs	r3, r3, r7
 800542e:	4638      	mov	r0, r7
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	b004      	add	sp, #16
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	9103      	str	r1, [sp, #12]
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e7f0      	b.n	8005422 <__cvt+0xa6>

08005440 <__exponent>:
 8005440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005442:	4603      	mov	r3, r0
 8005444:	2900      	cmp	r1, #0
 8005446:	bfb8      	it	lt
 8005448:	4249      	neglt	r1, r1
 800544a:	f803 2b02 	strb.w	r2, [r3], #2
 800544e:	bfb4      	ite	lt
 8005450:	222d      	movlt	r2, #45	; 0x2d
 8005452:	222b      	movge	r2, #43	; 0x2b
 8005454:	2909      	cmp	r1, #9
 8005456:	7042      	strb	r2, [r0, #1]
 8005458:	dd2a      	ble.n	80054b0 <__exponent+0x70>
 800545a:	f10d 0407 	add.w	r4, sp, #7
 800545e:	46a4      	mov	ip, r4
 8005460:	270a      	movs	r7, #10
 8005462:	46a6      	mov	lr, r4
 8005464:	460a      	mov	r2, r1
 8005466:	fb91 f6f7 	sdiv	r6, r1, r7
 800546a:	fb07 1516 	mls	r5, r7, r6, r1
 800546e:	3530      	adds	r5, #48	; 0x30
 8005470:	2a63      	cmp	r2, #99	; 0x63
 8005472:	f104 34ff 	add.w	r4, r4, #4294967295
 8005476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800547a:	4631      	mov	r1, r6
 800547c:	dcf1      	bgt.n	8005462 <__exponent+0x22>
 800547e:	3130      	adds	r1, #48	; 0x30
 8005480:	f1ae 0502 	sub.w	r5, lr, #2
 8005484:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005488:	1c44      	adds	r4, r0, #1
 800548a:	4629      	mov	r1, r5
 800548c:	4561      	cmp	r1, ip
 800548e:	d30a      	bcc.n	80054a6 <__exponent+0x66>
 8005490:	f10d 0209 	add.w	r2, sp, #9
 8005494:	eba2 020e 	sub.w	r2, r2, lr
 8005498:	4565      	cmp	r5, ip
 800549a:	bf88      	it	hi
 800549c:	2200      	movhi	r2, #0
 800549e:	4413      	add	r3, r2
 80054a0:	1a18      	subs	r0, r3, r0
 80054a2:	b003      	add	sp, #12
 80054a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054ae:	e7ed      	b.n	800548c <__exponent+0x4c>
 80054b0:	2330      	movs	r3, #48	; 0x30
 80054b2:	3130      	adds	r1, #48	; 0x30
 80054b4:	7083      	strb	r3, [r0, #2]
 80054b6:	70c1      	strb	r1, [r0, #3]
 80054b8:	1d03      	adds	r3, r0, #4
 80054ba:	e7f1      	b.n	80054a0 <__exponent+0x60>

080054bc <_printf_float>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	ed2d 8b02 	vpush	{d8}
 80054c4:	b08d      	sub	sp, #52	; 0x34
 80054c6:	460c      	mov	r4, r1
 80054c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054cc:	4616      	mov	r6, r2
 80054ce:	461f      	mov	r7, r3
 80054d0:	4605      	mov	r5, r0
 80054d2:	f001 fa57 	bl	8006984 <_localeconv_r>
 80054d6:	f8d0 a000 	ldr.w	sl, [r0]
 80054da:	4650      	mov	r0, sl
 80054dc:	f7fa fe80 	bl	80001e0 <strlen>
 80054e0:	2300      	movs	r3, #0
 80054e2:	930a      	str	r3, [sp, #40]	; 0x28
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	9305      	str	r3, [sp, #20]
 80054e8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054f0:	3307      	adds	r3, #7
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	f103 0208 	add.w	r2, r3, #8
 80054fa:	f8c8 2000 	str.w	r2, [r8]
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005506:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800550a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800550e:	9307      	str	r3, [sp, #28]
 8005510:	f8cd 8018 	str.w	r8, [sp, #24]
 8005514:	ee08 0a10 	vmov	s16, r0
 8005518:	4b9f      	ldr	r3, [pc, #636]	; (8005798 <_printf_float+0x2dc>)
 800551a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	f7fb fb0b 	bl	8000b3c <__aeabi_dcmpun>
 8005526:	bb88      	cbnz	r0, 800558c <_printf_float+0xd0>
 8005528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552c:	4b9a      	ldr	r3, [pc, #616]	; (8005798 <_printf_float+0x2dc>)
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	f7fb fae5 	bl	8000b00 <__aeabi_dcmple>
 8005536:	bb48      	cbnz	r0, 800558c <_printf_float+0xd0>
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fb fad4 	bl	8000aec <__aeabi_dcmplt>
 8005544:	b110      	cbz	r0, 800554c <_printf_float+0x90>
 8005546:	232d      	movs	r3, #45	; 0x2d
 8005548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554c:	4b93      	ldr	r3, [pc, #588]	; (800579c <_printf_float+0x2e0>)
 800554e:	4894      	ldr	r0, [pc, #592]	; (80057a0 <_printf_float+0x2e4>)
 8005550:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005554:	bf94      	ite	ls
 8005556:	4698      	movls	r8, r3
 8005558:	4680      	movhi	r8, r0
 800555a:	2303      	movs	r3, #3
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	f023 0204 	bic.w	r2, r3, #4
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	9700      	str	r7, [sp, #0]
 800556c:	4633      	mov	r3, r6
 800556e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005570:	4621      	mov	r1, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 f9d8 	bl	8005928 <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	f040 8090 	bne.w	800569e <_printf_float+0x1e2>
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	b00d      	add	sp, #52	; 0x34
 8005584:	ecbd 8b02 	vpop	{d8}
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb fad2 	bl	8000b3c <__aeabi_dcmpun>
 8005598:	b140      	cbz	r0, 80055ac <_printf_float+0xf0>
 800559a:	464b      	mov	r3, r9
 800559c:	2b00      	cmp	r3, #0
 800559e:	bfbc      	itt	lt
 80055a0:	232d      	movlt	r3, #45	; 0x2d
 80055a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055a6:	487f      	ldr	r0, [pc, #508]	; (80057a4 <_printf_float+0x2e8>)
 80055a8:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <_printf_float+0x2ec>)
 80055aa:	e7d1      	b.n	8005550 <_printf_float+0x94>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055b2:	9206      	str	r2, [sp, #24]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	d13f      	bne.n	8005638 <_printf_float+0x17c>
 80055b8:	2306      	movs	r3, #6
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	9b05      	ldr	r3, [sp, #20]
 80055be:	6861      	ldr	r1, [r4, #4]
 80055c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055c4:	2300      	movs	r3, #0
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	ab0a      	add	r3, sp, #40	; 0x28
 80055ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055ce:	ab09      	add	r3, sp, #36	; 0x24
 80055d0:	ec49 8b10 	vmov	d0, r8, r9
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055dc:	4628      	mov	r0, r5
 80055de:	f7ff fecd 	bl	800537c <__cvt>
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055e6:	2b47      	cmp	r3, #71	; 0x47
 80055e8:	4680      	mov	r8, r0
 80055ea:	d108      	bne.n	80055fe <_printf_float+0x142>
 80055ec:	1cc8      	adds	r0, r1, #3
 80055ee:	db02      	blt.n	80055f6 <_printf_float+0x13a>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	4299      	cmp	r1, r3
 80055f4:	dd41      	ble.n	800567a <_printf_float+0x1be>
 80055f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80055fa:	fa5f fb8b 	uxtb.w	fp, fp
 80055fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005602:	d820      	bhi.n	8005646 <_printf_float+0x18a>
 8005604:	3901      	subs	r1, #1
 8005606:	465a      	mov	r2, fp
 8005608:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800560c:	9109      	str	r1, [sp, #36]	; 0x24
 800560e:	f7ff ff17 	bl	8005440 <__exponent>
 8005612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005614:	1813      	adds	r3, r2, r0
 8005616:	2a01      	cmp	r2, #1
 8005618:	4681      	mov	r9, r0
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	dc02      	bgt.n	8005624 <_printf_float+0x168>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	07d2      	lsls	r2, r2, #31
 8005622:	d501      	bpl.n	8005628 <_printf_float+0x16c>
 8005624:	3301      	adds	r3, #1
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800562c:	2b00      	cmp	r3, #0
 800562e:	d09c      	beq.n	800556a <_printf_float+0xae>
 8005630:	232d      	movs	r3, #45	; 0x2d
 8005632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005636:	e798      	b.n	800556a <_printf_float+0xae>
 8005638:	9a06      	ldr	r2, [sp, #24]
 800563a:	2a47      	cmp	r2, #71	; 0x47
 800563c:	d1be      	bne.n	80055bc <_printf_float+0x100>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1bc      	bne.n	80055bc <_printf_float+0x100>
 8005642:	2301      	movs	r3, #1
 8005644:	e7b9      	b.n	80055ba <_printf_float+0xfe>
 8005646:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800564a:	d118      	bne.n	800567e <_printf_float+0x1c2>
 800564c:	2900      	cmp	r1, #0
 800564e:	6863      	ldr	r3, [r4, #4]
 8005650:	dd0b      	ble.n	800566a <_printf_float+0x1ae>
 8005652:	6121      	str	r1, [r4, #16]
 8005654:	b913      	cbnz	r3, 800565c <_printf_float+0x1a0>
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d502      	bpl.n	8005662 <_printf_float+0x1a6>
 800565c:	3301      	adds	r3, #1
 800565e:	440b      	add	r3, r1
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	65a1      	str	r1, [r4, #88]	; 0x58
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	e7de      	b.n	8005628 <_printf_float+0x16c>
 800566a:	b913      	cbnz	r3, 8005672 <_printf_float+0x1b6>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	07d2      	lsls	r2, r2, #31
 8005670:	d501      	bpl.n	8005676 <_printf_float+0x1ba>
 8005672:	3302      	adds	r3, #2
 8005674:	e7f4      	b.n	8005660 <_printf_float+0x1a4>
 8005676:	2301      	movs	r3, #1
 8005678:	e7f2      	b.n	8005660 <_printf_float+0x1a4>
 800567a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005680:	4299      	cmp	r1, r3
 8005682:	db05      	blt.n	8005690 <_printf_float+0x1d4>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	6121      	str	r1, [r4, #16]
 8005688:	07d8      	lsls	r0, r3, #31
 800568a:	d5ea      	bpl.n	8005662 <_printf_float+0x1a6>
 800568c:	1c4b      	adds	r3, r1, #1
 800568e:	e7e7      	b.n	8005660 <_printf_float+0x1a4>
 8005690:	2900      	cmp	r1, #0
 8005692:	bfd4      	ite	le
 8005694:	f1c1 0202 	rsble	r2, r1, #2
 8005698:	2201      	movgt	r2, #1
 800569a:	4413      	add	r3, r2
 800569c:	e7e0      	b.n	8005660 <_printf_float+0x1a4>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	055a      	lsls	r2, r3, #21
 80056a2:	d407      	bmi.n	80056b4 <_printf_float+0x1f8>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	4642      	mov	r2, r8
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	d12c      	bne.n	800570c <_printf_float+0x250>
 80056b2:	e764      	b.n	800557e <_printf_float+0xc2>
 80056b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056b8:	f240 80e0 	bls.w	800587c <_printf_float+0x3c0>
 80056bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	f7fb fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d034      	beq.n	8005736 <_printf_float+0x27a>
 80056cc:	4a37      	ldr	r2, [pc, #220]	; (80057ac <_printf_float+0x2f0>)
 80056ce:	2301      	movs	r3, #1
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f af51 	beq.w	800557e <_printf_float+0xc2>
 80056dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056e0:	429a      	cmp	r2, r3
 80056e2:	db02      	blt.n	80056ea <_printf_float+0x22e>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	07d8      	lsls	r0, r3, #31
 80056e8:	d510      	bpl.n	800570c <_printf_float+0x250>
 80056ea:	ee18 3a10 	vmov	r3, s16
 80056ee:	4652      	mov	r2, sl
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	f43f af41 	beq.w	800557e <_printf_float+0xc2>
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	f104 091a 	add.w	r9, r4, #26
 8005704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005706:	3b01      	subs	r3, #1
 8005708:	4543      	cmp	r3, r8
 800570a:	dc09      	bgt.n	8005720 <_printf_float+0x264>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	079b      	lsls	r3, r3, #30
 8005710:	f100 8105 	bmi.w	800591e <_printf_float+0x462>
 8005714:	68e0      	ldr	r0, [r4, #12]
 8005716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005718:	4298      	cmp	r0, r3
 800571a:	bfb8      	it	lt
 800571c:	4618      	movlt	r0, r3
 800571e:	e730      	b.n	8005582 <_printf_float+0xc6>
 8005720:	2301      	movs	r3, #1
 8005722:	464a      	mov	r2, r9
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f af27 	beq.w	800557e <_printf_float+0xc2>
 8005730:	f108 0801 	add.w	r8, r8, #1
 8005734:	e7e6      	b.n	8005704 <_printf_float+0x248>
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	dc39      	bgt.n	80057b0 <_printf_float+0x2f4>
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <_printf_float+0x2f0>)
 800573e:	2301      	movs	r3, #1
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f af19 	beq.w	800557e <_printf_float+0xc2>
 800574c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005750:	4313      	orrs	r3, r2
 8005752:	d102      	bne.n	800575a <_printf_float+0x29e>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	d5d8      	bpl.n	800570c <_printf_float+0x250>
 800575a:	ee18 3a10 	vmov	r3, s16
 800575e:	4652      	mov	r2, sl
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f af09 	beq.w	800557e <_printf_float+0xc2>
 800576c:	f04f 0900 	mov.w	r9, #0
 8005770:	f104 0a1a 	add.w	sl, r4, #26
 8005774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005776:	425b      	negs	r3, r3
 8005778:	454b      	cmp	r3, r9
 800577a:	dc01      	bgt.n	8005780 <_printf_float+0x2c4>
 800577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577e:	e792      	b.n	80056a6 <_printf_float+0x1ea>
 8005780:	2301      	movs	r3, #1
 8005782:	4652      	mov	r2, sl
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f aef7 	beq.w	800557e <_printf_float+0xc2>
 8005790:	f109 0901 	add.w	r9, r9, #1
 8005794:	e7ee      	b.n	8005774 <_printf_float+0x2b8>
 8005796:	bf00      	nop
 8005798:	7fefffff 	.word	0x7fefffff
 800579c:	0800952c 	.word	0x0800952c
 80057a0:	08009530 	.word	0x08009530
 80057a4:	08009538 	.word	0x08009538
 80057a8:	08009534 	.word	0x08009534
 80057ac:	0800953c 	.word	0x0800953c
 80057b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057b4:	429a      	cmp	r2, r3
 80057b6:	bfa8      	it	ge
 80057b8:	461a      	movge	r2, r3
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	4691      	mov	r9, r2
 80057be:	dc37      	bgt.n	8005830 <_printf_float+0x374>
 80057c0:	f04f 0b00 	mov.w	fp, #0
 80057c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057c8:	f104 021a 	add.w	r2, r4, #26
 80057cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	eba3 0309 	sub.w	r3, r3, r9
 80057d4:	455b      	cmp	r3, fp
 80057d6:	dc33      	bgt.n	8005840 <_printf_float+0x384>
 80057d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057dc:	429a      	cmp	r2, r3
 80057de:	db3b      	blt.n	8005858 <_printf_float+0x39c>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07da      	lsls	r2, r3, #31
 80057e4:	d438      	bmi.n	8005858 <_printf_float+0x39c>
 80057e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e8:	9a05      	ldr	r2, [sp, #20]
 80057ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ec:	1a9a      	subs	r2, r3, r2
 80057ee:	eba3 0901 	sub.w	r9, r3, r1
 80057f2:	4591      	cmp	r9, r2
 80057f4:	bfa8      	it	ge
 80057f6:	4691      	movge	r9, r2
 80057f8:	f1b9 0f00 	cmp.w	r9, #0
 80057fc:	dc35      	bgt.n	800586a <_printf_float+0x3ae>
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005806:	f104 0a1a 	add.w	sl, r4, #26
 800580a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	eba3 0309 	sub.w	r3, r3, r9
 8005814:	4543      	cmp	r3, r8
 8005816:	f77f af79 	ble.w	800570c <_printf_float+0x250>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f aeaa 	beq.w	800557e <_printf_float+0xc2>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	e7ec      	b.n	800580a <_printf_float+0x34e>
 8005830:	4613      	mov	r3, r2
 8005832:	4631      	mov	r1, r6
 8005834:	4642      	mov	r2, r8
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	d1c0      	bne.n	80057c0 <_printf_float+0x304>
 800583e:	e69e      	b.n	800557e <_printf_float+0xc2>
 8005840:	2301      	movs	r3, #1
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	9205      	str	r2, [sp, #20]
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f ae97 	beq.w	800557e <_printf_float+0xc2>
 8005850:	9a05      	ldr	r2, [sp, #20]
 8005852:	f10b 0b01 	add.w	fp, fp, #1
 8005856:	e7b9      	b.n	80057cc <_printf_float+0x310>
 8005858:	ee18 3a10 	vmov	r3, s16
 800585c:	4652      	mov	r2, sl
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d1be      	bne.n	80057e6 <_printf_float+0x32a>
 8005868:	e689      	b.n	800557e <_printf_float+0xc2>
 800586a:	9a05      	ldr	r2, [sp, #20]
 800586c:	464b      	mov	r3, r9
 800586e:	4442      	add	r2, r8
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	d1c1      	bne.n	80057fe <_printf_float+0x342>
 800587a:	e680      	b.n	800557e <_printf_float+0xc2>
 800587c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587e:	2a01      	cmp	r2, #1
 8005880:	dc01      	bgt.n	8005886 <_printf_float+0x3ca>
 8005882:	07db      	lsls	r3, r3, #31
 8005884:	d538      	bpl.n	80058f8 <_printf_float+0x43c>
 8005886:	2301      	movs	r3, #1
 8005888:	4642      	mov	r2, r8
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	f43f ae74 	beq.w	800557e <_printf_float+0xc2>
 8005896:	ee18 3a10 	vmov	r3, s16
 800589a:	4652      	mov	r2, sl
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f ae6b 	beq.w	800557e <_printf_float+0xc2>
 80058a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058ac:	2200      	movs	r2, #0
 80058ae:	2300      	movs	r3, #0
 80058b0:	f7fb f912 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b4:	b9d8      	cbnz	r0, 80058ee <_printf_float+0x432>
 80058b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b8:	f108 0201 	add.w	r2, r8, #1
 80058bc:	3b01      	subs	r3, #1
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d10e      	bne.n	80058e6 <_printf_float+0x42a>
 80058c8:	e659      	b.n	800557e <_printf_float+0xc2>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4652      	mov	r2, sl
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f ae52 	beq.w	800557e <_printf_float+0xc2>
 80058da:	f108 0801 	add.w	r8, r8, #1
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	3b01      	subs	r3, #1
 80058e2:	4543      	cmp	r3, r8
 80058e4:	dcf1      	bgt.n	80058ca <_printf_float+0x40e>
 80058e6:	464b      	mov	r3, r9
 80058e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058ec:	e6dc      	b.n	80056a8 <_printf_float+0x1ec>
 80058ee:	f04f 0800 	mov.w	r8, #0
 80058f2:	f104 0a1a 	add.w	sl, r4, #26
 80058f6:	e7f2      	b.n	80058de <_printf_float+0x422>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4642      	mov	r2, r8
 80058fc:	e7df      	b.n	80058be <_printf_float+0x402>
 80058fe:	2301      	movs	r3, #1
 8005900:	464a      	mov	r2, r9
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	f43f ae38 	beq.w	800557e <_printf_float+0xc2>
 800590e:	f108 0801 	add.w	r8, r8, #1
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005916:	1a5b      	subs	r3, r3, r1
 8005918:	4543      	cmp	r3, r8
 800591a:	dcf0      	bgt.n	80058fe <_printf_float+0x442>
 800591c:	e6fa      	b.n	8005714 <_printf_float+0x258>
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	f104 0919 	add.w	r9, r4, #25
 8005926:	e7f4      	b.n	8005912 <_printf_float+0x456>

08005928 <_printf_common>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	4616      	mov	r6, r2
 800592e:	4699      	mov	r9, r3
 8005930:	688a      	ldr	r2, [r1, #8]
 8005932:	690b      	ldr	r3, [r1, #16]
 8005934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005938:	4293      	cmp	r3, r2
 800593a:	bfb8      	it	lt
 800593c:	4613      	movlt	r3, r2
 800593e:	6033      	str	r3, [r6, #0]
 8005940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005944:	4607      	mov	r7, r0
 8005946:	460c      	mov	r4, r1
 8005948:	b10a      	cbz	r2, 800594e <_printf_common+0x26>
 800594a:	3301      	adds	r3, #1
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	0699      	lsls	r1, r3, #26
 8005952:	bf42      	ittt	mi
 8005954:	6833      	ldrmi	r3, [r6, #0]
 8005956:	3302      	addmi	r3, #2
 8005958:	6033      	strmi	r3, [r6, #0]
 800595a:	6825      	ldr	r5, [r4, #0]
 800595c:	f015 0506 	ands.w	r5, r5, #6
 8005960:	d106      	bne.n	8005970 <_printf_common+0x48>
 8005962:	f104 0a19 	add.w	sl, r4, #25
 8005966:	68e3      	ldr	r3, [r4, #12]
 8005968:	6832      	ldr	r2, [r6, #0]
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	42ab      	cmp	r3, r5
 800596e:	dc26      	bgt.n	80059be <_printf_common+0x96>
 8005970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005974:	1e13      	subs	r3, r2, #0
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	bf18      	it	ne
 800597a:	2301      	movne	r3, #1
 800597c:	0692      	lsls	r2, r2, #26
 800597e:	d42b      	bmi.n	80059d8 <_printf_common+0xb0>
 8005980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005984:	4649      	mov	r1, r9
 8005986:	4638      	mov	r0, r7
 8005988:	47c0      	blx	r8
 800598a:	3001      	adds	r0, #1
 800598c:	d01e      	beq.n	80059cc <_printf_common+0xa4>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	68e5      	ldr	r5, [r4, #12]
 8005992:	6832      	ldr	r2, [r6, #0]
 8005994:	f003 0306 	and.w	r3, r3, #6
 8005998:	2b04      	cmp	r3, #4
 800599a:	bf08      	it	eq
 800599c:	1aad      	subeq	r5, r5, r2
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	6922      	ldr	r2, [r4, #16]
 80059a2:	bf0c      	ite	eq
 80059a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a8:	2500      	movne	r5, #0
 80059aa:	4293      	cmp	r3, r2
 80059ac:	bfc4      	itt	gt
 80059ae:	1a9b      	subgt	r3, r3, r2
 80059b0:	18ed      	addgt	r5, r5, r3
 80059b2:	2600      	movs	r6, #0
 80059b4:	341a      	adds	r4, #26
 80059b6:	42b5      	cmp	r5, r6
 80059b8:	d11a      	bne.n	80059f0 <_printf_common+0xc8>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e008      	b.n	80059d0 <_printf_common+0xa8>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4649      	mov	r1, r9
 80059c4:	4638      	mov	r0, r7
 80059c6:	47c0      	blx	r8
 80059c8:	3001      	adds	r0, #1
 80059ca:	d103      	bne.n	80059d4 <_printf_common+0xac>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d4:	3501      	adds	r5, #1
 80059d6:	e7c6      	b.n	8005966 <_printf_common+0x3e>
 80059d8:	18e1      	adds	r1, r4, r3
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	2030      	movs	r0, #48	; 0x30
 80059de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059e2:	4422      	add	r2, r4
 80059e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059ec:	3302      	adds	r3, #2
 80059ee:	e7c7      	b.n	8005980 <_printf_common+0x58>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4622      	mov	r2, r4
 80059f4:	4649      	mov	r1, r9
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d0e6      	beq.n	80059cc <_printf_common+0xa4>
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7d9      	b.n	80059b6 <_printf_common+0x8e>
	...

08005a04 <_printf_i>:
 8005a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	7e0f      	ldrb	r7, [r1, #24]
 8005a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a0c:	2f78      	cmp	r7, #120	; 0x78
 8005a0e:	4691      	mov	r9, r2
 8005a10:	4680      	mov	r8, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	469a      	mov	sl, r3
 8005a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a1a:	d807      	bhi.n	8005a2c <_printf_i+0x28>
 8005a1c:	2f62      	cmp	r7, #98	; 0x62
 8005a1e:	d80a      	bhi.n	8005a36 <_printf_i+0x32>
 8005a20:	2f00      	cmp	r7, #0
 8005a22:	f000 80d8 	beq.w	8005bd6 <_printf_i+0x1d2>
 8005a26:	2f58      	cmp	r7, #88	; 0x58
 8005a28:	f000 80a3 	beq.w	8005b72 <_printf_i+0x16e>
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a34:	e03a      	b.n	8005aac <_printf_i+0xa8>
 8005a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a3a:	2b15      	cmp	r3, #21
 8005a3c:	d8f6      	bhi.n	8005a2c <_printf_i+0x28>
 8005a3e:	a101      	add	r1, pc, #4	; (adr r1, 8005a44 <_printf_i+0x40>)
 8005a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005ab1 	.word	0x08005ab1
 8005a4c:	08005a2d 	.word	0x08005a2d
 8005a50:	08005a2d 	.word	0x08005a2d
 8005a54:	08005a2d 	.word	0x08005a2d
 8005a58:	08005a2d 	.word	0x08005a2d
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005a2d 	.word	0x08005a2d
 8005a64:	08005a2d 	.word	0x08005a2d
 8005a68:	08005a2d 	.word	0x08005a2d
 8005a6c:	08005a2d 	.word	0x08005a2d
 8005a70:	08005bbd 	.word	0x08005bbd
 8005a74:	08005ae1 	.word	0x08005ae1
 8005a78:	08005b9f 	.word	0x08005b9f
 8005a7c:	08005a2d 	.word	0x08005a2d
 8005a80:	08005a2d 	.word	0x08005a2d
 8005a84:	08005bdf 	.word	0x08005bdf
 8005a88:	08005a2d 	.word	0x08005a2d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a2d 	.word	0x08005a2d
 8005a94:	08005a2d 	.word	0x08005a2d
 8005a98:	08005ba7 	.word	0x08005ba7
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0a3      	b.n	8005bf8 <_printf_i+0x1f4>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	6829      	ldr	r1, [r5, #0]
 8005ab4:	0606      	lsls	r6, r0, #24
 8005ab6:	f101 0304 	add.w	r3, r1, #4
 8005aba:	d50a      	bpl.n	8005ad2 <_printf_i+0xce>
 8005abc:	680e      	ldr	r6, [r1, #0]
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	da03      	bge.n	8005acc <_printf_i+0xc8>
 8005ac4:	232d      	movs	r3, #45	; 0x2d
 8005ac6:	4276      	negs	r6, r6
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	485e      	ldr	r0, [pc, #376]	; (8005c48 <_printf_i+0x244>)
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e019      	b.n	8005b06 <_printf_i+0x102>
 8005ad2:	680e      	ldr	r6, [r1, #0]
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ada:	bf18      	it	ne
 8005adc:	b236      	sxthne	r6, r6
 8005ade:	e7ef      	b.n	8005ac0 <_printf_i+0xbc>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6029      	str	r1, [r5, #0]
 8005ae8:	0601      	lsls	r1, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xec>
 8005aec:	681e      	ldr	r6, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0xf2>
 8005af0:	0646      	lsls	r6, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xe8>
 8005af4:	881e      	ldrh	r6, [r3, #0]
 8005af6:	4854      	ldr	r0, [pc, #336]	; (8005c48 <_printf_i+0x244>)
 8005af8:	2f6f      	cmp	r7, #111	; 0x6f
 8005afa:	bf0c      	ite	eq
 8005afc:	2308      	moveq	r3, #8
 8005afe:	230a      	movne	r3, #10
 8005b00:	2100      	movs	r1, #0
 8005b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b06:	6865      	ldr	r5, [r4, #4]
 8005b08:	60a5      	str	r5, [r4, #8]
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	bfa2      	ittt	ge
 8005b0e:	6821      	ldrge	r1, [r4, #0]
 8005b10:	f021 0104 	bicge.w	r1, r1, #4
 8005b14:	6021      	strge	r1, [r4, #0]
 8005b16:	b90e      	cbnz	r6, 8005b1c <_printf_i+0x118>
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	d04d      	beq.n	8005bb8 <_printf_i+0x1b4>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b22:	fb03 6711 	mls	r7, r3, r1, r6
 8005b26:	5dc7      	ldrb	r7, [r0, r7]
 8005b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b2c:	4637      	mov	r7, r6
 8005b2e:	42bb      	cmp	r3, r7
 8005b30:	460e      	mov	r6, r1
 8005b32:	d9f4      	bls.n	8005b1e <_printf_i+0x11a>
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d10b      	bne.n	8005b50 <_printf_i+0x14c>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	07de      	lsls	r6, r3, #31
 8005b3c:	d508      	bpl.n	8005b50 <_printf_i+0x14c>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	6861      	ldr	r1, [r4, #4]
 8005b42:	4299      	cmp	r1, r3
 8005b44:	bfde      	ittt	le
 8005b46:	2330      	movle	r3, #48	; 0x30
 8005b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b50:	1b52      	subs	r2, r2, r5
 8005b52:	6122      	str	r2, [r4, #16]
 8005b54:	f8cd a000 	str.w	sl, [sp]
 8005b58:	464b      	mov	r3, r9
 8005b5a:	aa03      	add	r2, sp, #12
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f7ff fee2 	bl	8005928 <_printf_common>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d14c      	bne.n	8005c02 <_printf_i+0x1fe>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b004      	add	sp, #16
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	4835      	ldr	r0, [pc, #212]	; (8005c48 <_printf_i+0x244>)
 8005b74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b78:	6829      	ldr	r1, [r5, #0]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b80:	6029      	str	r1, [r5, #0]
 8005b82:	061d      	lsls	r5, r3, #24
 8005b84:	d514      	bpl.n	8005bb0 <_printf_i+0x1ac>
 8005b86:	07df      	lsls	r7, r3, #31
 8005b88:	bf44      	itt	mi
 8005b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8e:	6023      	strmi	r3, [r4, #0]
 8005b90:	b91e      	cbnz	r6, 8005b9a <_printf_i+0x196>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f023 0320 	bic.w	r3, r3, #32
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	e7b0      	b.n	8005b00 <_printf_i+0xfc>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f043 0320 	orr.w	r3, r3, #32
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	2378      	movs	r3, #120	; 0x78
 8005ba8:	4828      	ldr	r0, [pc, #160]	; (8005c4c <_printf_i+0x248>)
 8005baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bae:	e7e3      	b.n	8005b78 <_printf_i+0x174>
 8005bb0:	0659      	lsls	r1, r3, #25
 8005bb2:	bf48      	it	mi
 8005bb4:	b2b6      	uxthmi	r6, r6
 8005bb6:	e7e6      	b.n	8005b86 <_printf_i+0x182>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	e7bb      	b.n	8005b34 <_printf_i+0x130>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	6826      	ldr	r6, [r4, #0]
 8005bc0:	6961      	ldr	r1, [r4, #20]
 8005bc2:	1d18      	adds	r0, r3, #4
 8005bc4:	6028      	str	r0, [r5, #0]
 8005bc6:	0635      	lsls	r5, r6, #24
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0x1cc>
 8005bcc:	6019      	str	r1, [r3, #0]
 8005bce:	e002      	b.n	8005bd6 <_printf_i+0x1d2>
 8005bd0:	0670      	lsls	r0, r6, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0x1c8>
 8005bd4:	8019      	strh	r1, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	4615      	mov	r5, r2
 8005bdc:	e7ba      	b.n	8005b54 <_printf_i+0x150>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	602a      	str	r2, [r5, #0]
 8005be4:	681d      	ldr	r5, [r3, #0]
 8005be6:	6862      	ldr	r2, [r4, #4]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4628      	mov	r0, r5
 8005bec:	f7fa fb00 	bl	80001f0 <memchr>
 8005bf0:	b108      	cbz	r0, 8005bf6 <_printf_i+0x1f2>
 8005bf2:	1b40      	subs	r0, r0, r5
 8005bf4:	6060      	str	r0, [r4, #4]
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c00:	e7a8      	b.n	8005b54 <_printf_i+0x150>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d0ab      	beq.n	8005b68 <_printf_i+0x164>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	079b      	lsls	r3, r3, #30
 8005c14:	d413      	bmi.n	8005c3e <_printf_i+0x23a>
 8005c16:	68e0      	ldr	r0, [r4, #12]
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	4298      	cmp	r0, r3
 8005c1c:	bfb8      	it	lt
 8005c1e:	4618      	movlt	r0, r3
 8005c20:	e7a4      	b.n	8005b6c <_printf_i+0x168>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4632      	mov	r2, r6
 8005c26:	4649      	mov	r1, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	47d0      	blx	sl
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d09b      	beq.n	8005b68 <_printf_i+0x164>
 8005c30:	3501      	adds	r5, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	9903      	ldr	r1, [sp, #12]
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dcf2      	bgt.n	8005c22 <_printf_i+0x21e>
 8005c3c:	e7eb      	b.n	8005c16 <_printf_i+0x212>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	f104 0619 	add.w	r6, r4, #25
 8005c44:	e7f5      	b.n	8005c32 <_printf_i+0x22e>
 8005c46:	bf00      	nop
 8005c48:	0800953e 	.word	0x0800953e
 8005c4c:	0800954f 	.word	0x0800954f

08005c50 <siprintf>:
 8005c50:	b40e      	push	{r1, r2, r3}
 8005c52:	b500      	push	{lr}
 8005c54:	b09c      	sub	sp, #112	; 0x70
 8005c56:	ab1d      	add	r3, sp, #116	; 0x74
 8005c58:	9002      	str	r0, [sp, #8]
 8005c5a:	9006      	str	r0, [sp, #24]
 8005c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c60:	4809      	ldr	r0, [pc, #36]	; (8005c88 <siprintf+0x38>)
 8005c62:	9107      	str	r1, [sp, #28]
 8005c64:	9104      	str	r1, [sp, #16]
 8005c66:	4909      	ldr	r1, [pc, #36]	; (8005c8c <siprintf+0x3c>)
 8005c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	6800      	ldr	r0, [r0, #0]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	a902      	add	r1, sp, #8
 8005c74:	f001 fb76 	bl	8007364 <_svfiprintf_r>
 8005c78:	9b02      	ldr	r3, [sp, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	b01c      	add	sp, #112	; 0x70
 8005c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c84:	b003      	add	sp, #12
 8005c86:	4770      	bx	lr
 8005c88:	2000009c 	.word	0x2000009c
 8005c8c:	ffff0208 	.word	0xffff0208

08005c90 <quorem>:
 8005c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	6903      	ldr	r3, [r0, #16]
 8005c96:	690c      	ldr	r4, [r1, #16]
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	f2c0 8081 	blt.w	8005da2 <quorem+0x112>
 8005ca0:	3c01      	subs	r4, #1
 8005ca2:	f101 0814 	add.w	r8, r1, #20
 8005ca6:	f100 0514 	add.w	r5, r0, #20
 8005caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc8:	d331      	bcc.n	8005d2e <quorem+0x9e>
 8005cca:	f04f 0e00 	mov.w	lr, #0
 8005cce:	4640      	mov	r0, r8
 8005cd0:	46ac      	mov	ip, r5
 8005cd2:	46f2      	mov	sl, lr
 8005cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cd8:	b293      	uxth	r3, r2
 8005cda:	fb06 e303 	mla	r3, r6, r3, lr
 8005cde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ce8:	f8dc a000 	ldr.w	sl, [ip]
 8005cec:	0c12      	lsrs	r2, r2, #16
 8005cee:	fa13 f38a 	uxtah	r3, r3, sl
 8005cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	9b00      	ldr	r3, [sp, #0]
 8005cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d08:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d0c:	4581      	cmp	r9, r0
 8005d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d12:	f84c 3b04 	str.w	r3, [ip], #4
 8005d16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d1a:	d2db      	bcs.n	8005cd4 <quorem+0x44>
 8005d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d20:	b92b      	cbnz	r3, 8005d2e <quorem+0x9e>
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	429d      	cmp	r5, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	d32e      	bcc.n	8005d8a <quorem+0xfa>
 8005d2c:	613c      	str	r4, [r7, #16]
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f001 f8c4 	bl	8006ebc <__mcmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	db24      	blt.n	8005d82 <quorem+0xf2>
 8005d38:	3601      	adds	r6, #1
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f04f 0c00 	mov.w	ip, #0
 8005d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d44:	f8d0 e000 	ldr.w	lr, [r0]
 8005d48:	b293      	uxth	r3, r2
 8005d4a:	ebac 0303 	sub.w	r3, ip, r3
 8005d4e:	0c12      	lsrs	r2, r2, #16
 8005d50:	fa13 f38e 	uxtah	r3, r3, lr
 8005d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d62:	45c1      	cmp	r9, r8
 8005d64:	f840 3b04 	str.w	r3, [r0], #4
 8005d68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d6c:	d2e8      	bcs.n	8005d40 <quorem+0xb0>
 8005d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d76:	b922      	cbnz	r2, 8005d82 <quorem+0xf2>
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	d30a      	bcc.n	8005d96 <quorem+0x106>
 8005d80:	613c      	str	r4, [r7, #16]
 8005d82:	4630      	mov	r0, r6
 8005d84:	b003      	add	sp, #12
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	3b04      	subs	r3, #4
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d1cc      	bne.n	8005d2c <quorem+0x9c>
 8005d92:	3c01      	subs	r4, #1
 8005d94:	e7c7      	b.n	8005d26 <quorem+0x96>
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1f0      	bne.n	8005d80 <quorem+0xf0>
 8005d9e:	3c01      	subs	r4, #1
 8005da0:	e7eb      	b.n	8005d7a <quorem+0xea>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e7ee      	b.n	8005d84 <quorem+0xf4>
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	ed2d 8b04 	vpush	{d8-d9}
 8005db0:	ec57 6b10 	vmov	r6, r7, d0
 8005db4:	b093      	sub	sp, #76	; 0x4c
 8005db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005db8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dbc:	9106      	str	r1, [sp, #24]
 8005dbe:	ee10 aa10 	vmov	sl, s0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc8:	46bb      	mov	fp, r7
 8005dca:	b975      	cbnz	r5, 8005dea <_dtoa_r+0x42>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f000 fddd 	bl	800698c <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8005dd6:	b920      	cbnz	r0, 8005de2 <_dtoa_r+0x3a>
 8005dd8:	4ba7      	ldr	r3, [pc, #668]	; (8006078 <_dtoa_r+0x2d0>)
 8005dda:	21ea      	movs	r1, #234	; 0xea
 8005ddc:	48a7      	ldr	r0, [pc, #668]	; (800607c <_dtoa_r+0x2d4>)
 8005dde:	f001 fbd1 	bl	8007584 <__assert_func>
 8005de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005de6:	6005      	str	r5, [r0, #0]
 8005de8:	60c5      	str	r5, [r0, #12]
 8005dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	b151      	cbz	r1, 8005e06 <_dtoa_r+0x5e>
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	604a      	str	r2, [r1, #4]
 8005df4:	2301      	movs	r3, #1
 8005df6:	4093      	lsls	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 fe1c 	bl	8006a38 <_Bfree>
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	1e3b      	subs	r3, r7, #0
 8005e08:	bfaa      	itet	ge
 8005e0a:	2300      	movge	r3, #0
 8005e0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e10:	f8c8 3000 	strge.w	r3, [r8]
 8005e14:	4b9a      	ldr	r3, [pc, #616]	; (8006080 <_dtoa_r+0x2d8>)
 8005e16:	bfbc      	itt	lt
 8005e18:	2201      	movlt	r2, #1
 8005e1a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e1e:	ea33 030b 	bics.w	r3, r3, fp
 8005e22:	d11b      	bne.n	8005e5c <_dtoa_r+0xb4>
 8005e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e30:	4333      	orrs	r3, r6
 8005e32:	f000 8592 	beq.w	800695a <_dtoa_r+0xbb2>
 8005e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e38:	b963      	cbnz	r3, 8005e54 <_dtoa_r+0xac>
 8005e3a:	4b92      	ldr	r3, [pc, #584]	; (8006084 <_dtoa_r+0x2dc>)
 8005e3c:	e022      	b.n	8005e84 <_dtoa_r+0xdc>
 8005e3e:	4b92      	ldr	r3, [pc, #584]	; (8006088 <_dtoa_r+0x2e0>)
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	3308      	adds	r3, #8
 8005e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	b013      	add	sp, #76	; 0x4c
 8005e4c:	ecbd 8b04 	vpop	{d8-d9}
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <_dtoa_r+0x2dc>)
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	e7f3      	b.n	8005e44 <_dtoa_r+0x9c>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4650      	mov	r0, sl
 8005e62:	4659      	mov	r1, fp
 8005e64:	f7fa fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e68:	ec4b ab19 	vmov	d9, sl, fp
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	b158      	cbz	r0, 8005e88 <_dtoa_r+0xe0>
 8005e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e72:	2301      	movs	r3, #1
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 856b 	beq.w	8006954 <_dtoa_r+0xbac>
 8005e7e:	4883      	ldr	r0, [pc, #524]	; (800608c <_dtoa_r+0x2e4>)
 8005e80:	6018      	str	r0, [r3, #0]
 8005e82:	1e43      	subs	r3, r0, #1
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	e7df      	b.n	8005e48 <_dtoa_r+0xa0>
 8005e88:	ec4b ab10 	vmov	d0, sl, fp
 8005e8c:	aa10      	add	r2, sp, #64	; 0x40
 8005e8e:	a911      	add	r1, sp, #68	; 0x44
 8005e90:	4620      	mov	r0, r4
 8005e92:	f001 f8b9 	bl	8007008 <__d2b>
 8005e96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e9a:	ee08 0a10 	vmov	s16, r0
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 8084 	beq.w	8005fac <_dtoa_r+0x204>
 8005ea4:	ee19 3a90 	vmov	r3, s19
 8005ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005eb0:	4656      	mov	r6, sl
 8005eb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ebe:	4b74      	ldr	r3, [pc, #464]	; (8006090 <_dtoa_r+0x2e8>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa f9e7 	bl	8000298 <__aeabi_dsub>
 8005eca:	a365      	add	r3, pc, #404	; (adr r3, 8006060 <_dtoa_r+0x2b8>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fb9a 	bl	8000608 <__aeabi_dmul>
 8005ed4:	a364      	add	r3, pc, #400	; (adr r3, 8006068 <_dtoa_r+0x2c0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9df 	bl	800029c <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fb26 	bl	8000534 <__aeabi_i2d>
 8005ee8:	a361      	add	r3, pc, #388	; (adr r3, 8006070 <_dtoa_r+0x2c8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fb8b 	bl	8000608 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa f9cf 	bl	800029c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fe31 	bl	8000b68 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	9000      	str	r0, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fdec 	bl	8000aec <__aeabi_dcmplt>
 8005f14:	b150      	cbz	r0, 8005f2c <_dtoa_r+0x184>
 8005f16:	9800      	ldr	r0, [sp, #0]
 8005f18:	f7fa fb0c 	bl	8000534 <__aeabi_i2d>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f24:	b910      	cbnz	r0, 8005f2c <_dtoa_r+0x184>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	d85a      	bhi.n	8005fe8 <_dtoa_r+0x240>
 8005f32:	9a00      	ldr	r2, [sp, #0]
 8005f34:	4b57      	ldr	r3, [pc, #348]	; (8006094 <_dtoa_r+0x2ec>)
 8005f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	ec51 0b19 	vmov	r0, r1, d9
 8005f42:	f7fa fdd3 	bl	8000aec <__aeabi_dcmplt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d050      	beq.n	8005fec <_dtoa_r+0x244>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f56:	1b5d      	subs	r5, r3, r5
 8005f58:	1e6b      	subs	r3, r5, #1
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	bf45      	ittet	mi
 8005f5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f62:	9304      	strmi	r3, [sp, #16]
 8005f64:	2300      	movpl	r3, #0
 8005f66:	2300      	movmi	r3, #0
 8005f68:	bf4c      	ite	mi
 8005f6a:	9305      	strmi	r3, [sp, #20]
 8005f6c:	9304      	strpl	r3, [sp, #16]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db3d      	blt.n	8005ff0 <_dtoa_r+0x248>
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	9a00      	ldr	r2, [sp, #0]
 8005f78:	920a      	str	r2, [sp, #40]	; 0x28
 8005f7a:	4413      	add	r3, r2
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	f200 8089 	bhi.w	800609c <_dtoa_r+0x2f4>
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	bfc4      	itt	gt
 8005f8e:	3b04      	subgt	r3, #4
 8005f90:	9306      	strgt	r3, [sp, #24]
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	f1a3 0302 	sub.w	r3, r3, #2
 8005f98:	bfcc      	ite	gt
 8005f9a:	2500      	movgt	r5, #0
 8005f9c:	2501      	movle	r5, #1
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	f200 8087 	bhi.w	80060b2 <_dtoa_r+0x30a>
 8005fa4:	e8df f003 	tbb	[pc, r3]
 8005fa8:	59383a2d 	.word	0x59383a2d
 8005fac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fb0:	441d      	add	r5, r3
 8005fb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	bfc1      	itttt	gt
 8005fba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fca:	bfda      	itte	le
 8005fcc:	f1c3 0320 	rsble	r3, r3, #32
 8005fd0:	fa06 f003 	lslle.w	r0, r6, r3
 8005fd4:	4318      	orrgt	r0, r3
 8005fd6:	f7fa fa9d 	bl	8000514 <__aeabi_ui2d>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fe2:	3d01      	subs	r5, #1
 8005fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fe6:	e76a      	b.n	8005ebe <_dtoa_r+0x116>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7b2      	b.n	8005f52 <_dtoa_r+0x1aa>
 8005fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fee:	e7b1      	b.n	8005f54 <_dtoa_r+0x1ac>
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	9a00      	ldr	r2, [sp, #0]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	4253      	negs	r3, r2
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8006000:	e7bf      	b.n	8005f82 <_dtoa_r+0x1da>
 8006002:	2300      	movs	r3, #0
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc55      	bgt.n	80060b8 <_dtoa_r+0x310>
 800600c:	2301      	movs	r3, #1
 800600e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006012:	461a      	mov	r2, r3
 8006014:	9209      	str	r2, [sp, #36]	; 0x24
 8006016:	e00c      	b.n	8006032 <_dtoa_r+0x28a>
 8006018:	2301      	movs	r3, #1
 800601a:	e7f3      	b.n	8006004 <_dtoa_r+0x25c>
 800601c:	2300      	movs	r3, #0
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	4413      	add	r3, r2
 8006026:	9302      	str	r3, [sp, #8]
 8006028:	3301      	adds	r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	bfb8      	it	lt
 8006030:	2301      	movlt	r3, #1
 8006032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006034:	2200      	movs	r2, #0
 8006036:	6042      	str	r2, [r0, #4]
 8006038:	2204      	movs	r2, #4
 800603a:	f102 0614 	add.w	r6, r2, #20
 800603e:	429e      	cmp	r6, r3
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	d93d      	bls.n	80060c0 <_dtoa_r+0x318>
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fcb7 	bl	80069b8 <_Balloc>
 800604a:	9001      	str	r0, [sp, #4]
 800604c:	2800      	cmp	r0, #0
 800604e:	d13b      	bne.n	80060c8 <_dtoa_r+0x320>
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <_dtoa_r+0x2f0>)
 8006052:	4602      	mov	r2, r0
 8006054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006058:	e6c0      	b.n	8005ddc <_dtoa_r+0x34>
 800605a:	2301      	movs	r3, #1
 800605c:	e7df      	b.n	800601e <_dtoa_r+0x276>
 800605e:	bf00      	nop
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	0800956d 	.word	0x0800956d
 800607c:	08009584 	.word	0x08009584
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	08009569 	.word	0x08009569
 8006088:	08009560 	.word	0x08009560
 800608c:	0800953d 	.word	0x0800953d
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	08009678 	.word	0x08009678
 8006098:	080095df 	.word	0x080095df
 800609c:	2501      	movs	r5, #1
 800609e:	2300      	movs	r3, #0
 80060a0:	9306      	str	r3, [sp, #24]
 80060a2:	9508      	str	r5, [sp, #32]
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2312      	movs	r3, #18
 80060b0:	e7b0      	b.n	8006014 <_dtoa_r+0x26c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	e7f5      	b.n	80060a4 <_dtoa_r+0x2fc>
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060be:	e7b8      	b.n	8006032 <_dtoa_r+0x28a>
 80060c0:	3101      	adds	r1, #1
 80060c2:	6041      	str	r1, [r0, #4]
 80060c4:	0052      	lsls	r2, r2, #1
 80060c6:	e7b8      	b.n	800603a <_dtoa_r+0x292>
 80060c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ca:	9a01      	ldr	r2, [sp, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	2b0e      	cmp	r3, #14
 80060d2:	f200 809d 	bhi.w	8006210 <_dtoa_r+0x468>
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	f000 809a 	beq.w	8006210 <_dtoa_r+0x468>
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd32      	ble.n	8006148 <_dtoa_r+0x3a0>
 80060e2:	4ab7      	ldr	r2, [pc, #732]	; (80063c0 <_dtoa_r+0x618>)
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	05d8      	lsls	r0, r3, #23
 80060f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80060f8:	d516      	bpl.n	8006128 <_dtoa_r+0x380>
 80060fa:	4bb2      	ldr	r3, [pc, #712]	; (80063c4 <_dtoa_r+0x61c>)
 80060fc:	ec51 0b19 	vmov	r0, r1, d9
 8006100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006104:	f7fa fbaa 	bl	800085c <__aeabi_ddiv>
 8006108:	f007 070f 	and.w	r7, r7, #15
 800610c:	4682      	mov	sl, r0
 800610e:	468b      	mov	fp, r1
 8006110:	2503      	movs	r5, #3
 8006112:	4eac      	ldr	r6, [pc, #688]	; (80063c4 <_dtoa_r+0x61c>)
 8006114:	b957      	cbnz	r7, 800612c <_dtoa_r+0x384>
 8006116:	4642      	mov	r2, r8
 8006118:	464b      	mov	r3, r9
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fb9d 	bl	800085c <__aeabi_ddiv>
 8006122:	4682      	mov	sl, r0
 8006124:	468b      	mov	fp, r1
 8006126:	e028      	b.n	800617a <_dtoa_r+0x3d2>
 8006128:	2502      	movs	r5, #2
 800612a:	e7f2      	b.n	8006112 <_dtoa_r+0x36a>
 800612c:	07f9      	lsls	r1, r7, #31
 800612e:	d508      	bpl.n	8006142 <_dtoa_r+0x39a>
 8006130:	4640      	mov	r0, r8
 8006132:	4649      	mov	r1, r9
 8006134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	3501      	adds	r5, #1
 800613e:	4680      	mov	r8, r0
 8006140:	4689      	mov	r9, r1
 8006142:	107f      	asrs	r7, r7, #1
 8006144:	3608      	adds	r6, #8
 8006146:	e7e5      	b.n	8006114 <_dtoa_r+0x36c>
 8006148:	f000 809b 	beq.w	8006282 <_dtoa_r+0x4da>
 800614c:	9b00      	ldr	r3, [sp, #0]
 800614e:	4f9d      	ldr	r7, [pc, #628]	; (80063c4 <_dtoa_r+0x61c>)
 8006150:	425e      	negs	r6, r3
 8006152:	4b9b      	ldr	r3, [pc, #620]	; (80063c0 <_dtoa_r+0x618>)
 8006154:	f006 020f 	and.w	r2, r6, #15
 8006158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	ec51 0b19 	vmov	r0, r1, d9
 8006164:	f7fa fa50 	bl	8000608 <__aeabi_dmul>
 8006168:	1136      	asrs	r6, r6, #4
 800616a:	4682      	mov	sl, r0
 800616c:	468b      	mov	fp, r1
 800616e:	2300      	movs	r3, #0
 8006170:	2502      	movs	r5, #2
 8006172:	2e00      	cmp	r6, #0
 8006174:	d17a      	bne.n	800626c <_dtoa_r+0x4c4>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1d3      	bne.n	8006122 <_dtoa_r+0x37a>
 800617a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8082 	beq.w	8006286 <_dtoa_r+0x4de>
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <_dtoa_r+0x620>)
 8006184:	2200      	movs	r2, #0
 8006186:	4650      	mov	r0, sl
 8006188:	4659      	mov	r1, fp
 800618a:	f7fa fcaf 	bl	8000aec <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d079      	beq.n	8006286 <_dtoa_r+0x4de>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d076      	beq.n	8006286 <_dtoa_r+0x4de>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	dd36      	ble.n	800620c <_dtoa_r+0x464>
 800619e:	9b00      	ldr	r3, [sp, #0]
 80061a0:	4650      	mov	r0, sl
 80061a2:	4659      	mov	r1, fp
 80061a4:	1e5f      	subs	r7, r3, #1
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <_dtoa_r+0x624>)
 80061aa:	f7fa fa2d 	bl	8000608 <__aeabi_dmul>
 80061ae:	9e02      	ldr	r6, [sp, #8]
 80061b0:	4682      	mov	sl, r0
 80061b2:	468b      	mov	fp, r1
 80061b4:	3501      	adds	r5, #1
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa f9bc 	bl	8000534 <__aeabi_i2d>
 80061bc:	4652      	mov	r2, sl
 80061be:	465b      	mov	r3, fp
 80061c0:	f7fa fa22 	bl	8000608 <__aeabi_dmul>
 80061c4:	4b82      	ldr	r3, [pc, #520]	; (80063d0 <_dtoa_r+0x628>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	f7fa f868 	bl	800029c <__adddf3>
 80061cc:	46d0      	mov	r8, sl
 80061ce:	46d9      	mov	r9, fp
 80061d0:	4682      	mov	sl, r0
 80061d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d158      	bne.n	800628c <_dtoa_r+0x4e4>
 80061da:	4b7e      	ldr	r3, [pc, #504]	; (80063d4 <_dtoa_r+0x62c>)
 80061dc:	2200      	movs	r2, #0
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7fa f859 	bl	8000298 <__aeabi_dsub>
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	4680      	mov	r8, r0
 80061ec:	4689      	mov	r9, r1
 80061ee:	f7fa fc9b 	bl	8000b28 <__aeabi_dcmpgt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f040 8295 	bne.w	8006722 <_dtoa_r+0x97a>
 80061f8:	4652      	mov	r2, sl
 80061fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa fc73 	bl	8000aec <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f040 8289 	bne.w	800671e <_dtoa_r+0x976>
 800620c:	ec5b ab19 	vmov	sl, fp, d9
 8006210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006212:	2b00      	cmp	r3, #0
 8006214:	f2c0 8148 	blt.w	80064a8 <_dtoa_r+0x700>
 8006218:	9a00      	ldr	r2, [sp, #0]
 800621a:	2a0e      	cmp	r2, #14
 800621c:	f300 8144 	bgt.w	80064a8 <_dtoa_r+0x700>
 8006220:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <_dtoa_r+0x618>)
 8006222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	f280 80d5 	bge.w	80063dc <_dtoa_r+0x634>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f300 80d1 	bgt.w	80063dc <_dtoa_r+0x634>
 800623a:	f040 826f 	bne.w	800671c <_dtoa_r+0x974>
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <_dtoa_r+0x62c>)
 8006240:	2200      	movs	r2, #0
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f9df 	bl	8000608 <__aeabi_dmul>
 800624a:	4652      	mov	r2, sl
 800624c:	465b      	mov	r3, fp
 800624e:	f7fa fc61 	bl	8000b14 <__aeabi_dcmpge>
 8006252:	9e03      	ldr	r6, [sp, #12]
 8006254:	4637      	mov	r7, r6
 8006256:	2800      	cmp	r0, #0
 8006258:	f040 8245 	bne.w	80066e6 <_dtoa_r+0x93e>
 800625c:	9d01      	ldr	r5, [sp, #4]
 800625e:	2331      	movs	r3, #49	; 0x31
 8006260:	f805 3b01 	strb.w	r3, [r5], #1
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	e240      	b.n	80066ee <_dtoa_r+0x946>
 800626c:	07f2      	lsls	r2, r6, #31
 800626e:	d505      	bpl.n	800627c <_dtoa_r+0x4d4>
 8006270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006274:	f7fa f9c8 	bl	8000608 <__aeabi_dmul>
 8006278:	3501      	adds	r5, #1
 800627a:	2301      	movs	r3, #1
 800627c:	1076      	asrs	r6, r6, #1
 800627e:	3708      	adds	r7, #8
 8006280:	e777      	b.n	8006172 <_dtoa_r+0x3ca>
 8006282:	2502      	movs	r5, #2
 8006284:	e779      	b.n	800617a <_dtoa_r+0x3d2>
 8006286:	9f00      	ldr	r7, [sp, #0]
 8006288:	9e03      	ldr	r6, [sp, #12]
 800628a:	e794      	b.n	80061b6 <_dtoa_r+0x40e>
 800628c:	9901      	ldr	r1, [sp, #4]
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <_dtoa_r+0x618>)
 8006290:	4431      	add	r1, r6
 8006292:	910d      	str	r1, [sp, #52]	; 0x34
 8006294:	9908      	ldr	r1, [sp, #32]
 8006296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800629a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d043      	beq.n	800632a <_dtoa_r+0x582>
 80062a2:	494d      	ldr	r1, [pc, #308]	; (80063d8 <_dtoa_r+0x630>)
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7fa fad9 	bl	800085c <__aeabi_ddiv>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	f7f9 fff3 	bl	8000298 <__aeabi_dsub>
 80062b2:	9d01      	ldr	r5, [sp, #4]
 80062b4:	4682      	mov	sl, r0
 80062b6:	468b      	mov	fp, r1
 80062b8:	4649      	mov	r1, r9
 80062ba:	4640      	mov	r0, r8
 80062bc:	f7fa fc54 	bl	8000b68 <__aeabi_d2iz>
 80062c0:	4606      	mov	r6, r0
 80062c2:	f7fa f937 	bl	8000534 <__aeabi_i2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	3630      	adds	r6, #48	; 0x30
 80062d4:	f805 6b01 	strb.w	r6, [r5], #1
 80062d8:	4652      	mov	r2, sl
 80062da:	465b      	mov	r3, fp
 80062dc:	4680      	mov	r8, r0
 80062de:	4689      	mov	r9, r1
 80062e0:	f7fa fc04 	bl	8000aec <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d163      	bne.n	80063b0 <_dtoa_r+0x608>
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	4936      	ldr	r1, [pc, #216]	; (80063c8 <_dtoa_r+0x620>)
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7f9 ffd2 	bl	8000298 <__aeabi_dsub>
 80062f4:	4652      	mov	r2, sl
 80062f6:	465b      	mov	r3, fp
 80062f8:	f7fa fbf8 	bl	8000aec <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f040 80b5 	bne.w	800646c <_dtoa_r+0x6c4>
 8006302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006304:	429d      	cmp	r5, r3
 8006306:	d081      	beq.n	800620c <_dtoa_r+0x464>
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <_dtoa_r+0x624>)
 800630a:	2200      	movs	r2, #0
 800630c:	4650      	mov	r0, sl
 800630e:	4659      	mov	r1, fp
 8006310:	f7fa f97a 	bl	8000608 <__aeabi_dmul>
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <_dtoa_r+0x624>)
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	2200      	movs	r2, #0
 8006320:	f7fa f972 	bl	8000608 <__aeabi_dmul>
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	e7c6      	b.n	80062b8 <_dtoa_r+0x510>
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa f96b 	bl	8000608 <__aeabi_dmul>
 8006332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	930f      	str	r3, [sp, #60]	; 0x3c
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	4649      	mov	r1, r9
 800633e:	4640      	mov	r0, r8
 8006340:	f7fa fc12 	bl	8000b68 <__aeabi_d2iz>
 8006344:	4606      	mov	r6, r0
 8006346:	f7fa f8f5 	bl	8000534 <__aeabi_i2d>
 800634a:	3630      	adds	r6, #48	; 0x30
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7f9 ffa0 	bl	8000298 <__aeabi_dsub>
 8006358:	f805 6b01 	strb.w	r6, [r5], #1
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	429d      	cmp	r5, r3
 8006360:	4680      	mov	r8, r0
 8006362:	4689      	mov	r9, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	d124      	bne.n	80063b4 <_dtoa_r+0x60c>
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <_dtoa_r+0x630>)
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	f7f9 ff94 	bl	800029c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fbd4 	bl	8000b28 <__aeabi_dcmpgt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d173      	bne.n	800646c <_dtoa_r+0x6c4>
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	4913      	ldr	r1, [pc, #76]	; (80063d8 <_dtoa_r+0x630>)
 800638a:	2000      	movs	r0, #0
 800638c:	f7f9 ff84 	bl	8000298 <__aeabi_dsub>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa fba8 	bl	8000aec <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f43f af35 	beq.w	800620c <_dtoa_r+0x464>
 80063a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063a4:	1e6b      	subs	r3, r5, #1
 80063a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d0f8      	beq.n	80063a2 <_dtoa_r+0x5fa>
 80063b0:	9700      	str	r7, [sp, #0]
 80063b2:	e049      	b.n	8006448 <_dtoa_r+0x6a0>
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <_dtoa_r+0x624>)
 80063b6:	f7fa f927 	bl	8000608 <__aeabi_dmul>
 80063ba:	4680      	mov	r8, r0
 80063bc:	4689      	mov	r9, r1
 80063be:	e7bd      	b.n	800633c <_dtoa_r+0x594>
 80063c0:	08009678 	.word	0x08009678
 80063c4:	08009650 	.word	0x08009650
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	40240000 	.word	0x40240000
 80063d0:	401c0000 	.word	0x401c0000
 80063d4:	40140000 	.word	0x40140000
 80063d8:	3fe00000 	.word	0x3fe00000
 80063dc:	9d01      	ldr	r5, [sp, #4]
 80063de:	4656      	mov	r6, sl
 80063e0:	465f      	mov	r7, fp
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7fa fa37 	bl	800085c <__aeabi_ddiv>
 80063ee:	f7fa fbbb 	bl	8000b68 <__aeabi_d2iz>
 80063f2:	4682      	mov	sl, r0
 80063f4:	f7fa f89e 	bl	8000534 <__aeabi_i2d>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f904 	bl	8000608 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800640c:	f7f9 ff44 	bl	8000298 <__aeabi_dsub>
 8006410:	f805 6b01 	strb.w	r6, [r5], #1
 8006414:	9e01      	ldr	r6, [sp, #4]
 8006416:	9f03      	ldr	r7, [sp, #12]
 8006418:	1bae      	subs	r6, r5, r6
 800641a:	42b7      	cmp	r7, r6
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	d135      	bne.n	800648e <_dtoa_r+0x6e6>
 8006422:	f7f9 ff3b 	bl	800029c <__adddf3>
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f7fa fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8006432:	b9d0      	cbnz	r0, 800646a <_dtoa_r+0x6c2>
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006440:	b110      	cbz	r0, 8006448 <_dtoa_r+0x6a0>
 8006442:	f01a 0f01 	tst.w	sl, #1
 8006446:	d110      	bne.n	800646a <_dtoa_r+0x6c2>
 8006448:	4620      	mov	r0, r4
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	f000 faf3 	bl	8006a38 <_Bfree>
 8006452:	2300      	movs	r3, #0
 8006454:	9800      	ldr	r0, [sp, #0]
 8006456:	702b      	strb	r3, [r5, #0]
 8006458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800645a:	3001      	adds	r0, #1
 800645c:	6018      	str	r0, [r3, #0]
 800645e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006460:	2b00      	cmp	r3, #0
 8006462:	f43f acf1 	beq.w	8005e48 <_dtoa_r+0xa0>
 8006466:	601d      	str	r5, [r3, #0]
 8006468:	e4ee      	b.n	8005e48 <_dtoa_r+0xa0>
 800646a:	9f00      	ldr	r7, [sp, #0]
 800646c:	462b      	mov	r3, r5
 800646e:	461d      	mov	r5, r3
 8006470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006474:	2a39      	cmp	r2, #57	; 0x39
 8006476:	d106      	bne.n	8006486 <_dtoa_r+0x6de>
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d1f7      	bne.n	800646e <_dtoa_r+0x6c6>
 800647e:	9901      	ldr	r1, [sp, #4]
 8006480:	2230      	movs	r2, #48	; 0x30
 8006482:	3701      	adds	r7, #1
 8006484:	700a      	strb	r2, [r1, #0]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	3201      	adds	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e790      	b.n	80063b0 <_dtoa_r+0x608>
 800648e:	4ba6      	ldr	r3, [pc, #664]	; (8006728 <_dtoa_r+0x980>)
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f8b9 	bl	8000608 <__aeabi_dmul>
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	f7fa fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d09d      	beq.n	80063e2 <_dtoa_r+0x63a>
 80064a6:	e7cf      	b.n	8006448 <_dtoa_r+0x6a0>
 80064a8:	9a08      	ldr	r2, [sp, #32]
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	f000 80d7 	beq.w	800665e <_dtoa_r+0x8b6>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a01      	cmp	r2, #1
 80064b4:	f300 80ba 	bgt.w	800662c <_dtoa_r+0x884>
 80064b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	f000 80b2 	beq.w	8006624 <_dtoa_r+0x87c>
 80064c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c4:	9e07      	ldr	r6, [sp, #28]
 80064c6:	9d04      	ldr	r5, [sp, #16]
 80064c8:	9a04      	ldr	r2, [sp, #16]
 80064ca:	441a      	add	r2, r3
 80064cc:	9204      	str	r2, [sp, #16]
 80064ce:	9a05      	ldr	r2, [sp, #20]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	f000 fb66 	bl	8006ba8 <__i2b>
 80064dc:	4607      	mov	r7, r0
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dd0c      	ble.n	80064fc <_dtoa_r+0x754>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd09      	ble.n	80064fc <_dtoa_r+0x754>
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	bfa8      	it	ge
 80064ee:	462b      	movge	r3, r5
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	9204      	str	r2, [sp, #16]
 80064f4:	9a05      	ldr	r2, [sp, #20]
 80064f6:	1aed      	subs	r5, r5, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	b31b      	cbz	r3, 8006548 <_dtoa_r+0x7a0>
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80af 	beq.w	8006666 <_dtoa_r+0x8be>
 8006508:	2e00      	cmp	r6, #0
 800650a:	dd13      	ble.n	8006534 <_dtoa_r+0x78c>
 800650c:	4639      	mov	r1, r7
 800650e:	4632      	mov	r2, r6
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fc09 	bl	8006d28 <__pow5mult>
 8006516:	ee18 2a10 	vmov	r2, s16
 800651a:	4601      	mov	r1, r0
 800651c:	4607      	mov	r7, r0
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fb58 	bl	8006bd4 <__multiply>
 8006524:	ee18 1a10 	vmov	r1, s16
 8006528:	4680      	mov	r8, r0
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fa84 	bl	8006a38 <_Bfree>
 8006530:	ee08 8a10 	vmov	s16, r8
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	1b9a      	subs	r2, r3, r6
 8006538:	d006      	beq.n	8006548 <_dtoa_r+0x7a0>
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fbf2 	bl	8006d28 <__pow5mult>
 8006544:	ee08 0a10 	vmov	s16, r0
 8006548:	2101      	movs	r1, #1
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fb2c 	bl	8006ba8 <__i2b>
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	4606      	mov	r6, r0
 8006556:	f340 8088 	ble.w	800666a <_dtoa_r+0x8c2>
 800655a:	461a      	mov	r2, r3
 800655c:	4601      	mov	r1, r0
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fbe2 	bl	8006d28 <__pow5mult>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	2b01      	cmp	r3, #1
 8006568:	4606      	mov	r6, r0
 800656a:	f340 8081 	ble.w	8006670 <_dtoa_r+0x8c8>
 800656e:	f04f 0800 	mov.w	r8, #0
 8006572:	6933      	ldr	r3, [r6, #16]
 8006574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006578:	6918      	ldr	r0, [r3, #16]
 800657a:	f000 fac5 	bl	8006b08 <__hi0bits>
 800657e:	f1c0 0020 	rsb	r0, r0, #32
 8006582:	9b05      	ldr	r3, [sp, #20]
 8006584:	4418      	add	r0, r3
 8006586:	f010 001f 	ands.w	r0, r0, #31
 800658a:	f000 8092 	beq.w	80066b2 <_dtoa_r+0x90a>
 800658e:	f1c0 0320 	rsb	r3, r0, #32
 8006592:	2b04      	cmp	r3, #4
 8006594:	f340 808a 	ble.w	80066ac <_dtoa_r+0x904>
 8006598:	f1c0 001c 	rsb	r0, r0, #28
 800659c:	9b04      	ldr	r3, [sp, #16]
 800659e:	4403      	add	r3, r0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	4403      	add	r3, r0
 80065a6:	4405      	add	r5, r0
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dd07      	ble.n	80065c0 <_dtoa_r+0x818>
 80065b0:	ee18 1a10 	vmov	r1, s16
 80065b4:	461a      	mov	r2, r3
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fc10 	bl	8006ddc <__lshift>
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x82a>
 80065c6:	4631      	mov	r1, r6
 80065c8:	461a      	mov	r2, r3
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fc06 	bl	8006ddc <__lshift>
 80065d0:	4606      	mov	r6, r0
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d06e      	beq.n	80066b6 <_dtoa_r+0x90e>
 80065d8:	ee18 0a10 	vmov	r0, s16
 80065dc:	4631      	mov	r1, r6
 80065de:	f000 fc6d 	bl	8006ebc <__mcmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	da67      	bge.n	80066b6 <_dtoa_r+0x90e>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	ee18 1a10 	vmov	r1, s16
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	2300      	movs	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fa41 	bl	8006a7c <__multadd>
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	ee08 0a10 	vmov	s16, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 81b1 	beq.w	8006968 <_dtoa_r+0xbc0>
 8006606:	2300      	movs	r3, #0
 8006608:	4639      	mov	r1, r7
 800660a:	220a      	movs	r2, #10
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fa35 	bl	8006a7c <__multadd>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	4607      	mov	r7, r0
 8006618:	f300 808e 	bgt.w	8006738 <_dtoa_r+0x990>
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	2b02      	cmp	r3, #2
 8006620:	dc51      	bgt.n	80066c6 <_dtoa_r+0x91e>
 8006622:	e089      	b.n	8006738 <_dtoa_r+0x990>
 8006624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800662a:	e74b      	b.n	80064c4 <_dtoa_r+0x71c>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	1e5e      	subs	r6, r3, #1
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	42b3      	cmp	r3, r6
 8006634:	bfbf      	itttt	lt
 8006636:	9b07      	ldrlt	r3, [sp, #28]
 8006638:	9607      	strlt	r6, [sp, #28]
 800663a:	1af2      	sublt	r2, r6, r3
 800663c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800663e:	bfb6      	itet	lt
 8006640:	189b      	addlt	r3, r3, r2
 8006642:	1b9e      	subge	r6, r3, r6
 8006644:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	bfb8      	it	lt
 800664a:	2600      	movlt	r6, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfb7      	itett	lt
 8006650:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006654:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006658:	1a9d      	sublt	r5, r3, r2
 800665a:	2300      	movlt	r3, #0
 800665c:	e734      	b.n	80064c8 <_dtoa_r+0x720>
 800665e:	9e07      	ldr	r6, [sp, #28]
 8006660:	9d04      	ldr	r5, [sp, #16]
 8006662:	9f08      	ldr	r7, [sp, #32]
 8006664:	e73b      	b.n	80064de <_dtoa_r+0x736>
 8006666:	9a07      	ldr	r2, [sp, #28]
 8006668:	e767      	b.n	800653a <_dtoa_r+0x792>
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	dc18      	bgt.n	80066a2 <_dtoa_r+0x8fa>
 8006670:	f1ba 0f00 	cmp.w	sl, #0
 8006674:	d115      	bne.n	80066a2 <_dtoa_r+0x8fa>
 8006676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800667a:	b993      	cbnz	r3, 80066a2 <_dtoa_r+0x8fa>
 800667c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006680:	0d1b      	lsrs	r3, r3, #20
 8006682:	051b      	lsls	r3, r3, #20
 8006684:	b183      	cbz	r3, 80066a8 <_dtoa_r+0x900>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f04f 0801 	mov.w	r8, #1
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f af6a 	bne.w	8006572 <_dtoa_r+0x7ca>
 800669e:	2001      	movs	r0, #1
 80066a0:	e76f      	b.n	8006582 <_dtoa_r+0x7da>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	e7f6      	b.n	8006696 <_dtoa_r+0x8ee>
 80066a8:	4698      	mov	r8, r3
 80066aa:	e7f4      	b.n	8006696 <_dtoa_r+0x8ee>
 80066ac:	f43f af7d 	beq.w	80065aa <_dtoa_r+0x802>
 80066b0:	4618      	mov	r0, r3
 80066b2:	301c      	adds	r0, #28
 80066b4:	e772      	b.n	800659c <_dtoa_r+0x7f4>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc37      	bgt.n	800672c <_dtoa_r+0x984>
 80066bc:	9b06      	ldr	r3, [sp, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dd34      	ble.n	800672c <_dtoa_r+0x984>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	b96b      	cbnz	r3, 80066e6 <_dtoa_r+0x93e>
 80066ca:	4631      	mov	r1, r6
 80066cc:	2205      	movs	r2, #5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 f9d4 	bl	8006a7c <__multadd>
 80066d4:	4601      	mov	r1, r0
 80066d6:	4606      	mov	r6, r0
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	f000 fbee 	bl	8006ebc <__mcmp>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f73f adbb 	bgt.w	800625c <_dtoa_r+0x4b4>
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	9d01      	ldr	r5, [sp, #4]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	4631      	mov	r1, r6
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 f99f 	bl	8006a38 <_Bfree>
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	f43f aea4 	beq.w	8006448 <_dtoa_r+0x6a0>
 8006700:	f1b8 0f00 	cmp.w	r8, #0
 8006704:	d005      	beq.n	8006712 <_dtoa_r+0x96a>
 8006706:	45b8      	cmp	r8, r7
 8006708:	d003      	beq.n	8006712 <_dtoa_r+0x96a>
 800670a:	4641      	mov	r1, r8
 800670c:	4620      	mov	r0, r4
 800670e:	f000 f993 	bl	8006a38 <_Bfree>
 8006712:	4639      	mov	r1, r7
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f98f 	bl	8006a38 <_Bfree>
 800671a:	e695      	b.n	8006448 <_dtoa_r+0x6a0>
 800671c:	2600      	movs	r6, #0
 800671e:	4637      	mov	r7, r6
 8006720:	e7e1      	b.n	80066e6 <_dtoa_r+0x93e>
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	4637      	mov	r7, r6
 8006726:	e599      	b.n	800625c <_dtoa_r+0x4b4>
 8006728:	40240000 	.word	0x40240000
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80ca 	beq.w	80068c8 <_dtoa_r+0xb20>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x9a0>
 800673c:	4639      	mov	r1, r7
 800673e:	462a      	mov	r2, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fb4b 	bl	8006ddc <__lshift>
 8006746:	4607      	mov	r7, r0
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	d05b      	beq.n	8006806 <_dtoa_r+0xa5e>
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f931 	bl	80069b8 <_Balloc>
 8006756:	4605      	mov	r5, r0
 8006758:	b928      	cbnz	r0, 8006766 <_dtoa_r+0x9be>
 800675a:	4b87      	ldr	r3, [pc, #540]	; (8006978 <_dtoa_r+0xbd0>)
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006762:	f7ff bb3b 	b.w	8005ddc <_dtoa_r+0x34>
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f107 010c 	add.w	r1, r7, #12
 8006770:	300c      	adds	r0, #12
 8006772:	f000 f913 	bl	800699c <memcpy>
 8006776:	2201      	movs	r2, #1
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fb2e 	bl	8006ddc <__lshift>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	f103 0901 	add.w	r9, r3, #1
 8006786:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800678a:	4413      	add	r3, r2
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f00a 0301 	and.w	r3, sl, #1
 8006792:	46b8      	mov	r8, r7
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4607      	mov	r7, r0
 8006798:	4631      	mov	r1, r6
 800679a:	ee18 0a10 	vmov	r0, s16
 800679e:	f7ff fa77 	bl	8005c90 <quorem>
 80067a2:	4641      	mov	r1, r8
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067aa:	ee18 0a10 	vmov	r0, s16
 80067ae:	f000 fb85 	bl	8006ebc <__mcmp>
 80067b2:	463a      	mov	r2, r7
 80067b4:	9003      	str	r0, [sp, #12]
 80067b6:	4631      	mov	r1, r6
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fb9b 	bl	8006ef4 <__mdiff>
 80067be:	68c2      	ldr	r2, [r0, #12]
 80067c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80067c4:	4605      	mov	r5, r0
 80067c6:	bb02      	cbnz	r2, 800680a <_dtoa_r+0xa62>
 80067c8:	4601      	mov	r1, r0
 80067ca:	ee18 0a10 	vmov	r0, s16
 80067ce:	f000 fb75 	bl	8006ebc <__mcmp>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	9207      	str	r2, [sp, #28]
 80067da:	f000 f92d 	bl	8006a38 <_Bfree>
 80067de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067e2:	ea43 0102 	orr.w	r1, r3, r2
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	430b      	orrs	r3, r1
 80067ea:	464d      	mov	r5, r9
 80067ec:	d10f      	bne.n	800680e <_dtoa_r+0xa66>
 80067ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067f2:	d02a      	beq.n	800684a <_dtoa_r+0xaa2>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd02      	ble.n	8006800 <_dtoa_r+0xa58>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006800:	f88b a000 	strb.w	sl, [fp]
 8006804:	e775      	b.n	80066f2 <_dtoa_r+0x94a>
 8006806:	4638      	mov	r0, r7
 8006808:	e7ba      	b.n	8006780 <_dtoa_r+0x9d8>
 800680a:	2201      	movs	r2, #1
 800680c:	e7e2      	b.n	80067d4 <_dtoa_r+0xa2c>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db04      	blt.n	800681e <_dtoa_r+0xa76>
 8006814:	9906      	ldr	r1, [sp, #24]
 8006816:	430b      	orrs	r3, r1
 8006818:	9904      	ldr	r1, [sp, #16]
 800681a:	430b      	orrs	r3, r1
 800681c:	d122      	bne.n	8006864 <_dtoa_r+0xabc>
 800681e:	2a00      	cmp	r2, #0
 8006820:	ddee      	ble.n	8006800 <_dtoa_r+0xa58>
 8006822:	ee18 1a10 	vmov	r1, s16
 8006826:	2201      	movs	r2, #1
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fad7 	bl	8006ddc <__lshift>
 800682e:	4631      	mov	r1, r6
 8006830:	ee08 0a10 	vmov	s16, r0
 8006834:	f000 fb42 	bl	8006ebc <__mcmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	dc03      	bgt.n	8006844 <_dtoa_r+0xa9c>
 800683c:	d1e0      	bne.n	8006800 <_dtoa_r+0xa58>
 800683e:	f01a 0f01 	tst.w	sl, #1
 8006842:	d0dd      	beq.n	8006800 <_dtoa_r+0xa58>
 8006844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006848:	d1d7      	bne.n	80067fa <_dtoa_r+0xa52>
 800684a:	2339      	movs	r3, #57	; 0x39
 800684c:	f88b 3000 	strb.w	r3, [fp]
 8006850:	462b      	mov	r3, r5
 8006852:	461d      	mov	r5, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800685a:	2a39      	cmp	r2, #57	; 0x39
 800685c:	d071      	beq.n	8006942 <_dtoa_r+0xb9a>
 800685e:	3201      	adds	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e746      	b.n	80066f2 <_dtoa_r+0x94a>
 8006864:	2a00      	cmp	r2, #0
 8006866:	dd07      	ble.n	8006878 <_dtoa_r+0xad0>
 8006868:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800686c:	d0ed      	beq.n	800684a <_dtoa_r+0xaa2>
 800686e:	f10a 0301 	add.w	r3, sl, #1
 8006872:	f88b 3000 	strb.w	r3, [fp]
 8006876:	e73c      	b.n	80066f2 <_dtoa_r+0x94a>
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800687e:	4599      	cmp	r9, r3
 8006880:	d047      	beq.n	8006912 <_dtoa_r+0xb6a>
 8006882:	ee18 1a10 	vmov	r1, s16
 8006886:	2300      	movs	r3, #0
 8006888:	220a      	movs	r2, #10
 800688a:	4620      	mov	r0, r4
 800688c:	f000 f8f6 	bl	8006a7c <__multadd>
 8006890:	45b8      	cmp	r8, r7
 8006892:	ee08 0a10 	vmov	s16, r0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	f04f 020a 	mov.w	r2, #10
 800689e:	4641      	mov	r1, r8
 80068a0:	4620      	mov	r0, r4
 80068a2:	d106      	bne.n	80068b2 <_dtoa_r+0xb0a>
 80068a4:	f000 f8ea 	bl	8006a7c <__multadd>
 80068a8:	4680      	mov	r8, r0
 80068aa:	4607      	mov	r7, r0
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	e772      	b.n	8006798 <_dtoa_r+0x9f0>
 80068b2:	f000 f8e3 	bl	8006a7c <__multadd>
 80068b6:	4639      	mov	r1, r7
 80068b8:	4680      	mov	r8, r0
 80068ba:	2300      	movs	r3, #0
 80068bc:	220a      	movs	r2, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f8dc 	bl	8006a7c <__multadd>
 80068c4:	4607      	mov	r7, r0
 80068c6:	e7f1      	b.n	80068ac <_dtoa_r+0xb04>
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	9d01      	ldr	r5, [sp, #4]
 80068ce:	ee18 0a10 	vmov	r0, s16
 80068d2:	4631      	mov	r1, r6
 80068d4:	f7ff f9dc 	bl	8005c90 <quorem>
 80068d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	f805 ab01 	strb.w	sl, [r5], #1
 80068e2:	1aea      	subs	r2, r5, r3
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	dd09      	ble.n	80068fe <_dtoa_r+0xb56>
 80068ea:	ee18 1a10 	vmov	r1, s16
 80068ee:	2300      	movs	r3, #0
 80068f0:	220a      	movs	r2, #10
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f8c2 	bl	8006a7c <__multadd>
 80068f8:	ee08 0a10 	vmov	s16, r0
 80068fc:	e7e7      	b.n	80068ce <_dtoa_r+0xb26>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	bfc8      	it	gt
 8006904:	461d      	movgt	r5, r3
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	bfd8      	it	le
 800690a:	2501      	movle	r5, #1
 800690c:	441d      	add	r5, r3
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	ee18 1a10 	vmov	r1, s16
 8006916:	2201      	movs	r2, #1
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fa5f 	bl	8006ddc <__lshift>
 800691e:	4631      	mov	r1, r6
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	f000 faca 	bl	8006ebc <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dc91      	bgt.n	8006850 <_dtoa_r+0xaa8>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xb8c>
 800692e:	f01a 0f01 	tst.w	sl, #1
 8006932:	d18d      	bne.n	8006850 <_dtoa_r+0xaa8>
 8006934:	462b      	mov	r3, r5
 8006936:	461d      	mov	r5, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a30      	cmp	r2, #48	; 0x30
 800693e:	d0fa      	beq.n	8006936 <_dtoa_r+0xb8e>
 8006940:	e6d7      	b.n	80066f2 <_dtoa_r+0x94a>
 8006942:	9a01      	ldr	r2, [sp, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d184      	bne.n	8006852 <_dtoa_r+0xaaa>
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2331      	movs	r3, #49	; 0x31
 8006950:	7013      	strb	r3, [r2, #0]
 8006952:	e6ce      	b.n	80066f2 <_dtoa_r+0x94a>
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <_dtoa_r+0xbd4>)
 8006956:	f7ff ba95 	b.w	8005e84 <_dtoa_r+0xdc>
 800695a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800695c:	2b00      	cmp	r3, #0
 800695e:	f47f aa6e 	bne.w	8005e3e <_dtoa_r+0x96>
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <_dtoa_r+0xbd8>)
 8006964:	f7ff ba8e 	b.w	8005e84 <_dtoa_r+0xdc>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dcae      	bgt.n	80068cc <_dtoa_r+0xb24>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f73f aea8 	bgt.w	80066c6 <_dtoa_r+0x91e>
 8006976:	e7a9      	b.n	80068cc <_dtoa_r+0xb24>
 8006978:	080095df 	.word	0x080095df
 800697c:	0800953c 	.word	0x0800953c
 8006980:	08009560 	.word	0x08009560

08006984 <_localeconv_r>:
 8006984:	4800      	ldr	r0, [pc, #0]	; (8006988 <_localeconv_r+0x4>)
 8006986:	4770      	bx	lr
 8006988:	200001f0 	.word	0x200001f0

0800698c <malloc>:
 800698c:	4b02      	ldr	r3, [pc, #8]	; (8006998 <malloc+0xc>)
 800698e:	4601      	mov	r1, r0
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f000 bc17 	b.w	80071c4 <_malloc_r>
 8006996:	bf00      	nop
 8006998:	2000009c 	.word	0x2000009c

0800699c <memcpy>:
 800699c:	440a      	add	r2, r1
 800699e:	4291      	cmp	r1, r2
 80069a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a4:	d100      	bne.n	80069a8 <memcpy+0xc>
 80069a6:	4770      	bx	lr
 80069a8:	b510      	push	{r4, lr}
 80069aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b2:	4291      	cmp	r1, r2
 80069b4:	d1f9      	bne.n	80069aa <memcpy+0xe>
 80069b6:	bd10      	pop	{r4, pc}

080069b8 <_Balloc>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Balloc+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ffe2 	bl	800698c <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6260      	str	r0, [r4, #36]	; 0x24
 80069cc:	b920      	cbnz	r0, 80069d8 <_Balloc+0x20>
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <_Balloc+0x78>)
 80069d0:	4818      	ldr	r0, [pc, #96]	; (8006a34 <_Balloc+0x7c>)
 80069d2:	2166      	movs	r1, #102	; 0x66
 80069d4:	f000 fdd6 	bl	8007584 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069e2:	68f3      	ldr	r3, [r6, #12]
 80069e4:	b183      	cbz	r3, 8006a08 <_Balloc+0x50>
 80069e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ee:	b9b8      	cbnz	r0, 8006a20 <_Balloc+0x68>
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f605 	lsl.w	r6, r1, r5
 80069f6:	1d72      	adds	r2, r6, #5
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb60 	bl	80070c0 <_calloc_r>
 8006a00:	b160      	cbz	r0, 8006a1c <_Balloc+0x64>
 8006a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a06:	e00e      	b.n	8006a26 <_Balloc+0x6e>
 8006a08:	2221      	movs	r2, #33	; 0x21
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fb57 	bl	80070c0 <_calloc_r>
 8006a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a14:	60f0      	str	r0, [r6, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <_Balloc+0x2e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a26:	2300      	movs	r3, #0
 8006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a2c:	e7f7      	b.n	8006a1e <_Balloc+0x66>
 8006a2e:	bf00      	nop
 8006a30:	0800956d 	.word	0x0800956d
 8006a34:	080095f0 	.word	0x080095f0

08006a38 <_Bfree>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b976      	cbnz	r6, 8006a60 <_Bfree+0x28>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f7ff ffa2 	bl	800698c <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8006a4c:	b920      	cbnz	r0, 8006a58 <_Bfree+0x20>
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <_Bfree+0x3c>)
 8006a50:	4809      	ldr	r0, [pc, #36]	; (8006a78 <_Bfree+0x40>)
 8006a52:	218a      	movs	r1, #138	; 0x8a
 8006a54:	f000 fd96 	bl	8007584 <__assert_func>
 8006a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a5c:	6006      	str	r6, [r0, #0]
 8006a5e:	60c6      	str	r6, [r0, #12]
 8006a60:	b13c      	cbz	r4, 8006a72 <_Bfree+0x3a>
 8006a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	0800956d 	.word	0x0800956d
 8006a78:	080095f0 	.word	0x080095f0

08006a7c <__multadd>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	690d      	ldr	r5, [r1, #16]
 8006a82:	4607      	mov	r7, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	461e      	mov	r6, r3
 8006a88:	f101 0c14 	add.w	ip, r1, #20
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a92:	b299      	uxth	r1, r3
 8006a94:	fb02 6101 	mla	r1, r2, r1, r6
 8006a98:	0c1e      	lsrs	r6, r3, #16
 8006a9a:	0c0b      	lsrs	r3, r1, #16
 8006a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa0:	b289      	uxth	r1, r1
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa8:	4285      	cmp	r5, r0
 8006aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab2:	dcec      	bgt.n	8006a8e <__multadd+0x12>
 8006ab4:	b30e      	cbz	r6, 8006afa <__multadd+0x7e>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc19      	bgt.n	8006af0 <__multadd+0x74>
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	3101      	adds	r1, #1
 8006ac2:	f7ff ff79 	bl	80069b8 <_Balloc>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <__multadd+0x5a>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <__multadd+0x84>)
 8006ace:	480d      	ldr	r0, [pc, #52]	; (8006b04 <__multadd+0x88>)
 8006ad0:	21b5      	movs	r1, #181	; 0xb5
 8006ad2:	f000 fd57 	bl	8007584 <__assert_func>
 8006ad6:	6922      	ldr	r2, [r4, #16]
 8006ad8:	3202      	adds	r2, #2
 8006ada:	f104 010c 	add.w	r1, r4, #12
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	f7ff ff5b 	bl	800699c <memcpy>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ffa5 	bl	8006a38 <_Bfree>
 8006aee:	4644      	mov	r4, r8
 8006af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af4:	3501      	adds	r5, #1
 8006af6:	615e      	str	r6, [r3, #20]
 8006af8:	6125      	str	r5, [r4, #16]
 8006afa:	4620      	mov	r0, r4
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	080095df 	.word	0x080095df
 8006b04:	080095f0 	.word	0x080095f0

08006b08 <__hi0bits>:
 8006b08:	0c03      	lsrs	r3, r0, #16
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	b9d3      	cbnz	r3, 8006b44 <__hi0bits+0x3c>
 8006b0e:	0400      	lsls	r0, r0, #16
 8006b10:	2310      	movs	r3, #16
 8006b12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b16:	bf04      	itt	eq
 8006b18:	0200      	lsleq	r0, r0, #8
 8006b1a:	3308      	addeq	r3, #8
 8006b1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b20:	bf04      	itt	eq
 8006b22:	0100      	lsleq	r0, r0, #4
 8006b24:	3304      	addeq	r3, #4
 8006b26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b2a:	bf04      	itt	eq
 8006b2c:	0080      	lsleq	r0, r0, #2
 8006b2e:	3302      	addeq	r3, #2
 8006b30:	2800      	cmp	r0, #0
 8006b32:	db05      	blt.n	8006b40 <__hi0bits+0x38>
 8006b34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b38:	f103 0301 	add.w	r3, r3, #1
 8006b3c:	bf08      	it	eq
 8006b3e:	2320      	moveq	r3, #32
 8006b40:	4618      	mov	r0, r3
 8006b42:	4770      	bx	lr
 8006b44:	2300      	movs	r3, #0
 8006b46:	e7e4      	b.n	8006b12 <__hi0bits+0xa>

08006b48 <__lo0bits>:
 8006b48:	6803      	ldr	r3, [r0, #0]
 8006b4a:	f013 0207 	ands.w	r2, r3, #7
 8006b4e:	4601      	mov	r1, r0
 8006b50:	d00b      	beq.n	8006b6a <__lo0bits+0x22>
 8006b52:	07da      	lsls	r2, r3, #31
 8006b54:	d423      	bmi.n	8006b9e <__lo0bits+0x56>
 8006b56:	0798      	lsls	r0, r3, #30
 8006b58:	bf49      	itett	mi
 8006b5a:	085b      	lsrmi	r3, r3, #1
 8006b5c:	089b      	lsrpl	r3, r3, #2
 8006b5e:	2001      	movmi	r0, #1
 8006b60:	600b      	strmi	r3, [r1, #0]
 8006b62:	bf5c      	itt	pl
 8006b64:	600b      	strpl	r3, [r1, #0]
 8006b66:	2002      	movpl	r0, #2
 8006b68:	4770      	bx	lr
 8006b6a:	b298      	uxth	r0, r3
 8006b6c:	b9a8      	cbnz	r0, 8006b9a <__lo0bits+0x52>
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	2010      	movs	r0, #16
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	b90a      	cbnz	r2, 8006b7a <__lo0bits+0x32>
 8006b76:	3008      	adds	r0, #8
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	071a      	lsls	r2, r3, #28
 8006b7c:	bf04      	itt	eq
 8006b7e:	091b      	lsreq	r3, r3, #4
 8006b80:	3004      	addeq	r0, #4
 8006b82:	079a      	lsls	r2, r3, #30
 8006b84:	bf04      	itt	eq
 8006b86:	089b      	lsreq	r3, r3, #2
 8006b88:	3002      	addeq	r0, #2
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d403      	bmi.n	8006b96 <__lo0bits+0x4e>
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	f100 0001 	add.w	r0, r0, #1
 8006b94:	d005      	beq.n	8006ba2 <__lo0bits+0x5a>
 8006b96:	600b      	str	r3, [r1, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	e7e9      	b.n	8006b72 <__lo0bits+0x2a>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	4770      	bx	lr
 8006ba2:	2020      	movs	r0, #32
 8006ba4:	4770      	bx	lr
	...

08006ba8 <__i2b>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	2101      	movs	r1, #1
 8006bae:	f7ff ff03 	bl	80069b8 <_Balloc>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	b928      	cbnz	r0, 8006bc2 <__i2b+0x1a>
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <__i2b+0x24>)
 8006bb8:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <__i2b+0x28>)
 8006bba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bbe:	f000 fce1 	bl	8007584 <__assert_func>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	6144      	str	r4, [r0, #20]
 8006bc6:	6103      	str	r3, [r0, #16]
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	bf00      	nop
 8006bcc:	080095df 	.word	0x080095df
 8006bd0:	080095f0 	.word	0x080095f0

08006bd4 <__multiply>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	4691      	mov	r9, r2
 8006bda:	690a      	ldr	r2, [r1, #16]
 8006bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bfb8      	it	lt
 8006be4:	460b      	movlt	r3, r1
 8006be6:	460c      	mov	r4, r1
 8006be8:	bfbc      	itt	lt
 8006bea:	464c      	movlt	r4, r9
 8006bec:	4699      	movlt	r9, r3
 8006bee:	6927      	ldr	r7, [r4, #16]
 8006bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bf4:	68a3      	ldr	r3, [r4, #8]
 8006bf6:	6861      	ldr	r1, [r4, #4]
 8006bf8:	eb07 060a 	add.w	r6, r7, sl
 8006bfc:	42b3      	cmp	r3, r6
 8006bfe:	b085      	sub	sp, #20
 8006c00:	bfb8      	it	lt
 8006c02:	3101      	addlt	r1, #1
 8006c04:	f7ff fed8 	bl	80069b8 <_Balloc>
 8006c08:	b930      	cbnz	r0, 8006c18 <__multiply+0x44>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	4b44      	ldr	r3, [pc, #272]	; (8006d20 <__multiply+0x14c>)
 8006c0e:	4845      	ldr	r0, [pc, #276]	; (8006d24 <__multiply+0x150>)
 8006c10:	f240 115d 	movw	r1, #349	; 0x15d
 8006c14:	f000 fcb6 	bl	8007584 <__assert_func>
 8006c18:	f100 0514 	add.w	r5, r0, #20
 8006c1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c20:	462b      	mov	r3, r5
 8006c22:	2200      	movs	r2, #0
 8006c24:	4543      	cmp	r3, r8
 8006c26:	d321      	bcc.n	8006c6c <__multiply+0x98>
 8006c28:	f104 0314 	add.w	r3, r4, #20
 8006c2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c30:	f109 0314 	add.w	r3, r9, #20
 8006c34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c38:	9202      	str	r2, [sp, #8]
 8006c3a:	1b3a      	subs	r2, r7, r4
 8006c3c:	3a15      	subs	r2, #21
 8006c3e:	f022 0203 	bic.w	r2, r2, #3
 8006c42:	3204      	adds	r2, #4
 8006c44:	f104 0115 	add.w	r1, r4, #21
 8006c48:	428f      	cmp	r7, r1
 8006c4a:	bf38      	it	cc
 8006c4c:	2204      	movcc	r2, #4
 8006c4e:	9201      	str	r2, [sp, #4]
 8006c50:	9a02      	ldr	r2, [sp, #8]
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d80c      	bhi.n	8006c72 <__multiply+0x9e>
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	dd03      	ble.n	8006c64 <__multiply+0x90>
 8006c5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d05a      	beq.n	8006d1a <__multiply+0x146>
 8006c64:	6106      	str	r6, [r0, #16]
 8006c66:	b005      	add	sp, #20
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	f843 2b04 	str.w	r2, [r3], #4
 8006c70:	e7d8      	b.n	8006c24 <__multiply+0x50>
 8006c72:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c76:	f1ba 0f00 	cmp.w	sl, #0
 8006c7a:	d024      	beq.n	8006cc6 <__multiply+0xf2>
 8006c7c:	f104 0e14 	add.w	lr, r4, #20
 8006c80:	46a9      	mov	r9, r5
 8006c82:	f04f 0c00 	mov.w	ip, #0
 8006c86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c8a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c8e:	fa1f fb82 	uxth.w	fp, r2
 8006c92:	b289      	uxth	r1, r1
 8006c94:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca0:	4461      	add	r1, ip
 8006ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ca6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cae:	b289      	uxth	r1, r1
 8006cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cb4:	4577      	cmp	r7, lr
 8006cb6:	f849 1b04 	str.w	r1, [r9], #4
 8006cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cbe:	d8e2      	bhi.n	8006c86 <__multiply+0xb2>
 8006cc0:	9a01      	ldr	r2, [sp, #4]
 8006cc2:	f845 c002 	str.w	ip, [r5, r2]
 8006cc6:	9a03      	ldr	r2, [sp, #12]
 8006cc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	f1b9 0f00 	cmp.w	r9, #0
 8006cd2:	d020      	beq.n	8006d16 <__multiply+0x142>
 8006cd4:	6829      	ldr	r1, [r5, #0]
 8006cd6:	f104 0c14 	add.w	ip, r4, #20
 8006cda:	46ae      	mov	lr, r5
 8006cdc:	f04f 0a00 	mov.w	sl, #0
 8006ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cec:	4492      	add	sl, r2
 8006cee:	b289      	uxth	r1, r1
 8006cf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8006cf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8006d00:	0c12      	lsrs	r2, r2, #16
 8006d02:	fb09 1102 	mla	r1, r9, r2, r1
 8006d06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d0a:	4567      	cmp	r7, ip
 8006d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d10:	d8e6      	bhi.n	8006ce0 <__multiply+0x10c>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	50a9      	str	r1, [r5, r2]
 8006d16:	3504      	adds	r5, #4
 8006d18:	e79a      	b.n	8006c50 <__multiply+0x7c>
 8006d1a:	3e01      	subs	r6, #1
 8006d1c:	e79c      	b.n	8006c58 <__multiply+0x84>
 8006d1e:	bf00      	nop
 8006d20:	080095df 	.word	0x080095df
 8006d24:	080095f0 	.word	0x080095f0

08006d28 <__pow5mult>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	f012 0203 	ands.w	r2, r2, #3
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	d007      	beq.n	8006d48 <__pow5mult+0x20>
 8006d38:	4c25      	ldr	r4, [pc, #148]	; (8006dd0 <__pow5mult+0xa8>)
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d42:	f7ff fe9b 	bl	8006a7c <__multadd>
 8006d46:	4607      	mov	r7, r0
 8006d48:	10ad      	asrs	r5, r5, #2
 8006d4a:	d03d      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d4e:	b97c      	cbnz	r4, 8006d70 <__pow5mult+0x48>
 8006d50:	2010      	movs	r0, #16
 8006d52:	f7ff fe1b 	bl	800698c <malloc>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6270      	str	r0, [r6, #36]	; 0x24
 8006d5a:	b928      	cbnz	r0, 8006d68 <__pow5mult+0x40>
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <__pow5mult+0xac>)
 8006d5e:	481e      	ldr	r0, [pc, #120]	; (8006dd8 <__pow5mult+0xb0>)
 8006d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d64:	f000 fc0e 	bl	8007584 <__assert_func>
 8006d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d6c:	6004      	str	r4, [r0, #0]
 8006d6e:	60c4      	str	r4, [r0, #12]
 8006d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d78:	b94c      	cbnz	r4, 8006d8e <__pow5mult+0x66>
 8006d7a:	f240 2171 	movw	r1, #625	; 0x271
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ff12 	bl	8006ba8 <__i2b>
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	07eb      	lsls	r3, r5, #31
 8006d94:	d50a      	bpl.n	8006dac <__pow5mult+0x84>
 8006d96:	4639      	mov	r1, r7
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ff1a 	bl	8006bd4 <__multiply>
 8006da0:	4639      	mov	r1, r7
 8006da2:	4680      	mov	r8, r0
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7ff fe47 	bl	8006a38 <_Bfree>
 8006daa:	4647      	mov	r7, r8
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	d00b      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	b938      	cbnz	r0, 8006dc4 <__pow5mult+0x9c>
 8006db4:	4622      	mov	r2, r4
 8006db6:	4621      	mov	r1, r4
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff ff0b 	bl	8006bd4 <__multiply>
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	f8c0 9000 	str.w	r9, [r0]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	e7e4      	b.n	8006d92 <__pow5mult+0x6a>
 8006dc8:	4638      	mov	r0, r7
 8006dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dce:	bf00      	nop
 8006dd0:	08009740 	.word	0x08009740
 8006dd4:	0800956d 	.word	0x0800956d
 8006dd8:	080095f0 	.word	0x080095f0

08006ddc <__lshift>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	460c      	mov	r4, r1
 8006de2:	6849      	ldr	r1, [r1, #4]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	4607      	mov	r7, r0
 8006dee:	4691      	mov	r9, r2
 8006df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df4:	f108 0601 	add.w	r6, r8, #1
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	db0b      	blt.n	8006e14 <__lshift+0x38>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fddb 	bl	80069b8 <_Balloc>
 8006e02:	4605      	mov	r5, r0
 8006e04:	b948      	cbnz	r0, 8006e1a <__lshift+0x3e>
 8006e06:	4602      	mov	r2, r0
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <__lshift+0xd8>)
 8006e0a:	482b      	ldr	r0, [pc, #172]	; (8006eb8 <__lshift+0xdc>)
 8006e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e10:	f000 fbb8 	bl	8007584 <__assert_func>
 8006e14:	3101      	adds	r1, #1
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	e7ee      	b.n	8006df8 <__lshift+0x1c>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f100 0114 	add.w	r1, r0, #20
 8006e20:	f100 0210 	add.w	r2, r0, #16
 8006e24:	4618      	mov	r0, r3
 8006e26:	4553      	cmp	r3, sl
 8006e28:	db37      	blt.n	8006e9a <__lshift+0xbe>
 8006e2a:	6920      	ldr	r0, [r4, #16]
 8006e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e30:	f104 0314 	add.w	r3, r4, #20
 8006e34:	f019 091f 	ands.w	r9, r9, #31
 8006e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e40:	d02f      	beq.n	8006ea2 <__lshift+0xc6>
 8006e42:	f1c9 0e20 	rsb	lr, r9, #32
 8006e46:	468a      	mov	sl, r1
 8006e48:	f04f 0c00 	mov.w	ip, #0
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e52:	ea42 020c 	orr.w	r2, r2, ip
 8006e56:	f84a 2b04 	str.w	r2, [sl], #4
 8006e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e64:	d8f2      	bhi.n	8006e4c <__lshift+0x70>
 8006e66:	1b03      	subs	r3, r0, r4
 8006e68:	3b15      	subs	r3, #21
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	3304      	adds	r3, #4
 8006e70:	f104 0215 	add.w	r2, r4, #21
 8006e74:	4290      	cmp	r0, r2
 8006e76:	bf38      	it	cc
 8006e78:	2304      	movcc	r3, #4
 8006e7a:	f841 c003 	str.w	ip, [r1, r3]
 8006e7e:	f1bc 0f00 	cmp.w	ip, #0
 8006e82:	d001      	beq.n	8006e88 <__lshift+0xac>
 8006e84:	f108 0602 	add.w	r6, r8, #2
 8006e88:	3e01      	subs	r6, #1
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	612e      	str	r6, [r5, #16]
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f7ff fdd2 	bl	8006a38 <_Bfree>
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	e7c1      	b.n	8006e26 <__lshift+0x4a>
 8006ea2:	3904      	subs	r1, #4
 8006ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eac:	4298      	cmp	r0, r3
 8006eae:	d8f9      	bhi.n	8006ea4 <__lshift+0xc8>
 8006eb0:	e7ea      	b.n	8006e88 <__lshift+0xac>
 8006eb2:	bf00      	nop
 8006eb4:	080095df 	.word	0x080095df
 8006eb8:	080095f0 	.word	0x080095f0

08006ebc <__mcmp>:
 8006ebc:	b530      	push	{r4, r5, lr}
 8006ebe:	6902      	ldr	r2, [r0, #16]
 8006ec0:	690c      	ldr	r4, [r1, #16]
 8006ec2:	1b12      	subs	r2, r2, r4
 8006ec4:	d10e      	bne.n	8006ee4 <__mcmp+0x28>
 8006ec6:	f100 0314 	add.w	r3, r0, #20
 8006eca:	3114      	adds	r1, #20
 8006ecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006edc:	42a5      	cmp	r5, r4
 8006ede:	d003      	beq.n	8006ee8 <__mcmp+0x2c>
 8006ee0:	d305      	bcc.n	8006eee <__mcmp+0x32>
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	bd30      	pop	{r4, r5, pc}
 8006ee8:	4283      	cmp	r3, r0
 8006eea:	d3f3      	bcc.n	8006ed4 <__mcmp+0x18>
 8006eec:	e7fa      	b.n	8006ee4 <__mcmp+0x28>
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	e7f7      	b.n	8006ee4 <__mcmp+0x28>

08006ef4 <__mdiff>:
 8006ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	4606      	mov	r6, r0
 8006efc:	4611      	mov	r1, r2
 8006efe:	4620      	mov	r0, r4
 8006f00:	4690      	mov	r8, r2
 8006f02:	f7ff ffdb 	bl	8006ebc <__mcmp>
 8006f06:	1e05      	subs	r5, r0, #0
 8006f08:	d110      	bne.n	8006f2c <__mdiff+0x38>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff fd53 	bl	80069b8 <_Balloc>
 8006f12:	b930      	cbnz	r0, 8006f22 <__mdiff+0x2e>
 8006f14:	4b3a      	ldr	r3, [pc, #232]	; (8007000 <__mdiff+0x10c>)
 8006f16:	4602      	mov	r2, r0
 8006f18:	f240 2132 	movw	r1, #562	; 0x232
 8006f1c:	4839      	ldr	r0, [pc, #228]	; (8007004 <__mdiff+0x110>)
 8006f1e:	f000 fb31 	bl	8007584 <__assert_func>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	bfa4      	itt	ge
 8006f2e:	4643      	movge	r3, r8
 8006f30:	46a0      	movge	r8, r4
 8006f32:	4630      	mov	r0, r6
 8006f34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f38:	bfa6      	itte	ge
 8006f3a:	461c      	movge	r4, r3
 8006f3c:	2500      	movge	r5, #0
 8006f3e:	2501      	movlt	r5, #1
 8006f40:	f7ff fd3a 	bl	80069b8 <_Balloc>
 8006f44:	b920      	cbnz	r0, 8006f50 <__mdiff+0x5c>
 8006f46:	4b2e      	ldr	r3, [pc, #184]	; (8007000 <__mdiff+0x10c>)
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f4e:	e7e5      	b.n	8006f1c <__mdiff+0x28>
 8006f50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f54:	6926      	ldr	r6, [r4, #16]
 8006f56:	60c5      	str	r5, [r0, #12]
 8006f58:	f104 0914 	add.w	r9, r4, #20
 8006f5c:	f108 0514 	add.w	r5, r8, #20
 8006f60:	f100 0e14 	add.w	lr, r0, #20
 8006f64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f6c:	f108 0210 	add.w	r2, r8, #16
 8006f70:	46f2      	mov	sl, lr
 8006f72:	2100      	movs	r1, #0
 8006f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f7c:	fa1f f883 	uxth.w	r8, r3
 8006f80:	fa11 f18b 	uxtah	r1, r1, fp
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	eba1 0808 	sub.w	r8, r1, r8
 8006f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f92:	fa1f f888 	uxth.w	r8, r8
 8006f96:	1419      	asrs	r1, r3, #16
 8006f98:	454e      	cmp	r6, r9
 8006f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8006fa2:	d8e7      	bhi.n	8006f74 <__mdiff+0x80>
 8006fa4:	1b33      	subs	r3, r6, r4
 8006fa6:	3b15      	subs	r3, #21
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	3304      	adds	r3, #4
 8006fae:	3415      	adds	r4, #21
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	bf38      	it	cc
 8006fb4:	2304      	movcc	r3, #4
 8006fb6:	441d      	add	r5, r3
 8006fb8:	4473      	add	r3, lr
 8006fba:	469e      	mov	lr, r3
 8006fbc:	462e      	mov	r6, r5
 8006fbe:	4566      	cmp	r6, ip
 8006fc0:	d30e      	bcc.n	8006fe0 <__mdiff+0xec>
 8006fc2:	f10c 0203 	add.w	r2, ip, #3
 8006fc6:	1b52      	subs	r2, r2, r5
 8006fc8:	f022 0203 	bic.w	r2, r2, #3
 8006fcc:	3d03      	subs	r5, #3
 8006fce:	45ac      	cmp	ip, r5
 8006fd0:	bf38      	it	cc
 8006fd2:	2200      	movcc	r2, #0
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fda:	b17b      	cbz	r3, 8006ffc <__mdiff+0x108>
 8006fdc:	6107      	str	r7, [r0, #16]
 8006fde:	e7a3      	b.n	8006f28 <__mdiff+0x34>
 8006fe0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fe4:	fa11 f288 	uxtah	r2, r1, r8
 8006fe8:	1414      	asrs	r4, r2, #16
 8006fea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ff4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ff8:	1421      	asrs	r1, r4, #16
 8006ffa:	e7e0      	b.n	8006fbe <__mdiff+0xca>
 8006ffc:	3f01      	subs	r7, #1
 8006ffe:	e7ea      	b.n	8006fd6 <__mdiff+0xe2>
 8007000:	080095df 	.word	0x080095df
 8007004:	080095f0 	.word	0x080095f0

08007008 <__d2b>:
 8007008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800700c:	4689      	mov	r9, r1
 800700e:	2101      	movs	r1, #1
 8007010:	ec57 6b10 	vmov	r6, r7, d0
 8007014:	4690      	mov	r8, r2
 8007016:	f7ff fccf 	bl	80069b8 <_Balloc>
 800701a:	4604      	mov	r4, r0
 800701c:	b930      	cbnz	r0, 800702c <__d2b+0x24>
 800701e:	4602      	mov	r2, r0
 8007020:	4b25      	ldr	r3, [pc, #148]	; (80070b8 <__d2b+0xb0>)
 8007022:	4826      	ldr	r0, [pc, #152]	; (80070bc <__d2b+0xb4>)
 8007024:	f240 310a 	movw	r1, #778	; 0x30a
 8007028:	f000 faac 	bl	8007584 <__assert_func>
 800702c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007034:	bb35      	cbnz	r5, 8007084 <__d2b+0x7c>
 8007036:	2e00      	cmp	r6, #0
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	d028      	beq.n	800708e <__d2b+0x86>
 800703c:	4668      	mov	r0, sp
 800703e:	9600      	str	r6, [sp, #0]
 8007040:	f7ff fd82 	bl	8006b48 <__lo0bits>
 8007044:	9900      	ldr	r1, [sp, #0]
 8007046:	b300      	cbz	r0, 800708a <__d2b+0x82>
 8007048:	9a01      	ldr	r2, [sp, #4]
 800704a:	f1c0 0320 	rsb	r3, r0, #32
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	430b      	orrs	r3, r1
 8007054:	40c2      	lsrs	r2, r0
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	9201      	str	r2, [sp, #4]
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	61a3      	str	r3, [r4, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2202      	movne	r2, #2
 8007064:	2201      	moveq	r2, #1
 8007066:	6122      	str	r2, [r4, #16]
 8007068:	b1d5      	cbz	r5, 80070a0 <__d2b+0x98>
 800706a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800706e:	4405      	add	r5, r0
 8007070:	f8c9 5000 	str.w	r5, [r9]
 8007074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007078:	f8c8 0000 	str.w	r0, [r8]
 800707c:	4620      	mov	r0, r4
 800707e:	b003      	add	sp, #12
 8007080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007088:	e7d5      	b.n	8007036 <__d2b+0x2e>
 800708a:	6161      	str	r1, [r4, #20]
 800708c:	e7e5      	b.n	800705a <__d2b+0x52>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fd5a 	bl	8006b48 <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	2201      	movs	r2, #1
 800709a:	6122      	str	r2, [r4, #16]
 800709c:	3020      	adds	r0, #32
 800709e:	e7e3      	b.n	8007068 <__d2b+0x60>
 80070a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070a8:	f8c9 0000 	str.w	r0, [r9]
 80070ac:	6918      	ldr	r0, [r3, #16]
 80070ae:	f7ff fd2b 	bl	8006b08 <__hi0bits>
 80070b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b6:	e7df      	b.n	8007078 <__d2b+0x70>
 80070b8:	080095df 	.word	0x080095df
 80070bc:	080095f0 	.word	0x080095f0

080070c0 <_calloc_r>:
 80070c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070c2:	fba1 2402 	umull	r2, r4, r1, r2
 80070c6:	b94c      	cbnz	r4, 80070dc <_calloc_r+0x1c>
 80070c8:	4611      	mov	r1, r2
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	f000 f87a 	bl	80071c4 <_malloc_r>
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	4605      	mov	r5, r0
 80070d4:	b930      	cbnz	r0, 80070e4 <_calloc_r+0x24>
 80070d6:	4628      	mov	r0, r5
 80070d8:	b003      	add	sp, #12
 80070da:	bd30      	pop	{r4, r5, pc}
 80070dc:	220c      	movs	r2, #12
 80070de:	6002      	str	r2, [r0, #0]
 80070e0:	2500      	movs	r5, #0
 80070e2:	e7f8      	b.n	80070d6 <_calloc_r+0x16>
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7fe f941 	bl	800536c <memset>
 80070ea:	e7f4      	b.n	80070d6 <_calloc_r+0x16>

080070ec <_free_r>:
 80070ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ee:	2900      	cmp	r1, #0
 80070f0:	d044      	beq.n	800717c <_free_r+0x90>
 80070f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f6:	9001      	str	r0, [sp, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f1a1 0404 	sub.w	r4, r1, #4
 80070fe:	bfb8      	it	lt
 8007100:	18e4      	addlt	r4, r4, r3
 8007102:	f000 fa9b 	bl	800763c <__malloc_lock>
 8007106:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <_free_r+0x94>)
 8007108:	9801      	ldr	r0, [sp, #4]
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x30>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007118:	f000 ba96 	b.w	8007648 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x46>
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	1961      	adds	r1, r4, r5
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1949      	addeq	r1, r1, r5
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x22>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x50>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x46>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1855      	adds	r5, r2, r1
 8007140:	42a5      	cmp	r5, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x70>
 8007144:	6824      	ldr	r4, [r4, #0]
 8007146:	4421      	add	r1, r4
 8007148:	1854      	adds	r4, r2, r1
 800714a:	42a3      	cmp	r3, r4
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x26>
 8007150:	681c      	ldr	r4, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	6053      	str	r3, [r2, #4]
 8007156:	4421      	add	r1, r4
 8007158:	6011      	str	r1, [r2, #0]
 800715a:	e7da      	b.n	8007112 <_free_r+0x26>
 800715c:	d902      	bls.n	8007164 <_free_r+0x78>
 800715e:	230c      	movs	r3, #12
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x26>
 8007164:	6825      	ldr	r5, [r4, #0]
 8007166:	1961      	adds	r1, r4, r5
 8007168:	428b      	cmp	r3, r1
 800716a:	bf04      	itt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	bf04      	itt	eq
 8007174:	1949      	addeq	r1, r1, r5
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	e7ca      	b.n	8007112 <_free_r+0x26>
 800717c:	b003      	add	sp, #12
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	200003d0 	.word	0x200003d0

08007184 <sbrk_aligned>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4e0e      	ldr	r6, [pc, #56]	; (80071c0 <sbrk_aligned+0x3c>)
 8007188:	460c      	mov	r4, r1
 800718a:	6831      	ldr	r1, [r6, #0]
 800718c:	4605      	mov	r5, r0
 800718e:	b911      	cbnz	r1, 8007196 <sbrk_aligned+0x12>
 8007190:	f000 f9e8 	bl	8007564 <_sbrk_r>
 8007194:	6030      	str	r0, [r6, #0]
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f9e3 	bl	8007564 <_sbrk_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d00a      	beq.n	80071b8 <sbrk_aligned+0x34>
 80071a2:	1cc4      	adds	r4, r0, #3
 80071a4:	f024 0403 	bic.w	r4, r4, #3
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d007      	beq.n	80071bc <sbrk_aligned+0x38>
 80071ac:	1a21      	subs	r1, r4, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f9d8 	bl	8007564 <_sbrk_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d101      	bne.n	80071bc <sbrk_aligned+0x38>
 80071b8:	f04f 34ff 	mov.w	r4, #4294967295
 80071bc:	4620      	mov	r0, r4
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	200003d4 	.word	0x200003d4

080071c4 <_malloc_r>:
 80071c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	1ccd      	adds	r5, r1, #3
 80071ca:	f025 0503 	bic.w	r5, r5, #3
 80071ce:	3508      	adds	r5, #8
 80071d0:	2d0c      	cmp	r5, #12
 80071d2:	bf38      	it	cc
 80071d4:	250c      	movcc	r5, #12
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	4607      	mov	r7, r0
 80071da:	db01      	blt.n	80071e0 <_malloc_r+0x1c>
 80071dc:	42a9      	cmp	r1, r5
 80071de:	d905      	bls.n	80071ec <_malloc_r+0x28>
 80071e0:	230c      	movs	r3, #12
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	2600      	movs	r6, #0
 80071e6:	4630      	mov	r0, r6
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	4e2e      	ldr	r6, [pc, #184]	; (80072a8 <_malloc_r+0xe4>)
 80071ee:	f000 fa25 	bl	800763c <__malloc_lock>
 80071f2:	6833      	ldr	r3, [r6, #0]
 80071f4:	461c      	mov	r4, r3
 80071f6:	bb34      	cbnz	r4, 8007246 <_malloc_r+0x82>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4638      	mov	r0, r7
 80071fc:	f7ff ffc2 	bl	8007184 <sbrk_aligned>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	4604      	mov	r4, r0
 8007204:	d14d      	bne.n	80072a2 <_malloc_r+0xde>
 8007206:	6834      	ldr	r4, [r6, #0]
 8007208:	4626      	mov	r6, r4
 800720a:	2e00      	cmp	r6, #0
 800720c:	d140      	bne.n	8007290 <_malloc_r+0xcc>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	4631      	mov	r1, r6
 8007212:	4638      	mov	r0, r7
 8007214:	eb04 0803 	add.w	r8, r4, r3
 8007218:	f000 f9a4 	bl	8007564 <_sbrk_r>
 800721c:	4580      	cmp	r8, r0
 800721e:	d13a      	bne.n	8007296 <_malloc_r+0xd2>
 8007220:	6821      	ldr	r1, [r4, #0]
 8007222:	3503      	adds	r5, #3
 8007224:	1a6d      	subs	r5, r5, r1
 8007226:	f025 0503 	bic.w	r5, r5, #3
 800722a:	3508      	adds	r5, #8
 800722c:	2d0c      	cmp	r5, #12
 800722e:	bf38      	it	cc
 8007230:	250c      	movcc	r5, #12
 8007232:	4629      	mov	r1, r5
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ffa5 	bl	8007184 <sbrk_aligned>
 800723a:	3001      	adds	r0, #1
 800723c:	d02b      	beq.n	8007296 <_malloc_r+0xd2>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	442b      	add	r3, r5
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	e00e      	b.n	8007264 <_malloc_r+0xa0>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	1b52      	subs	r2, r2, r5
 800724a:	d41e      	bmi.n	800728a <_malloc_r+0xc6>
 800724c:	2a0b      	cmp	r2, #11
 800724e:	d916      	bls.n	800727e <_malloc_r+0xba>
 8007250:	1961      	adds	r1, r4, r5
 8007252:	42a3      	cmp	r3, r4
 8007254:	6025      	str	r5, [r4, #0]
 8007256:	bf18      	it	ne
 8007258:	6059      	strne	r1, [r3, #4]
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	bf08      	it	eq
 800725e:	6031      	streq	r1, [r6, #0]
 8007260:	5162      	str	r2, [r4, r5]
 8007262:	604b      	str	r3, [r1, #4]
 8007264:	4638      	mov	r0, r7
 8007266:	f104 060b 	add.w	r6, r4, #11
 800726a:	f000 f9ed 	bl	8007648 <__malloc_unlock>
 800726e:	f026 0607 	bic.w	r6, r6, #7
 8007272:	1d23      	adds	r3, r4, #4
 8007274:	1af2      	subs	r2, r6, r3
 8007276:	d0b6      	beq.n	80071e6 <_malloc_r+0x22>
 8007278:	1b9b      	subs	r3, r3, r6
 800727a:	50a3      	str	r3, [r4, r2]
 800727c:	e7b3      	b.n	80071e6 <_malloc_r+0x22>
 800727e:	6862      	ldr	r2, [r4, #4]
 8007280:	42a3      	cmp	r3, r4
 8007282:	bf0c      	ite	eq
 8007284:	6032      	streq	r2, [r6, #0]
 8007286:	605a      	strne	r2, [r3, #4]
 8007288:	e7ec      	b.n	8007264 <_malloc_r+0xa0>
 800728a:	4623      	mov	r3, r4
 800728c:	6864      	ldr	r4, [r4, #4]
 800728e:	e7b2      	b.n	80071f6 <_malloc_r+0x32>
 8007290:	4634      	mov	r4, r6
 8007292:	6876      	ldr	r6, [r6, #4]
 8007294:	e7b9      	b.n	800720a <_malloc_r+0x46>
 8007296:	230c      	movs	r3, #12
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4638      	mov	r0, r7
 800729c:	f000 f9d4 	bl	8007648 <__malloc_unlock>
 80072a0:	e7a1      	b.n	80071e6 <_malloc_r+0x22>
 80072a2:	6025      	str	r5, [r4, #0]
 80072a4:	e7de      	b.n	8007264 <_malloc_r+0xa0>
 80072a6:	bf00      	nop
 80072a8:	200003d0 	.word	0x200003d0

080072ac <__ssputs_r>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	688e      	ldr	r6, [r1, #8]
 80072b2:	429e      	cmp	r6, r3
 80072b4:	4682      	mov	sl, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	4690      	mov	r8, r2
 80072ba:	461f      	mov	r7, r3
 80072bc:	d838      	bhi.n	8007330 <__ssputs_r+0x84>
 80072be:	898a      	ldrh	r2, [r1, #12]
 80072c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072c4:	d032      	beq.n	800732c <__ssputs_r+0x80>
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	6909      	ldr	r1, [r1, #16]
 80072ca:	eba5 0901 	sub.w	r9, r5, r1
 80072ce:	6965      	ldr	r5, [r4, #20]
 80072d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d8:	3301      	adds	r3, #1
 80072da:	444b      	add	r3, r9
 80072dc:	106d      	asrs	r5, r5, #1
 80072de:	429d      	cmp	r5, r3
 80072e0:	bf38      	it	cc
 80072e2:	461d      	movcc	r5, r3
 80072e4:	0553      	lsls	r3, r2, #21
 80072e6:	d531      	bpl.n	800734c <__ssputs_r+0xa0>
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7ff ff6b 	bl	80071c4 <_malloc_r>
 80072ee:	4606      	mov	r6, r0
 80072f0:	b950      	cbnz	r0, 8007308 <__ssputs_r+0x5c>
 80072f2:	230c      	movs	r3, #12
 80072f4:	f8ca 3000 	str.w	r3, [sl]
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	6921      	ldr	r1, [r4, #16]
 800730a:	464a      	mov	r2, r9
 800730c:	f7ff fb46 	bl	800699c <memcpy>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	6126      	str	r6, [r4, #16]
 800731e:	6165      	str	r5, [r4, #20]
 8007320:	444e      	add	r6, r9
 8007322:	eba5 0509 	sub.w	r5, r5, r9
 8007326:	6026      	str	r6, [r4, #0]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	463e      	mov	r6, r7
 800732c:	42be      	cmp	r6, r7
 800732e:	d900      	bls.n	8007332 <__ssputs_r+0x86>
 8007330:	463e      	mov	r6, r7
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	4632      	mov	r2, r6
 8007336:	4641      	mov	r1, r8
 8007338:	f000 f966 	bl	8007608 <memmove>
 800733c:	68a3      	ldr	r3, [r4, #8]
 800733e:	1b9b      	subs	r3, r3, r6
 8007340:	60a3      	str	r3, [r4, #8]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	4433      	add	r3, r6
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	2000      	movs	r0, #0
 800734a:	e7db      	b.n	8007304 <__ssputs_r+0x58>
 800734c:	462a      	mov	r2, r5
 800734e:	f000 f981 	bl	8007654 <_realloc_r>
 8007352:	4606      	mov	r6, r0
 8007354:	2800      	cmp	r0, #0
 8007356:	d1e1      	bne.n	800731c <__ssputs_r+0x70>
 8007358:	6921      	ldr	r1, [r4, #16]
 800735a:	4650      	mov	r0, sl
 800735c:	f7ff fec6 	bl	80070ec <_free_r>
 8007360:	e7c7      	b.n	80072f2 <__ssputs_r+0x46>
	...

08007364 <_svfiprintf_r>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4698      	mov	r8, r3
 800736a:	898b      	ldrh	r3, [r1, #12]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	b09d      	sub	sp, #116	; 0x74
 8007370:	4607      	mov	r7, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4614      	mov	r4, r2
 8007376:	d50e      	bpl.n	8007396 <_svfiprintf_r+0x32>
 8007378:	690b      	ldr	r3, [r1, #16]
 800737a:	b963      	cbnz	r3, 8007396 <_svfiprintf_r+0x32>
 800737c:	2140      	movs	r1, #64	; 0x40
 800737e:	f7ff ff21 	bl	80071c4 <_malloc_r>
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	6128      	str	r0, [r5, #16]
 8007386:	b920      	cbnz	r0, 8007392 <_svfiprintf_r+0x2e>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e0d1      	b.n	8007536 <_svfiprintf_r+0x1d2>
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	616b      	str	r3, [r5, #20]
 8007396:	2300      	movs	r3, #0
 8007398:	9309      	str	r3, [sp, #36]	; 0x24
 800739a:	2320      	movs	r3, #32
 800739c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007550 <_svfiprintf_r+0x1ec>
 80073aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073ae:	f04f 0901 	mov.w	r9, #1
 80073b2:	4623      	mov	r3, r4
 80073b4:	469a      	mov	sl, r3
 80073b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ba:	b10a      	cbz	r2, 80073c0 <_svfiprintf_r+0x5c>
 80073bc:	2a25      	cmp	r2, #37	; 0x25
 80073be:	d1f9      	bne.n	80073b4 <_svfiprintf_r+0x50>
 80073c0:	ebba 0b04 	subs.w	fp, sl, r4
 80073c4:	d00b      	beq.n	80073de <_svfiprintf_r+0x7a>
 80073c6:	465b      	mov	r3, fp
 80073c8:	4622      	mov	r2, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ff6d 	bl	80072ac <__ssputs_r>
 80073d2:	3001      	adds	r0, #1
 80073d4:	f000 80aa 	beq.w	800752c <_svfiprintf_r+0x1c8>
 80073d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073da:	445a      	add	r2, fp
 80073dc:	9209      	str	r2, [sp, #36]	; 0x24
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80a2 	beq.w	800752c <_svfiprintf_r+0x1c8>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f2:	f10a 0a01 	add.w	sl, sl, #1
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007400:	4654      	mov	r4, sl
 8007402:	2205      	movs	r2, #5
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	4851      	ldr	r0, [pc, #324]	; (8007550 <_svfiprintf_r+0x1ec>)
 800740a:	f7f8 fef1 	bl	80001f0 <memchr>
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	b9d8      	cbnz	r0, 800744a <_svfiprintf_r+0xe6>
 8007412:	06d0      	lsls	r0, r2, #27
 8007414:	bf44      	itt	mi
 8007416:	2320      	movmi	r3, #32
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741c:	0711      	lsls	r1, r2, #28
 800741e:	bf44      	itt	mi
 8007420:	232b      	movmi	r3, #43	; 0x2b
 8007422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007426:	f89a 3000 	ldrb.w	r3, [sl]
 800742a:	2b2a      	cmp	r3, #42	; 0x2a
 800742c:	d015      	beq.n	800745a <_svfiprintf_r+0xf6>
 800742e:	9a07      	ldr	r2, [sp, #28]
 8007430:	4654      	mov	r4, sl
 8007432:	2000      	movs	r0, #0
 8007434:	f04f 0c0a 	mov.w	ip, #10
 8007438:	4621      	mov	r1, r4
 800743a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743e:	3b30      	subs	r3, #48	; 0x30
 8007440:	2b09      	cmp	r3, #9
 8007442:	d94e      	bls.n	80074e2 <_svfiprintf_r+0x17e>
 8007444:	b1b0      	cbz	r0, 8007474 <_svfiprintf_r+0x110>
 8007446:	9207      	str	r2, [sp, #28]
 8007448:	e014      	b.n	8007474 <_svfiprintf_r+0x110>
 800744a:	eba0 0308 	sub.w	r3, r0, r8
 800744e:	fa09 f303 	lsl.w	r3, r9, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	46a2      	mov	sl, r4
 8007458:	e7d2      	b.n	8007400 <_svfiprintf_r+0x9c>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	1d19      	adds	r1, r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	9103      	str	r1, [sp, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	bfbb      	ittet	lt
 8007466:	425b      	neglt	r3, r3
 8007468:	f042 0202 	orrlt.w	r2, r2, #2
 800746c:	9307      	strge	r3, [sp, #28]
 800746e:	9307      	strlt	r3, [sp, #28]
 8007470:	bfb8      	it	lt
 8007472:	9204      	strlt	r2, [sp, #16]
 8007474:	7823      	ldrb	r3, [r4, #0]
 8007476:	2b2e      	cmp	r3, #46	; 0x2e
 8007478:	d10c      	bne.n	8007494 <_svfiprintf_r+0x130>
 800747a:	7863      	ldrb	r3, [r4, #1]
 800747c:	2b2a      	cmp	r3, #42	; 0x2a
 800747e:	d135      	bne.n	80074ec <_svfiprintf_r+0x188>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	1d1a      	adds	r2, r3, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	9203      	str	r2, [sp, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfb8      	it	lt
 800748c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007490:	3402      	adds	r4, #2
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007560 <_svfiprintf_r+0x1fc>
 8007498:	7821      	ldrb	r1, [r4, #0]
 800749a:	2203      	movs	r2, #3
 800749c:	4650      	mov	r0, sl
 800749e:	f7f8 fea7 	bl	80001f0 <memchr>
 80074a2:	b140      	cbz	r0, 80074b6 <_svfiprintf_r+0x152>
 80074a4:	2340      	movs	r3, #64	; 0x40
 80074a6:	eba0 000a 	sub.w	r0, r0, sl
 80074aa:	fa03 f000 	lsl.w	r0, r3, r0
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	4303      	orrs	r3, r0
 80074b2:	3401      	adds	r4, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ba:	4826      	ldr	r0, [pc, #152]	; (8007554 <_svfiprintf_r+0x1f0>)
 80074bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c0:	2206      	movs	r2, #6
 80074c2:	f7f8 fe95 	bl	80001f0 <memchr>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d038      	beq.n	800753c <_svfiprintf_r+0x1d8>
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <_svfiprintf_r+0x1f4>)
 80074cc:	bb1b      	cbnz	r3, 8007516 <_svfiprintf_r+0x1b2>
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	3307      	adds	r3, #7
 80074d2:	f023 0307 	bic.w	r3, r3, #7
 80074d6:	3308      	adds	r3, #8
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	4433      	add	r3, r6
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	e767      	b.n	80073b2 <_svfiprintf_r+0x4e>
 80074e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e6:	460c      	mov	r4, r1
 80074e8:	2001      	movs	r0, #1
 80074ea:	e7a5      	b.n	8007438 <_svfiprintf_r+0xd4>
 80074ec:	2300      	movs	r3, #0
 80074ee:	3401      	adds	r4, #1
 80074f0:	9305      	str	r3, [sp, #20]
 80074f2:	4619      	mov	r1, r3
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	4620      	mov	r0, r4
 80074fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fe:	3a30      	subs	r2, #48	; 0x30
 8007500:	2a09      	cmp	r2, #9
 8007502:	d903      	bls.n	800750c <_svfiprintf_r+0x1a8>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0c5      	beq.n	8007494 <_svfiprintf_r+0x130>
 8007508:	9105      	str	r1, [sp, #20]
 800750a:	e7c3      	b.n	8007494 <_svfiprintf_r+0x130>
 800750c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007510:	4604      	mov	r4, r0
 8007512:	2301      	movs	r3, #1
 8007514:	e7f0      	b.n	80074f8 <_svfiprintf_r+0x194>
 8007516:	ab03      	add	r3, sp, #12
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	462a      	mov	r2, r5
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <_svfiprintf_r+0x1f8>)
 800751e:	a904      	add	r1, sp, #16
 8007520:	4638      	mov	r0, r7
 8007522:	f7fd ffcb 	bl	80054bc <_printf_float>
 8007526:	1c42      	adds	r2, r0, #1
 8007528:	4606      	mov	r6, r0
 800752a:	d1d6      	bne.n	80074da <_svfiprintf_r+0x176>
 800752c:	89ab      	ldrh	r3, [r5, #12]
 800752e:	065b      	lsls	r3, r3, #25
 8007530:	f53f af2c 	bmi.w	800738c <_svfiprintf_r+0x28>
 8007534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007536:	b01d      	add	sp, #116	; 0x74
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	ab03      	add	r3, sp, #12
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	462a      	mov	r2, r5
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <_svfiprintf_r+0x1f8>)
 8007544:	a904      	add	r1, sp, #16
 8007546:	4638      	mov	r0, r7
 8007548:	f7fe fa5c 	bl	8005a04 <_printf_i>
 800754c:	e7eb      	b.n	8007526 <_svfiprintf_r+0x1c2>
 800754e:	bf00      	nop
 8007550:	0800974c 	.word	0x0800974c
 8007554:	08009756 	.word	0x08009756
 8007558:	080054bd 	.word	0x080054bd
 800755c:	080072ad 	.word	0x080072ad
 8007560:	08009752 	.word	0x08009752

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa ff1e 	bl	80023b0 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	200003d8 	.word	0x200003d8

08007584 <__assert_func>:
 8007584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007586:	4614      	mov	r4, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <__assert_func+0x2c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4605      	mov	r5, r0
 8007590:	68d8      	ldr	r0, [r3, #12]
 8007592:	b14c      	cbz	r4, 80075a8 <__assert_func+0x24>
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <__assert_func+0x30>)
 8007596:	9100      	str	r1, [sp, #0]
 8007598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800759c:	4906      	ldr	r1, [pc, #24]	; (80075b8 <__assert_func+0x34>)
 800759e:	462b      	mov	r3, r5
 80075a0:	f000 f80e 	bl	80075c0 <fiprintf>
 80075a4:	f000 faac 	bl	8007b00 <abort>
 80075a8:	4b04      	ldr	r3, [pc, #16]	; (80075bc <__assert_func+0x38>)
 80075aa:	461c      	mov	r4, r3
 80075ac:	e7f3      	b.n	8007596 <__assert_func+0x12>
 80075ae:	bf00      	nop
 80075b0:	2000009c 	.word	0x2000009c
 80075b4:	0800975d 	.word	0x0800975d
 80075b8:	0800976a 	.word	0x0800976a
 80075bc:	08009798 	.word	0x08009798

080075c0 <fiprintf>:
 80075c0:	b40e      	push	{r1, r2, r3}
 80075c2:	b503      	push	{r0, r1, lr}
 80075c4:	4601      	mov	r1, r0
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	4805      	ldr	r0, [pc, #20]	; (80075e0 <fiprintf+0x20>)
 80075ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ce:	6800      	ldr	r0, [r0, #0]
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	f000 f897 	bl	8007704 <_vfiprintf_r>
 80075d6:	b002      	add	sp, #8
 80075d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075dc:	b003      	add	sp, #12
 80075de:	4770      	bx	lr
 80075e0:	2000009c 	.word	0x2000009c

080075e4 <__ascii_mbtowc>:
 80075e4:	b082      	sub	sp, #8
 80075e6:	b901      	cbnz	r1, 80075ea <__ascii_mbtowc+0x6>
 80075e8:	a901      	add	r1, sp, #4
 80075ea:	b142      	cbz	r2, 80075fe <__ascii_mbtowc+0x1a>
 80075ec:	b14b      	cbz	r3, 8007602 <__ascii_mbtowc+0x1e>
 80075ee:	7813      	ldrb	r3, [r2, #0]
 80075f0:	600b      	str	r3, [r1, #0]
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	1e10      	subs	r0, r2, #0
 80075f6:	bf18      	it	ne
 80075f8:	2001      	movne	r0, #1
 80075fa:	b002      	add	sp, #8
 80075fc:	4770      	bx	lr
 80075fe:	4610      	mov	r0, r2
 8007600:	e7fb      	b.n	80075fa <__ascii_mbtowc+0x16>
 8007602:	f06f 0001 	mvn.w	r0, #1
 8007606:	e7f8      	b.n	80075fa <__ascii_mbtowc+0x16>

08007608 <memmove>:
 8007608:	4288      	cmp	r0, r1
 800760a:	b510      	push	{r4, lr}
 800760c:	eb01 0402 	add.w	r4, r1, r2
 8007610:	d902      	bls.n	8007618 <memmove+0x10>
 8007612:	4284      	cmp	r4, r0
 8007614:	4623      	mov	r3, r4
 8007616:	d807      	bhi.n	8007628 <memmove+0x20>
 8007618:	1e43      	subs	r3, r0, #1
 800761a:	42a1      	cmp	r1, r4
 800761c:	d008      	beq.n	8007630 <memmove+0x28>
 800761e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007626:	e7f8      	b.n	800761a <memmove+0x12>
 8007628:	4402      	add	r2, r0
 800762a:	4601      	mov	r1, r0
 800762c:	428a      	cmp	r2, r1
 800762e:	d100      	bne.n	8007632 <memmove+0x2a>
 8007630:	bd10      	pop	{r4, pc}
 8007632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763a:	e7f7      	b.n	800762c <memmove+0x24>

0800763c <__malloc_lock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_lock+0x8>)
 800763e:	f000 bc1f 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	200003dc 	.word	0x200003dc

08007648 <__malloc_unlock>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__malloc_unlock+0x8>)
 800764a:	f000 bc1a 	b.w	8007e82 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	200003dc 	.word	0x200003dc

08007654 <_realloc_r>:
 8007654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007658:	4680      	mov	r8, r0
 800765a:	4614      	mov	r4, r2
 800765c:	460e      	mov	r6, r1
 800765e:	b921      	cbnz	r1, 800766a <_realloc_r+0x16>
 8007660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	4611      	mov	r1, r2
 8007666:	f7ff bdad 	b.w	80071c4 <_malloc_r>
 800766a:	b92a      	cbnz	r2, 8007678 <_realloc_r+0x24>
 800766c:	f7ff fd3e 	bl	80070ec <_free_r>
 8007670:	4625      	mov	r5, r4
 8007672:	4628      	mov	r0, r5
 8007674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007678:	f000 fc6a 	bl	8007f50 <_malloc_usable_size_r>
 800767c:	4284      	cmp	r4, r0
 800767e:	4607      	mov	r7, r0
 8007680:	d802      	bhi.n	8007688 <_realloc_r+0x34>
 8007682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007686:	d812      	bhi.n	80076ae <_realloc_r+0x5a>
 8007688:	4621      	mov	r1, r4
 800768a:	4640      	mov	r0, r8
 800768c:	f7ff fd9a 	bl	80071c4 <_malloc_r>
 8007690:	4605      	mov	r5, r0
 8007692:	2800      	cmp	r0, #0
 8007694:	d0ed      	beq.n	8007672 <_realloc_r+0x1e>
 8007696:	42bc      	cmp	r4, r7
 8007698:	4622      	mov	r2, r4
 800769a:	4631      	mov	r1, r6
 800769c:	bf28      	it	cs
 800769e:	463a      	movcs	r2, r7
 80076a0:	f7ff f97c 	bl	800699c <memcpy>
 80076a4:	4631      	mov	r1, r6
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7ff fd20 	bl	80070ec <_free_r>
 80076ac:	e7e1      	b.n	8007672 <_realloc_r+0x1e>
 80076ae:	4635      	mov	r5, r6
 80076b0:	e7df      	b.n	8007672 <_realloc_r+0x1e>

080076b2 <__sfputc_r>:
 80076b2:	6893      	ldr	r3, [r2, #8]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	b410      	push	{r4}
 80076ba:	6093      	str	r3, [r2, #8]
 80076bc:	da08      	bge.n	80076d0 <__sfputc_r+0x1e>
 80076be:	6994      	ldr	r4, [r2, #24]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	db01      	blt.n	80076c8 <__sfputc_r+0x16>
 80076c4:	290a      	cmp	r1, #10
 80076c6:	d103      	bne.n	80076d0 <__sfputc_r+0x1e>
 80076c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076cc:	f000 b94a 	b.w	8007964 <__swbuf_r>
 80076d0:	6813      	ldr	r3, [r2, #0]
 80076d2:	1c58      	adds	r0, r3, #1
 80076d4:	6010      	str	r0, [r2, #0]
 80076d6:	7019      	strb	r1, [r3, #0]
 80076d8:	4608      	mov	r0, r1
 80076da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <__sfputs_r>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	4606      	mov	r6, r0
 80076e4:	460f      	mov	r7, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	18d5      	adds	r5, r2, r3
 80076ea:	42ac      	cmp	r4, r5
 80076ec:	d101      	bne.n	80076f2 <__sfputs_r+0x12>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e007      	b.n	8007702 <__sfputs_r+0x22>
 80076f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f6:	463a      	mov	r2, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff ffda 	bl	80076b2 <__sfputc_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d1f3      	bne.n	80076ea <__sfputs_r+0xa>
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007704 <_vfiprintf_r>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	460d      	mov	r5, r1
 800770a:	b09d      	sub	sp, #116	; 0x74
 800770c:	4614      	mov	r4, r2
 800770e:	4698      	mov	r8, r3
 8007710:	4606      	mov	r6, r0
 8007712:	b118      	cbz	r0, 800771c <_vfiprintf_r+0x18>
 8007714:	6983      	ldr	r3, [r0, #24]
 8007716:	b90b      	cbnz	r3, 800771c <_vfiprintf_r+0x18>
 8007718:	f000 fb14 	bl	8007d44 <__sinit>
 800771c:	4b89      	ldr	r3, [pc, #548]	; (8007944 <_vfiprintf_r+0x240>)
 800771e:	429d      	cmp	r5, r3
 8007720:	d11b      	bne.n	800775a <_vfiprintf_r+0x56>
 8007722:	6875      	ldr	r5, [r6, #4]
 8007724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x32>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x32>
 8007730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007732:	f000 fba5 	bl	8007e80 <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x3c>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b9eb      	cbnz	r3, 800777c <_vfiprintf_r+0x78>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f96e 	bl	8007a24 <__swsetup_r>
 8007748:	b1c0      	cbz	r0, 800777c <_vfiprintf_r+0x78>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d50e      	bpl.n	800776e <_vfiprintf_r+0x6a>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	b01d      	add	sp, #116	; 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <_vfiprintf_r+0x244>)
 800775c:	429d      	cmp	r5, r3
 800775e:	d101      	bne.n	8007764 <_vfiprintf_r+0x60>
 8007760:	68b5      	ldr	r5, [r6, #8]
 8007762:	e7df      	b.n	8007724 <_vfiprintf_r+0x20>
 8007764:	4b79      	ldr	r3, [pc, #484]	; (800794c <_vfiprintf_r+0x248>)
 8007766:	429d      	cmp	r5, r3
 8007768:	bf08      	it	eq
 800776a:	68f5      	ldreq	r5, [r6, #12]
 800776c:	e7da      	b.n	8007724 <_vfiprintf_r+0x20>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	0598      	lsls	r0, r3, #22
 8007772:	d4ed      	bmi.n	8007750 <_vfiprintf_r+0x4c>
 8007774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007776:	f000 fb84 	bl	8007e82 <__retarget_lock_release_recursive>
 800777a:	e7e9      	b.n	8007750 <_vfiprintf_r+0x4c>
 800777c:	2300      	movs	r3, #0
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	2320      	movs	r3, #32
 8007782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007786:	f8cd 800c 	str.w	r8, [sp, #12]
 800778a:	2330      	movs	r3, #48	; 0x30
 800778c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007950 <_vfiprintf_r+0x24c>
 8007790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007794:	f04f 0901 	mov.w	r9, #1
 8007798:	4623      	mov	r3, r4
 800779a:	469a      	mov	sl, r3
 800779c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a0:	b10a      	cbz	r2, 80077a6 <_vfiprintf_r+0xa2>
 80077a2:	2a25      	cmp	r2, #37	; 0x25
 80077a4:	d1f9      	bne.n	800779a <_vfiprintf_r+0x96>
 80077a6:	ebba 0b04 	subs.w	fp, sl, r4
 80077aa:	d00b      	beq.n	80077c4 <_vfiprintf_r+0xc0>
 80077ac:	465b      	mov	r3, fp
 80077ae:	4622      	mov	r2, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff94 	bl	80076e0 <__sfputs_r>
 80077b8:	3001      	adds	r0, #1
 80077ba:	f000 80aa 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c0:	445a      	add	r2, fp
 80077c2:	9209      	str	r2, [sp, #36]	; 0x24
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a2 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f04f 32ff 	mov.w	r2, #4294967295
 80077d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d8:	f10a 0a01 	add.w	sl, sl, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e4:	931a      	str	r3, [sp, #104]	; 0x68
 80077e6:	4654      	mov	r4, sl
 80077e8:	2205      	movs	r2, #5
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	4858      	ldr	r0, [pc, #352]	; (8007950 <_vfiprintf_r+0x24c>)
 80077f0:	f7f8 fcfe 	bl	80001f0 <memchr>
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	b9d8      	cbnz	r0, 8007830 <_vfiprintf_r+0x12c>
 80077f8:	06d1      	lsls	r1, r2, #27
 80077fa:	bf44      	itt	mi
 80077fc:	2320      	movmi	r3, #32
 80077fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007802:	0713      	lsls	r3, r2, #28
 8007804:	bf44      	itt	mi
 8007806:	232b      	movmi	r3, #43	; 0x2b
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780c:	f89a 3000 	ldrb.w	r3, [sl]
 8007810:	2b2a      	cmp	r3, #42	; 0x2a
 8007812:	d015      	beq.n	8007840 <_vfiprintf_r+0x13c>
 8007814:	9a07      	ldr	r2, [sp, #28]
 8007816:	4654      	mov	r4, sl
 8007818:	2000      	movs	r0, #0
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	4621      	mov	r1, r4
 8007820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007824:	3b30      	subs	r3, #48	; 0x30
 8007826:	2b09      	cmp	r3, #9
 8007828:	d94e      	bls.n	80078c8 <_vfiprintf_r+0x1c4>
 800782a:	b1b0      	cbz	r0, 800785a <_vfiprintf_r+0x156>
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	e014      	b.n	800785a <_vfiprintf_r+0x156>
 8007830:	eba0 0308 	sub.w	r3, r0, r8
 8007834:	fa09 f303 	lsl.w	r3, r9, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	46a2      	mov	sl, r4
 800783e:	e7d2      	b.n	80077e6 <_vfiprintf_r+0xe2>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	1d19      	adds	r1, r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	9103      	str	r1, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfbb      	ittet	lt
 800784c:	425b      	neglt	r3, r3
 800784e:	f042 0202 	orrlt.w	r2, r2, #2
 8007852:	9307      	strge	r3, [sp, #28]
 8007854:	9307      	strlt	r3, [sp, #28]
 8007856:	bfb8      	it	lt
 8007858:	9204      	strlt	r2, [sp, #16]
 800785a:	7823      	ldrb	r3, [r4, #0]
 800785c:	2b2e      	cmp	r3, #46	; 0x2e
 800785e:	d10c      	bne.n	800787a <_vfiprintf_r+0x176>
 8007860:	7863      	ldrb	r3, [r4, #1]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d135      	bne.n	80078d2 <_vfiprintf_r+0x1ce>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	1d1a      	adds	r2, r3, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	9203      	str	r2, [sp, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfb8      	it	lt
 8007872:	f04f 33ff 	movlt.w	r3, #4294967295
 8007876:	3402      	adds	r4, #2
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007960 <_vfiprintf_r+0x25c>
 800787e:	7821      	ldrb	r1, [r4, #0]
 8007880:	2203      	movs	r2, #3
 8007882:	4650      	mov	r0, sl
 8007884:	f7f8 fcb4 	bl	80001f0 <memchr>
 8007888:	b140      	cbz	r0, 800789c <_vfiprintf_r+0x198>
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	eba0 000a 	sub.w	r0, r0, sl
 8007890:	fa03 f000 	lsl.w	r0, r3, r0
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	4303      	orrs	r3, r0
 8007898:	3401      	adds	r4, #1
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	482c      	ldr	r0, [pc, #176]	; (8007954 <_vfiprintf_r+0x250>)
 80078a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a6:	2206      	movs	r2, #6
 80078a8:	f7f8 fca2 	bl	80001f0 <memchr>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d03f      	beq.n	8007930 <_vfiprintf_r+0x22c>
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <_vfiprintf_r+0x254>)
 80078b2:	bb1b      	cbnz	r3, 80078fc <_vfiprintf_r+0x1f8>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	3308      	adds	r3, #8
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	443b      	add	r3, r7
 80078c4:	9309      	str	r3, [sp, #36]	; 0x24
 80078c6:	e767      	b.n	8007798 <_vfiprintf_r+0x94>
 80078c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078cc:	460c      	mov	r4, r1
 80078ce:	2001      	movs	r0, #1
 80078d0:	e7a5      	b.n	800781e <_vfiprintf_r+0x11a>
 80078d2:	2300      	movs	r3, #0
 80078d4:	3401      	adds	r4, #1
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	4619      	mov	r1, r3
 80078da:	f04f 0c0a 	mov.w	ip, #10
 80078de:	4620      	mov	r0, r4
 80078e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e4:	3a30      	subs	r2, #48	; 0x30
 80078e6:	2a09      	cmp	r2, #9
 80078e8:	d903      	bls.n	80078f2 <_vfiprintf_r+0x1ee>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c5      	beq.n	800787a <_vfiprintf_r+0x176>
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	e7c3      	b.n	800787a <_vfiprintf_r+0x176>
 80078f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f6:	4604      	mov	r4, r0
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f0      	b.n	80078de <_vfiprintf_r+0x1da>
 80078fc:	ab03      	add	r3, sp, #12
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	462a      	mov	r2, r5
 8007902:	4b16      	ldr	r3, [pc, #88]	; (800795c <_vfiprintf_r+0x258>)
 8007904:	a904      	add	r1, sp, #16
 8007906:	4630      	mov	r0, r6
 8007908:	f7fd fdd8 	bl	80054bc <_printf_float>
 800790c:	4607      	mov	r7, r0
 800790e:	1c78      	adds	r0, r7, #1
 8007910:	d1d6      	bne.n	80078c0 <_vfiprintf_r+0x1bc>
 8007912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d405      	bmi.n	8007924 <_vfiprintf_r+0x220>
 8007918:	89ab      	ldrh	r3, [r5, #12]
 800791a:	059a      	lsls	r2, r3, #22
 800791c:	d402      	bmi.n	8007924 <_vfiprintf_r+0x220>
 800791e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007920:	f000 faaf 	bl	8007e82 <__retarget_lock_release_recursive>
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	065b      	lsls	r3, r3, #25
 8007928:	f53f af12 	bmi.w	8007750 <_vfiprintf_r+0x4c>
 800792c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800792e:	e711      	b.n	8007754 <_vfiprintf_r+0x50>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <_vfiprintf_r+0x258>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4630      	mov	r0, r6
 800793c:	f7fe f862 	bl	8005a04 <_printf_i>
 8007940:	e7e4      	b.n	800790c <_vfiprintf_r+0x208>
 8007942:	bf00      	nop
 8007944:	080098c4 	.word	0x080098c4
 8007948:	080098e4 	.word	0x080098e4
 800794c:	080098a4 	.word	0x080098a4
 8007950:	0800974c 	.word	0x0800974c
 8007954:	08009756 	.word	0x08009756
 8007958:	080054bd 	.word	0x080054bd
 800795c:	080076e1 	.word	0x080076e1
 8007960:	08009752 	.word	0x08009752

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4605      	mov	r5, r0
 800796c:	b118      	cbz	r0, 8007976 <__swbuf_r+0x12>
 800796e:	6983      	ldr	r3, [r0, #24]
 8007970:	b90b      	cbnz	r3, 8007976 <__swbuf_r+0x12>
 8007972:	f000 f9e7 	bl	8007d44 <__sinit>
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <__swbuf_r+0x98>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d12b      	bne.n	80079d4 <__swbuf_r+0x70>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d52f      	bpl.n	80079e8 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b36b      	cbz	r3, 80079e8 <__swbuf_r+0x84>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	1ac0      	subs	r0, r0, r3
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	b2f6      	uxtb	r6, r6
 8007996:	4283      	cmp	r3, r0
 8007998:	4637      	mov	r7, r6
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x42>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f93c 	bl	8007c1c <_fflush_r>
 80079a4:	bb30      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	701e      	strb	r6, [r3, #0]
 80079b4:	6963      	ldr	r3, [r4, #20]
 80079b6:	3001      	adds	r0, #1
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x62>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x6c>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x6c>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 f927 	bl	8007c1c <_fflush_r>
 80079ce:	b988      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <__swbuf_r+0x9c>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d101      	bne.n	80079de <__swbuf_r+0x7a>
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	e7cf      	b.n	800797e <__swbuf_r+0x1a>
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__swbuf_r+0xa0>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	bf08      	it	eq
 80079e4:	68ec      	ldreq	r4, [r5, #12]
 80079e6:	e7ca      	b.n	800797e <__swbuf_r+0x1a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f81a 	bl	8007a24 <__swsetup_r>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d0cb      	beq.n	800798c <__swbuf_r+0x28>
 80079f4:	f04f 37ff 	mov.w	r7, #4294967295
 80079f8:	e7ea      	b.n	80079d0 <__swbuf_r+0x6c>
 80079fa:	bf00      	nop
 80079fc:	080098c4 	.word	0x080098c4
 8007a00:	080098e4 	.word	0x080098e4
 8007a04:	080098a4 	.word	0x080098a4

08007a08 <__ascii_wctomb>:
 8007a08:	b149      	cbz	r1, 8007a1e <__ascii_wctomb+0x16>
 8007a0a:	2aff      	cmp	r2, #255	; 0xff
 8007a0c:	bf85      	ittet	hi
 8007a0e:	238a      	movhi	r3, #138	; 0x8a
 8007a10:	6003      	strhi	r3, [r0, #0]
 8007a12:	700a      	strbls	r2, [r1, #0]
 8007a14:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a18:	bf98      	it	ls
 8007a1a:	2001      	movls	r0, #1
 8007a1c:	4770      	bx	lr
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4770      	bx	lr
	...

08007a24 <__swsetup_r>:
 8007a24:	4b32      	ldr	r3, [pc, #200]	; (8007af0 <__swsetup_r+0xcc>)
 8007a26:	b570      	push	{r4, r5, r6, lr}
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	b125      	cbz	r5, 8007a3a <__swsetup_r+0x16>
 8007a30:	69ab      	ldr	r3, [r5, #24]
 8007a32:	b913      	cbnz	r3, 8007a3a <__swsetup_r+0x16>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f000 f985 	bl	8007d44 <__sinit>
 8007a3a:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <__swsetup_r+0xd0>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	d10f      	bne.n	8007a60 <__swsetup_r+0x3c>
 8007a40:	686c      	ldr	r4, [r5, #4]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a48:	0719      	lsls	r1, r3, #28
 8007a4a:	d42c      	bmi.n	8007aa6 <__swsetup_r+0x82>
 8007a4c:	06dd      	lsls	r5, r3, #27
 8007a4e:	d411      	bmi.n	8007a74 <__swsetup_r+0x50>
 8007a50:	2309      	movs	r3, #9
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a58:	81a3      	strh	r3, [r4, #12]
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	e03e      	b.n	8007ade <__swsetup_r+0xba>
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <__swsetup_r+0xd4>)
 8007a62:	429c      	cmp	r4, r3
 8007a64:	d101      	bne.n	8007a6a <__swsetup_r+0x46>
 8007a66:	68ac      	ldr	r4, [r5, #8]
 8007a68:	e7eb      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <__swsetup_r+0xd8>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	bf08      	it	eq
 8007a70:	68ec      	ldreq	r4, [r5, #12]
 8007a72:	e7e6      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a74:	0758      	lsls	r0, r3, #29
 8007a76:	d512      	bpl.n	8007a9e <__swsetup_r+0x7a>
 8007a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7a:	b141      	cbz	r1, 8007a8e <__swsetup_r+0x6a>
 8007a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d002      	beq.n	8007a8a <__swsetup_r+0x66>
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff fb31 	bl	80070ec <_free_r>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f043 0308 	orr.w	r3, r3, #8
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	b94b      	cbnz	r3, 8007abe <__swsetup_r+0x9a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab4:	d003      	beq.n	8007abe <__swsetup_r+0x9a>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 fa09 	bl	8007ed0 <__smakebuf_r>
 8007abe:	89a0      	ldrh	r0, [r4, #12]
 8007ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac4:	f010 0301 	ands.w	r3, r0, #1
 8007ac8:	d00a      	beq.n	8007ae0 <__swsetup_r+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	6963      	ldr	r3, [r4, #20]
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	61a3      	str	r3, [r4, #24]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	b943      	cbnz	r3, 8007aea <__swsetup_r+0xc6>
 8007ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007adc:	d1ba      	bne.n	8007a54 <__swsetup_r+0x30>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	0781      	lsls	r1, r0, #30
 8007ae2:	bf58      	it	pl
 8007ae4:	6963      	ldrpl	r3, [r4, #20]
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	e7f4      	b.n	8007ad4 <__swsetup_r+0xb0>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7f7      	b.n	8007ade <__swsetup_r+0xba>
 8007aee:	bf00      	nop
 8007af0:	2000009c 	.word	0x2000009c
 8007af4:	080098c4 	.word	0x080098c4
 8007af8:	080098e4 	.word	0x080098e4
 8007afc:	080098a4 	.word	0x080098a4

08007b00 <abort>:
 8007b00:	b508      	push	{r3, lr}
 8007b02:	2006      	movs	r0, #6
 8007b04:	f000 fa54 	bl	8007fb0 <raise>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7fa fbd9 	bl	80022c0 <_exit>
	...

08007b10 <__sflush_r>:
 8007b10:	898a      	ldrh	r2, [r1, #12]
 8007b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	4605      	mov	r5, r0
 8007b18:	0710      	lsls	r0, r2, #28
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	d458      	bmi.n	8007bd0 <__sflush_r+0xc0>
 8007b1e:	684b      	ldr	r3, [r1, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc05      	bgt.n	8007b30 <__sflush_r+0x20>
 8007b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dc02      	bgt.n	8007b30 <__sflush_r+0x20>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d0f9      	beq.n	8007b2a <__sflush_r+0x1a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b3c:	682f      	ldr	r7, [r5, #0]
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	d032      	beq.n	8007ba8 <__sflush_r+0x98>
 8007b42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	075a      	lsls	r2, r3, #29
 8007b48:	d505      	bpl.n	8007b56 <__sflush_r+0x46>
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	1ac0      	subs	r0, r0, r3
 8007b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b50:	b10b      	cbz	r3, 8007b56 <__sflush_r+0x46>
 8007b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b54:	1ac0      	subs	r0, r0, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b5c:	6a21      	ldr	r1, [r4, #32]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b0      	blx	r6
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	d106      	bne.n	8007b76 <__sflush_r+0x66>
 8007b68:	6829      	ldr	r1, [r5, #0]
 8007b6a:	291d      	cmp	r1, #29
 8007b6c:	d82c      	bhi.n	8007bc8 <__sflush_r+0xb8>
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <__sflush_r+0x108>)
 8007b70:	40ca      	lsrs	r2, r1
 8007b72:	07d6      	lsls	r6, r2, #31
 8007b74:	d528      	bpl.n	8007bc8 <__sflush_r+0xb8>
 8007b76:	2200      	movs	r2, #0
 8007b78:	6062      	str	r2, [r4, #4]
 8007b7a:	04d9      	lsls	r1, r3, #19
 8007b7c:	6922      	ldr	r2, [r4, #16]
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	d504      	bpl.n	8007b8c <__sflush_r+0x7c>
 8007b82:	1c42      	adds	r2, r0, #1
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0x7a>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b903      	cbnz	r3, 8007b8c <__sflush_r+0x7c>
 8007b8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8e:	602f      	str	r7, [r5, #0]
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d0ca      	beq.n	8007b2a <__sflush_r+0x1a>
 8007b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	d002      	beq.n	8007ba2 <__sflush_r+0x92>
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f7ff faa5 	bl	80070ec <_free_r>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ba6:	e7c1      	b.n	8007b2c <__sflush_r+0x1c>
 8007ba8:	6a21      	ldr	r1, [r4, #32]
 8007baa:	2301      	movs	r3, #1
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b0      	blx	r6
 8007bb0:	1c41      	adds	r1, r0, #1
 8007bb2:	d1c7      	bne.n	8007b44 <__sflush_r+0x34>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0c4      	beq.n	8007b44 <__sflush_r+0x34>
 8007bba:	2b1d      	cmp	r3, #29
 8007bbc:	d001      	beq.n	8007bc2 <__sflush_r+0xb2>
 8007bbe:	2b16      	cmp	r3, #22
 8007bc0:	d101      	bne.n	8007bc6 <__sflush_r+0xb6>
 8007bc2:	602f      	str	r7, [r5, #0]
 8007bc4:	e7b1      	b.n	8007b2a <__sflush_r+0x1a>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	e7ad      	b.n	8007b2c <__sflush_r+0x1c>
 8007bd0:	690f      	ldr	r7, [r1, #16]
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	d0a9      	beq.n	8007b2a <__sflush_r+0x1a>
 8007bd6:	0793      	lsls	r3, r2, #30
 8007bd8:	680e      	ldr	r6, [r1, #0]
 8007bda:	bf08      	it	eq
 8007bdc:	694b      	ldreq	r3, [r1, #20]
 8007bde:	600f      	str	r7, [r1, #0]
 8007be0:	bf18      	it	ne
 8007be2:	2300      	movne	r3, #0
 8007be4:	eba6 0807 	sub.w	r8, r6, r7
 8007be8:	608b      	str	r3, [r1, #8]
 8007bea:	f1b8 0f00 	cmp.w	r8, #0
 8007bee:	dd9c      	ble.n	8007b2a <__sflush_r+0x1a>
 8007bf0:	6a21      	ldr	r1, [r4, #32]
 8007bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bf4:	4643      	mov	r3, r8
 8007bf6:	463a      	mov	r2, r7
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b0      	blx	r6
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	dc06      	bgt.n	8007c0e <__sflush_r+0xfe>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	e78e      	b.n	8007b2c <__sflush_r+0x1c>
 8007c0e:	4407      	add	r7, r0
 8007c10:	eba8 0800 	sub.w	r8, r8, r0
 8007c14:	e7e9      	b.n	8007bea <__sflush_r+0xda>
 8007c16:	bf00      	nop
 8007c18:	20400001 	.word	0x20400001

08007c1c <_fflush_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	690b      	ldr	r3, [r1, #16]
 8007c20:	4605      	mov	r5, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b913      	cbnz	r3, 8007c2c <_fflush_r+0x10>
 8007c26:	2500      	movs	r5, #0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	b118      	cbz	r0, 8007c36 <_fflush_r+0x1a>
 8007c2e:	6983      	ldr	r3, [r0, #24]
 8007c30:	b90b      	cbnz	r3, 8007c36 <_fflush_r+0x1a>
 8007c32:	f000 f887 	bl	8007d44 <__sinit>
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <_fflush_r+0x6c>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d11b      	bne.n	8007c74 <_fflush_r+0x58>
 8007c3c:	686c      	ldr	r4, [r5, #4]
 8007c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0ef      	beq.n	8007c26 <_fflush_r+0xa>
 8007c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c48:	07d0      	lsls	r0, r2, #31
 8007c4a:	d404      	bmi.n	8007c56 <_fflush_r+0x3a>
 8007c4c:	0599      	lsls	r1, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <_fflush_r+0x3a>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f000 f915 	bl	8007e80 <__retarget_lock_acquire_recursive>
 8007c56:	4628      	mov	r0, r5
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f7ff ff59 	bl	8007b10 <__sflush_r>
 8007c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c60:	07da      	lsls	r2, r3, #31
 8007c62:	4605      	mov	r5, r0
 8007c64:	d4e0      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	059b      	lsls	r3, r3, #22
 8007c6a:	d4dd      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6e:	f000 f908 	bl	8007e82 <__retarget_lock_release_recursive>
 8007c72:	e7d9      	b.n	8007c28 <_fflush_r+0xc>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <_fflush_r+0x70>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d101      	bne.n	8007c7e <_fflush_r+0x62>
 8007c7a:	68ac      	ldr	r4, [r5, #8]
 8007c7c:	e7df      	b.n	8007c3e <_fflush_r+0x22>
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <_fflush_r+0x74>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	bf08      	it	eq
 8007c84:	68ec      	ldreq	r4, [r5, #12]
 8007c86:	e7da      	b.n	8007c3e <_fflush_r+0x22>
 8007c88:	080098c4 	.word	0x080098c4
 8007c8c:	080098e4 	.word	0x080098e4
 8007c90:	080098a4 	.word	0x080098a4

08007c94 <std>:
 8007c94:	2300      	movs	r3, #0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca2:	6083      	str	r3, [r0, #8]
 8007ca4:	8181      	strh	r1, [r0, #12]
 8007ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ca8:	81c2      	strh	r2, [r0, #14]
 8007caa:	6183      	str	r3, [r0, #24]
 8007cac:	4619      	mov	r1, r3
 8007cae:	2208      	movs	r2, #8
 8007cb0:	305c      	adds	r0, #92	; 0x5c
 8007cb2:	f7fd fb5b 	bl	800536c <memset>
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <std+0x38>)
 8007cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cba:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <std+0x3c>)
 8007cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <std+0x40>)
 8007cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <std+0x44>)
 8007cc4:	6224      	str	r4, [r4, #32]
 8007cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007fe9 	.word	0x08007fe9
 8007cd0:	0800800b 	.word	0x0800800b
 8007cd4:	08008043 	.word	0x08008043
 8007cd8:	08008067 	.word	0x08008067

08007cdc <_cleanup_r>:
 8007cdc:	4901      	ldr	r1, [pc, #4]	; (8007ce4 <_cleanup_r+0x8>)
 8007cde:	f000 b8af 	b.w	8007e40 <_fwalk_reent>
 8007ce2:	bf00      	nop
 8007ce4:	08007c1d 	.word	0x08007c1d

08007ce8 <__sfmoreglue>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	2268      	movs	r2, #104	; 0x68
 8007cec:	1e4d      	subs	r5, r1, #1
 8007cee:	4355      	muls	r5, r2
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cf6:	f7ff fa65 	bl	80071c4 <_malloc_r>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b140      	cbz	r0, 8007d10 <__sfmoreglue+0x28>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	e9c0 1600 	strd	r1, r6, [r0]
 8007d04:	300c      	adds	r0, #12
 8007d06:	60a0      	str	r0, [r4, #8]
 8007d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d0c:	f7fd fb2e 	bl	800536c <memset>
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}

08007d14 <__sfp_lock_acquire>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__sfp_lock_acquire+0x8>)
 8007d16:	f000 b8b3 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	200003dd 	.word	0x200003dd

08007d20 <__sfp_lock_release>:
 8007d20:	4801      	ldr	r0, [pc, #4]	; (8007d28 <__sfp_lock_release+0x8>)
 8007d22:	f000 b8ae 	b.w	8007e82 <__retarget_lock_release_recursive>
 8007d26:	bf00      	nop
 8007d28:	200003dd 	.word	0x200003dd

08007d2c <__sinit_lock_acquire>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__sinit_lock_acquire+0x8>)
 8007d2e:	f000 b8a7 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 8007d32:	bf00      	nop
 8007d34:	200003de 	.word	0x200003de

08007d38 <__sinit_lock_release>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sinit_lock_release+0x8>)
 8007d3a:	f000 b8a2 	b.w	8007e82 <__retarget_lock_release_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200003de 	.word	0x200003de

08007d44 <__sinit>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4604      	mov	r4, r0
 8007d48:	f7ff fff0 	bl	8007d2c <__sinit_lock_acquire>
 8007d4c:	69a3      	ldr	r3, [r4, #24]
 8007d4e:	b11b      	cbz	r3, 8007d58 <__sinit+0x14>
 8007d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d54:	f7ff bff0 	b.w	8007d38 <__sinit_lock_release>
 8007d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <__sinit+0x68>)
 8007d60:	4a13      	ldr	r2, [pc, #76]	; (8007db0 <__sinit+0x6c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	bf04      	itt	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	61a3      	streq	r3, [r4, #24]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 f820 	bl	8007db4 <__sfp>
 8007d74:	6060      	str	r0, [r4, #4]
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 f81c 	bl	8007db4 <__sfp>
 8007d7c:	60a0      	str	r0, [r4, #8]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f818 	bl	8007db4 <__sfp>
 8007d84:	2200      	movs	r2, #0
 8007d86:	60e0      	str	r0, [r4, #12]
 8007d88:	2104      	movs	r1, #4
 8007d8a:	6860      	ldr	r0, [r4, #4]
 8007d8c:	f7ff ff82 	bl	8007c94 <std>
 8007d90:	68a0      	ldr	r0, [r4, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	2109      	movs	r1, #9
 8007d96:	f7ff ff7d 	bl	8007c94 <std>
 8007d9a:	68e0      	ldr	r0, [r4, #12]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff ff78 	bl	8007c94 <std>
 8007da4:	2301      	movs	r3, #1
 8007da6:	61a3      	str	r3, [r4, #24]
 8007da8:	e7d2      	b.n	8007d50 <__sinit+0xc>
 8007daa:	bf00      	nop
 8007dac:	08009528 	.word	0x08009528
 8007db0:	08007cdd 	.word	0x08007cdd

08007db4 <__sfp>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	4607      	mov	r7, r0
 8007db8:	f7ff ffac 	bl	8007d14 <__sfp_lock_acquire>
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <__sfp+0x84>)
 8007dbe:	681e      	ldr	r6, [r3, #0]
 8007dc0:	69b3      	ldr	r3, [r6, #24]
 8007dc2:	b913      	cbnz	r3, 8007dca <__sfp+0x16>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ffbd 	bl	8007d44 <__sinit>
 8007dca:	3648      	adds	r6, #72	; 0x48
 8007dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	d503      	bpl.n	8007ddc <__sfp+0x28>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	b30b      	cbz	r3, 8007e1c <__sfp+0x68>
 8007dd8:	6836      	ldr	r6, [r6, #0]
 8007dda:	e7f7      	b.n	8007dcc <__sfp+0x18>
 8007ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007de0:	b9d5      	cbnz	r5, 8007e18 <__sfp+0x64>
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <__sfp+0x88>)
 8007de4:	60e3      	str	r3, [r4, #12]
 8007de6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dea:	6665      	str	r5, [r4, #100]	; 0x64
 8007dec:	f000 f847 	bl	8007e7e <__retarget_lock_init_recursive>
 8007df0:	f7ff ff96 	bl	8007d20 <__sfp_lock_release>
 8007df4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007df8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dfc:	6025      	str	r5, [r4, #0]
 8007dfe:	61a5      	str	r5, [r4, #24]
 8007e00:	2208      	movs	r2, #8
 8007e02:	4629      	mov	r1, r5
 8007e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e08:	f7fd fab0 	bl	800536c <memset>
 8007e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e14:	4620      	mov	r0, r4
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e18:	3468      	adds	r4, #104	; 0x68
 8007e1a:	e7d9      	b.n	8007dd0 <__sfp+0x1c>
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7ff ff62 	bl	8007ce8 <__sfmoreglue>
 8007e24:	4604      	mov	r4, r0
 8007e26:	6030      	str	r0, [r6, #0]
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1d5      	bne.n	8007dd8 <__sfp+0x24>
 8007e2c:	f7ff ff78 	bl	8007d20 <__sfp_lock_release>
 8007e30:	230c      	movs	r3, #12
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	e7ee      	b.n	8007e14 <__sfp+0x60>
 8007e36:	bf00      	nop
 8007e38:	08009528 	.word	0x08009528
 8007e3c:	ffff0001 	.word	0xffff0001

08007e40 <_fwalk_reent>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	4606      	mov	r6, r0
 8007e46:	4688      	mov	r8, r1
 8007e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e4c:	2700      	movs	r7, #0
 8007e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e52:	f1b9 0901 	subs.w	r9, r9, #1
 8007e56:	d505      	bpl.n	8007e64 <_fwalk_reent+0x24>
 8007e58:	6824      	ldr	r4, [r4, #0]
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	d1f7      	bne.n	8007e4e <_fwalk_reent+0xe>
 8007e5e:	4638      	mov	r0, r7
 8007e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e64:	89ab      	ldrh	r3, [r5, #12]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d907      	bls.n	8007e7a <_fwalk_reent+0x3a>
 8007e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	d003      	beq.n	8007e7a <_fwalk_reent+0x3a>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	47c0      	blx	r8
 8007e78:	4307      	orrs	r7, r0
 8007e7a:	3568      	adds	r5, #104	; 0x68
 8007e7c:	e7e9      	b.n	8007e52 <_fwalk_reent+0x12>

08007e7e <__retarget_lock_init_recursive>:
 8007e7e:	4770      	bx	lr

08007e80 <__retarget_lock_acquire_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <__retarget_lock_release_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__swhatbuf_r>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	460e      	mov	r6, r1
 8007e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	b096      	sub	sp, #88	; 0x58
 8007e90:	4614      	mov	r4, r2
 8007e92:	461d      	mov	r5, r3
 8007e94:	da08      	bge.n	8007ea8 <__swhatbuf_r+0x24>
 8007e96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	061a      	lsls	r2, r3, #24
 8007ea0:	d410      	bmi.n	8007ec4 <__swhatbuf_r+0x40>
 8007ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ea6:	e00e      	b.n	8007ec6 <__swhatbuf_r+0x42>
 8007ea8:	466a      	mov	r2, sp
 8007eaa:	f000 f903 	bl	80080b4 <_fstat_r>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	dbf1      	blt.n	8007e96 <__swhatbuf_r+0x12>
 8007eb2:	9a01      	ldr	r2, [sp, #4]
 8007eb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ebc:	425a      	negs	r2, r3
 8007ebe:	415a      	adcs	r2, r3
 8007ec0:	602a      	str	r2, [r5, #0]
 8007ec2:	e7ee      	b.n	8007ea2 <__swhatbuf_r+0x1e>
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	b016      	add	sp, #88	; 0x58
 8007ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ed0 <__smakebuf_r>:
 8007ed0:	898b      	ldrh	r3, [r1, #12]
 8007ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed4:	079d      	lsls	r5, r3, #30
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	460c      	mov	r4, r1
 8007eda:	d507      	bpl.n	8007eec <__smakebuf_r+0x1c>
 8007edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	6163      	str	r3, [r4, #20]
 8007ee8:	b002      	add	sp, #8
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	ab01      	add	r3, sp, #4
 8007eee:	466a      	mov	r2, sp
 8007ef0:	f7ff ffc8 	bl	8007e84 <__swhatbuf_r>
 8007ef4:	9900      	ldr	r1, [sp, #0]
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff f963 	bl	80071c4 <_malloc_r>
 8007efe:	b948      	cbnz	r0, 8007f14 <__smakebuf_r+0x44>
 8007f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f04:	059a      	lsls	r2, r3, #22
 8007f06:	d4ef      	bmi.n	8007ee8 <__smakebuf_r+0x18>
 8007f08:	f023 0303 	bic.w	r3, r3, #3
 8007f0c:	f043 0302 	orr.w	r3, r3, #2
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	e7e3      	b.n	8007edc <__smakebuf_r+0xc>
 8007f14:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <__smakebuf_r+0x7c>)
 8007f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	6020      	str	r0, [r4, #0]
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	9b00      	ldr	r3, [sp, #0]
 8007f24:	6163      	str	r3, [r4, #20]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	6120      	str	r0, [r4, #16]
 8007f2a:	b15b      	cbz	r3, 8007f44 <__smakebuf_r+0x74>
 8007f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 f8d1 	bl	80080d8 <_isatty_r>
 8007f36:	b128      	cbz	r0, 8007f44 <__smakebuf_r+0x74>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	89a0      	ldrh	r0, [r4, #12]
 8007f46:	4305      	orrs	r5, r0
 8007f48:	81a5      	strh	r5, [r4, #12]
 8007f4a:	e7cd      	b.n	8007ee8 <__smakebuf_r+0x18>
 8007f4c:	08007cdd 	.word	0x08007cdd

08007f50 <_malloc_usable_size_r>:
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f18      	subs	r0, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbc      	itt	lt
 8007f5a:	580b      	ldrlt	r3, [r1, r0]
 8007f5c:	18c0      	addlt	r0, r0, r3
 8007f5e:	4770      	bx	lr

08007f60 <_raise_r>:
 8007f60:	291f      	cmp	r1, #31
 8007f62:	b538      	push	{r3, r4, r5, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	d904      	bls.n	8007f74 <_raise_r+0x14>
 8007f6a:	2316      	movs	r3, #22
 8007f6c:	6003      	str	r3, [r0, #0]
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f76:	b112      	cbz	r2, 8007f7e <_raise_r+0x1e>
 8007f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f7c:	b94b      	cbnz	r3, 8007f92 <_raise_r+0x32>
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 f830 	bl	8007fe4 <_getpid_r>
 8007f84:	462a      	mov	r2, r5
 8007f86:	4601      	mov	r1, r0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8e:	f000 b817 	b.w	8007fc0 <_kill_r>
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d00a      	beq.n	8007fac <_raise_r+0x4c>
 8007f96:	1c59      	adds	r1, r3, #1
 8007f98:	d103      	bne.n	8007fa2 <_raise_r+0x42>
 8007f9a:	2316      	movs	r3, #22
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e7e7      	b.n	8007f72 <_raise_r+0x12>
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa8:	4628      	mov	r0, r5
 8007faa:	4798      	blx	r3
 8007fac:	2000      	movs	r0, #0
 8007fae:	e7e0      	b.n	8007f72 <_raise_r+0x12>

08007fb0 <raise>:
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <raise+0xc>)
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f7ff bfd3 	b.w	8007f60 <_raise_r>
 8007fba:	bf00      	nop
 8007fbc:	2000009c 	.word	0x2000009c

08007fc0 <_kill_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	; (8007fe0 <_kill_r+0x20>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	f7fa f967 	bl	80022a0 <_kill>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	d102      	bne.n	8007fdc <_kill_r+0x1c>
 8007fd6:	682b      	ldr	r3, [r5, #0]
 8007fd8:	b103      	cbz	r3, 8007fdc <_kill_r+0x1c>
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	200003d8 	.word	0x200003d8

08007fe4 <_getpid_r>:
 8007fe4:	f7fa b954 	b.w	8002290 <_getpid>

08007fe8 <__sread>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f894 	bl	800811c <_read_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	bfab      	itete	ge
 8007ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8007ffc:	181b      	addge	r3, r3, r0
 8007ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008002:	bfac      	ite	ge
 8008004:	6563      	strge	r3, [r4, #84]	; 0x54
 8008006:	81a3      	strhlt	r3, [r4, #12]
 8008008:	bd10      	pop	{r4, pc}

0800800a <__swrite>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	461f      	mov	r7, r3
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4616      	mov	r6, r2
 800801a:	d505      	bpl.n	8008028 <__swrite+0x1e>
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2302      	movs	r3, #2
 8008022:	2200      	movs	r2, #0
 8008024:	f000 f868 	bl	80080f8 <_lseek_r>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	f000 b817 	b.w	8008070 <_write_r>

08008042 <__sseek>:
 8008042:	b510      	push	{r4, lr}
 8008044:	460c      	mov	r4, r1
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 f855 	bl	80080f8 <_lseek_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	bf15      	itete	ne
 8008054:	6560      	strne	r0, [r4, #84]	; 0x54
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800805e:	81a3      	strheq	r3, [r4, #12]
 8008060:	bf18      	it	ne
 8008062:	81a3      	strhne	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__sclose>:
 8008066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806a:	f000 b813 	b.w	8008094 <_close_r>
	...

08008070 <_write_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_write_r+0x20>)
 8008074:	4604      	mov	r4, r0
 8008076:	4608      	mov	r0, r1
 8008078:	4611      	mov	r1, r2
 800807a:	2200      	movs	r2, #0
 800807c:	602a      	str	r2, [r5, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7fa f945 	bl	800230e <_write>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_write_r+0x1e>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_write_r+0x1e>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	200003d8 	.word	0x200003d8

08008094 <_close_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4d06      	ldr	r5, [pc, #24]	; (80080b0 <_close_r+0x1c>)
 8008098:	2300      	movs	r3, #0
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7fa f951 	bl	8002346 <_close>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_close_r+0x1a>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_close_r+0x1a>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200003d8 	.word	0x200003d8

080080b4 <_fstat_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	; (80080d4 <_fstat_r+0x20>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	f7fa f94c 	bl	800235e <_fstat>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d102      	bne.n	80080d0 <_fstat_r+0x1c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	b103      	cbz	r3, 80080d0 <_fstat_r+0x1c>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	200003d8 	.word	0x200003d8

080080d8 <_isatty_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d06      	ldr	r5, [pc, #24]	; (80080f4 <_isatty_r+0x1c>)
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	f7fa f94b 	bl	800237e <_isatty>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_isatty_r+0x1a>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_isatty_r+0x1a>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	200003d8 	.word	0x200003d8

080080f8 <_lseek_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d07      	ldr	r5, [pc, #28]	; (8008118 <_lseek_r+0x20>)
 80080fc:	4604      	mov	r4, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	4611      	mov	r1, r2
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7fa f944 	bl	8002394 <_lseek>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_lseek_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_lseek_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	200003d8 	.word	0x200003d8

0800811c <_read_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d07      	ldr	r5, [pc, #28]	; (800813c <_read_r+0x20>)
 8008120:	4604      	mov	r4, r0
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	2200      	movs	r2, #0
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	f7fa f8d2 	bl	80022d4 <_read>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_read_r+0x1e>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_read_r+0x1e>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	200003d8 	.word	0x200003d8

08008140 <atan>:
 8008140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	ec55 4b10 	vmov	r4, r5, d0
 8008148:	4bc3      	ldr	r3, [pc, #780]	; (8008458 <atan+0x318>)
 800814a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800814e:	429e      	cmp	r6, r3
 8008150:	46ab      	mov	fp, r5
 8008152:	dd18      	ble.n	8008186 <atan+0x46>
 8008154:	4bc1      	ldr	r3, [pc, #772]	; (800845c <atan+0x31c>)
 8008156:	429e      	cmp	r6, r3
 8008158:	dc01      	bgt.n	800815e <atan+0x1e>
 800815a:	d109      	bne.n	8008170 <atan+0x30>
 800815c:	b144      	cbz	r4, 8008170 <atan+0x30>
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f899 	bl	800029c <__adddf3>
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	e006      	b.n	800817e <atan+0x3e>
 8008170:	f1bb 0f00 	cmp.w	fp, #0
 8008174:	f300 8131 	bgt.w	80083da <atan+0x29a>
 8008178:	a59b      	add	r5, pc, #620	; (adr r5, 80083e8 <atan+0x2a8>)
 800817a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800817e:	ec45 4b10 	vmov	d0, r4, r5
 8008182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008186:	4bb6      	ldr	r3, [pc, #728]	; (8008460 <atan+0x320>)
 8008188:	429e      	cmp	r6, r3
 800818a:	dc14      	bgt.n	80081b6 <atan+0x76>
 800818c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008190:	429e      	cmp	r6, r3
 8008192:	dc0d      	bgt.n	80081b0 <atan+0x70>
 8008194:	a396      	add	r3, pc, #600	; (adr r3, 80083f0 <atan+0x2b0>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	ee10 0a10 	vmov	r0, s0
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 f87c 	bl	800029c <__adddf3>
 80081a4:	4baf      	ldr	r3, [pc, #700]	; (8008464 <atan+0x324>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7f8 fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1e6      	bne.n	800817e <atan+0x3e>
 80081b0:	f04f 3aff 	mov.w	sl, #4294967295
 80081b4:	e02b      	b.n	800820e <atan+0xce>
 80081b6:	f000 f963 	bl	8008480 <fabs>
 80081ba:	4bab      	ldr	r3, [pc, #684]	; (8008468 <atan+0x328>)
 80081bc:	429e      	cmp	r6, r3
 80081be:	ec55 4b10 	vmov	r4, r5, d0
 80081c2:	f300 80bf 	bgt.w	8008344 <atan+0x204>
 80081c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80081ca:	429e      	cmp	r6, r3
 80081cc:	f300 80a0 	bgt.w	8008310 <atan+0x1d0>
 80081d0:	ee10 2a10 	vmov	r2, s0
 80081d4:	ee10 0a10 	vmov	r0, s0
 80081d8:	462b      	mov	r3, r5
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 f85e 	bl	800029c <__adddf3>
 80081e0:	4ba0      	ldr	r3, [pc, #640]	; (8008464 <atan+0x324>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	f7f8 f858 	bl	8000298 <__aeabi_dsub>
 80081e8:	2200      	movs	r2, #0
 80081ea:	4606      	mov	r6, r0
 80081ec:	460f      	mov	r7, r1
 80081ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f8 f851 	bl	800029c <__adddf3>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	f7f8 fb2b 	bl	800085c <__aeabi_ddiv>
 8008206:	f04f 0a00 	mov.w	sl, #0
 800820a:	4604      	mov	r4, r0
 800820c:	460d      	mov	r5, r1
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4680      	mov	r8, r0
 8008220:	4689      	mov	r9, r1
 8008222:	f7f8 f9f1 	bl	8000608 <__aeabi_dmul>
 8008226:	a374      	add	r3, pc, #464	; (adr r3, 80083f8 <atan+0x2b8>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	f7f8 f9ea 	bl	8000608 <__aeabi_dmul>
 8008234:	a372      	add	r3, pc, #456	; (adr r3, 8008400 <atan+0x2c0>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f82f 	bl	800029c <__adddf3>
 800823e:	4632      	mov	r2, r6
 8008240:	463b      	mov	r3, r7
 8008242:	f7f8 f9e1 	bl	8000608 <__aeabi_dmul>
 8008246:	a370      	add	r3, pc, #448	; (adr r3, 8008408 <atan+0x2c8>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f826 	bl	800029c <__adddf3>
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	a36d      	add	r3, pc, #436	; (adr r3, 8008410 <atan+0x2d0>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 f81d 	bl	800029c <__adddf3>
 8008262:	4632      	mov	r2, r6
 8008264:	463b      	mov	r3, r7
 8008266:	f7f8 f9cf 	bl	8000608 <__aeabi_dmul>
 800826a:	a36b      	add	r3, pc, #428	; (adr r3, 8008418 <atan+0x2d8>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f7f8 f814 	bl	800029c <__adddf3>
 8008274:	4632      	mov	r2, r6
 8008276:	463b      	mov	r3, r7
 8008278:	f7f8 f9c6 	bl	8000608 <__aeabi_dmul>
 800827c:	a368      	add	r3, pc, #416	; (adr r3, 8008420 <atan+0x2e0>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f80b 	bl	800029c <__adddf3>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	f7f8 f9bd 	bl	8000608 <__aeabi_dmul>
 800828e:	a366      	add	r3, pc, #408	; (adr r3, 8008428 <atan+0x2e8>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4680      	mov	r8, r0
 8008296:	4689      	mov	r9, r1
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 f9b4 	bl	8000608 <__aeabi_dmul>
 80082a0:	a363      	add	r3, pc, #396	; (adr r3, 8008430 <atan+0x2f0>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f7 fff7 	bl	8000298 <__aeabi_dsub>
 80082aa:	4632      	mov	r2, r6
 80082ac:	463b      	mov	r3, r7
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	a361      	add	r3, pc, #388	; (adr r3, 8008438 <atan+0x2f8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f7 ffee 	bl	8000298 <__aeabi_dsub>
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	a35e      	add	r3, pc, #376	; (adr r3, 8008440 <atan+0x300>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ffe5 	bl	8000298 <__aeabi_dsub>
 80082ce:	4632      	mov	r2, r6
 80082d0:	463b      	mov	r3, r7
 80082d2:	f7f8 f999 	bl	8000608 <__aeabi_dmul>
 80082d6:	a35c      	add	r3, pc, #368	; (adr r3, 8008448 <atan+0x308>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ffdc 	bl	8000298 <__aeabi_dsub>
 80082e0:	4632      	mov	r2, r6
 80082e2:	463b      	mov	r3, r7
 80082e4:	f7f8 f990 	bl	8000608 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4640      	mov	r0, r8
 80082ee:	4649      	mov	r1, r9
 80082f0:	f7f7 ffd4 	bl	800029c <__adddf3>
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	f7f8 f986 	bl	8000608 <__aeabi_dmul>
 80082fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	d14b      	bne.n	800839e <atan+0x25e>
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f7 ffc5 	bl	8000298 <__aeabi_dsub>
 800830e:	e72c      	b.n	800816a <atan+0x2a>
 8008310:	ee10 0a10 	vmov	r0, s0
 8008314:	4b53      	ldr	r3, [pc, #332]	; (8008464 <atan+0x324>)
 8008316:	2200      	movs	r2, #0
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ffbd 	bl	8000298 <__aeabi_dsub>
 800831e:	4b51      	ldr	r3, [pc, #324]	; (8008464 <atan+0x324>)
 8008320:	4606      	mov	r6, r0
 8008322:	460f      	mov	r7, r1
 8008324:	2200      	movs	r2, #0
 8008326:	4620      	mov	r0, r4
 8008328:	4629      	mov	r1, r5
 800832a:	f7f7 ffb7 	bl	800029c <__adddf3>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f8 fa91 	bl	800085c <__aeabi_ddiv>
 800833a:	f04f 0a01 	mov.w	sl, #1
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	e764      	b.n	800820e <atan+0xce>
 8008344:	4b49      	ldr	r3, [pc, #292]	; (800846c <atan+0x32c>)
 8008346:	429e      	cmp	r6, r3
 8008348:	da1d      	bge.n	8008386 <atan+0x246>
 800834a:	ee10 0a10 	vmov	r0, s0
 800834e:	4b48      	ldr	r3, [pc, #288]	; (8008470 <atan+0x330>)
 8008350:	2200      	movs	r2, #0
 8008352:	4629      	mov	r1, r5
 8008354:	f7f7 ffa0 	bl	8000298 <__aeabi_dsub>
 8008358:	4b45      	ldr	r3, [pc, #276]	; (8008470 <atan+0x330>)
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	2200      	movs	r2, #0
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	4b3e      	ldr	r3, [pc, #248]	; (8008464 <atan+0x324>)
 800836a:	2200      	movs	r2, #0
 800836c:	f7f7 ff96 	bl	800029c <__adddf3>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f8 fa70 	bl	800085c <__aeabi_ddiv>
 800837c:	f04f 0a02 	mov.w	sl, #2
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	e743      	b.n	800820e <atan+0xce>
 8008386:	462b      	mov	r3, r5
 8008388:	ee10 2a10 	vmov	r2, s0
 800838c:	4939      	ldr	r1, [pc, #228]	; (8008474 <atan+0x334>)
 800838e:	2000      	movs	r0, #0
 8008390:	f7f8 fa64 	bl	800085c <__aeabi_ddiv>
 8008394:	f04f 0a03 	mov.w	sl, #3
 8008398:	4604      	mov	r4, r0
 800839a:	460d      	mov	r5, r1
 800839c:	e737      	b.n	800820e <atan+0xce>
 800839e:	4b36      	ldr	r3, [pc, #216]	; (8008478 <atan+0x338>)
 80083a0:	4e36      	ldr	r6, [pc, #216]	; (800847c <atan+0x33c>)
 80083a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80083a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80083aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80083ae:	f7f7 ff73 	bl	8000298 <__aeabi_dsub>
 80083b2:	4622      	mov	r2, r4
 80083b4:	462b      	mov	r3, r5
 80083b6:	f7f7 ff6f 	bl	8000298 <__aeabi_dsub>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80083c2:	f7f7 ff69 	bl	8000298 <__aeabi_dsub>
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	460d      	mov	r5, r1
 80083ce:	f6bf aed6 	bge.w	800817e <atan+0x3e>
 80083d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083d6:	461d      	mov	r5, r3
 80083d8:	e6d1      	b.n	800817e <atan+0x3e>
 80083da:	a51d      	add	r5, pc, #116	; (adr r5, 8008450 <atan+0x310>)
 80083dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083e0:	e6cd      	b.n	800817e <atan+0x3e>
 80083e2:	bf00      	nop
 80083e4:	f3af 8000 	nop.w
 80083e8:	54442d18 	.word	0x54442d18
 80083ec:	bff921fb 	.word	0xbff921fb
 80083f0:	8800759c 	.word	0x8800759c
 80083f4:	7e37e43c 	.word	0x7e37e43c
 80083f8:	e322da11 	.word	0xe322da11
 80083fc:	3f90ad3a 	.word	0x3f90ad3a
 8008400:	24760deb 	.word	0x24760deb
 8008404:	3fa97b4b 	.word	0x3fa97b4b
 8008408:	a0d03d51 	.word	0xa0d03d51
 800840c:	3fb10d66 	.word	0x3fb10d66
 8008410:	c54c206e 	.word	0xc54c206e
 8008414:	3fb745cd 	.word	0x3fb745cd
 8008418:	920083ff 	.word	0x920083ff
 800841c:	3fc24924 	.word	0x3fc24924
 8008420:	5555550d 	.word	0x5555550d
 8008424:	3fd55555 	.word	0x3fd55555
 8008428:	2c6a6c2f 	.word	0x2c6a6c2f
 800842c:	bfa2b444 	.word	0xbfa2b444
 8008430:	52defd9a 	.word	0x52defd9a
 8008434:	3fadde2d 	.word	0x3fadde2d
 8008438:	af749a6d 	.word	0xaf749a6d
 800843c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008440:	fe231671 	.word	0xfe231671
 8008444:	3fbc71c6 	.word	0x3fbc71c6
 8008448:	9998ebc4 	.word	0x9998ebc4
 800844c:	3fc99999 	.word	0x3fc99999
 8008450:	54442d18 	.word	0x54442d18
 8008454:	3ff921fb 	.word	0x3ff921fb
 8008458:	440fffff 	.word	0x440fffff
 800845c:	7ff00000 	.word	0x7ff00000
 8008460:	3fdbffff 	.word	0x3fdbffff
 8008464:	3ff00000 	.word	0x3ff00000
 8008468:	3ff2ffff 	.word	0x3ff2ffff
 800846c:	40038000 	.word	0x40038000
 8008470:	3ff80000 	.word	0x3ff80000
 8008474:	bff00000 	.word	0xbff00000
 8008478:	08009928 	.word	0x08009928
 800847c:	08009908 	.word	0x08009908

08008480 <fabs>:
 8008480:	ec51 0b10 	vmov	r0, r1, d0
 8008484:	ee10 2a10 	vmov	r2, s0
 8008488:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800848c:	ec43 2b10 	vmov	d0, r2, r3
 8008490:	4770      	bx	lr

08008492 <atan2>:
 8008492:	f000 b89d 	b.w	80085d0 <__ieee754_atan2>
	...

08008498 <pow>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	ed2d 8b02 	vpush	{d8}
 800849e:	eeb0 8a40 	vmov.f32	s16, s0
 80084a2:	eef0 8a60 	vmov.f32	s17, s1
 80084a6:	ec55 4b11 	vmov	r4, r5, d1
 80084aa:	f000 f95d 	bl	8008768 <__ieee754_pow>
 80084ae:	4622      	mov	r2, r4
 80084b0:	462b      	mov	r3, r5
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	ec57 6b10 	vmov	r6, r7, d0
 80084ba:	f7f8 fb3f 	bl	8000b3c <__aeabi_dcmpun>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d13b      	bne.n	800853a <pow+0xa2>
 80084c2:	ec51 0b18 	vmov	r0, r1, d8
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	f7f8 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ce:	b1b8      	cbz	r0, 8008500 <pow+0x68>
 80084d0:	2200      	movs	r2, #0
 80084d2:	2300      	movs	r3, #0
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f8 fafe 	bl	8000ad8 <__aeabi_dcmpeq>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d146      	bne.n	800856e <pow+0xd6>
 80084e0:	ec45 4b10 	vmov	d0, r4, r5
 80084e4:	f000 ff50 	bl	8009388 <finite>
 80084e8:	b338      	cbz	r0, 800853a <pow+0xa2>
 80084ea:	2200      	movs	r2, #0
 80084ec:	2300      	movs	r3, #0
 80084ee:	4620      	mov	r0, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f8 fafb 	bl	8000aec <__aeabi_dcmplt>
 80084f6:	b300      	cbz	r0, 800853a <pow+0xa2>
 80084f8:	f7fc ff0e 	bl	8005318 <__errno>
 80084fc:	2322      	movs	r3, #34	; 0x22
 80084fe:	e01b      	b.n	8008538 <pow+0xa0>
 8008500:	ec47 6b10 	vmov	d0, r6, r7
 8008504:	f000 ff40 	bl	8009388 <finite>
 8008508:	b9e0      	cbnz	r0, 8008544 <pow+0xac>
 800850a:	eeb0 0a48 	vmov.f32	s0, s16
 800850e:	eef0 0a68 	vmov.f32	s1, s17
 8008512:	f000 ff39 	bl	8009388 <finite>
 8008516:	b1a8      	cbz	r0, 8008544 <pow+0xac>
 8008518:	ec45 4b10 	vmov	d0, r4, r5
 800851c:	f000 ff34 	bl	8009388 <finite>
 8008520:	b180      	cbz	r0, 8008544 <pow+0xac>
 8008522:	4632      	mov	r2, r6
 8008524:	463b      	mov	r3, r7
 8008526:	4630      	mov	r0, r6
 8008528:	4639      	mov	r1, r7
 800852a:	f7f8 fb07 	bl	8000b3c <__aeabi_dcmpun>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0e2      	beq.n	80084f8 <pow+0x60>
 8008532:	f7fc fef1 	bl	8005318 <__errno>
 8008536:	2321      	movs	r3, #33	; 0x21
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	ecbd 8b02 	vpop	{d8}
 800853e:	ec47 6b10 	vmov	d0, r6, r7
 8008542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008544:	2200      	movs	r2, #0
 8008546:	2300      	movs	r3, #0
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f8 fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008550:	2800      	cmp	r0, #0
 8008552:	d0f2      	beq.n	800853a <pow+0xa2>
 8008554:	eeb0 0a48 	vmov.f32	s0, s16
 8008558:	eef0 0a68 	vmov.f32	s1, s17
 800855c:	f000 ff14 	bl	8009388 <finite>
 8008560:	2800      	cmp	r0, #0
 8008562:	d0ea      	beq.n	800853a <pow+0xa2>
 8008564:	ec45 4b10 	vmov	d0, r4, r5
 8008568:	f000 ff0e 	bl	8009388 <finite>
 800856c:	e7c3      	b.n	80084f6 <pow+0x5e>
 800856e:	4f01      	ldr	r7, [pc, #4]	; (8008574 <pow+0xdc>)
 8008570:	2600      	movs	r6, #0
 8008572:	e7e2      	b.n	800853a <pow+0xa2>
 8008574:	3ff00000 	.word	0x3ff00000

08008578 <sqrt>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	ed2d 8b02 	vpush	{d8}
 800857e:	ec55 4b10 	vmov	r4, r5, d0
 8008582:	f000 fe1f 	bl	80091c4 <__ieee754_sqrt>
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	eeb0 8a40 	vmov.f32	s16, s0
 8008592:	eef0 8a60 	vmov.f32	s17, s1
 8008596:	f7f8 fad1 	bl	8000b3c <__aeabi_dcmpun>
 800859a:	b990      	cbnz	r0, 80085c2 <sqrt+0x4a>
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4620      	mov	r0, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	f7f8 faa2 	bl	8000aec <__aeabi_dcmplt>
 80085a8:	b158      	cbz	r0, 80085c2 <sqrt+0x4a>
 80085aa:	f7fc feb5 	bl	8005318 <__errno>
 80085ae:	2321      	movs	r3, #33	; 0x21
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	2300      	movs	r3, #0
 80085b6:	4610      	mov	r0, r2
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7f8 f94f 	bl	800085c <__aeabi_ddiv>
 80085be:	ec41 0b18 	vmov	d8, r0, r1
 80085c2:	eeb0 0a48 	vmov.f32	s0, s16
 80085c6:	eef0 0a68 	vmov.f32	s1, s17
 80085ca:	ecbd 8b02 	vpop	{d8}
 80085ce:	bd38      	pop	{r3, r4, r5, pc}

080085d0 <__ieee754_atan2>:
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	ec57 6b11 	vmov	r6, r7, d1
 80085d8:	4273      	negs	r3, r6
 80085da:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008760 <__ieee754_atan2+0x190>
 80085de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80085e2:	4333      	orrs	r3, r6
 80085e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80085e8:	4573      	cmp	r3, lr
 80085ea:	ec51 0b10 	vmov	r0, r1, d0
 80085ee:	ee11 8a10 	vmov	r8, s2
 80085f2:	d80a      	bhi.n	800860a <__ieee754_atan2+0x3a>
 80085f4:	4244      	negs	r4, r0
 80085f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085fa:	4304      	orrs	r4, r0
 80085fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008600:	4574      	cmp	r4, lr
 8008602:	ee10 9a10 	vmov	r9, s0
 8008606:	468c      	mov	ip, r1
 8008608:	d907      	bls.n	800861a <__ieee754_atan2+0x4a>
 800860a:	4632      	mov	r2, r6
 800860c:	463b      	mov	r3, r7
 800860e:	f7f7 fe45 	bl	800029c <__adddf3>
 8008612:	ec41 0b10 	vmov	d0, r0, r1
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800861e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008622:	4334      	orrs	r4, r6
 8008624:	d103      	bne.n	800862e <__ieee754_atan2+0x5e>
 8008626:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862a:	f7ff bd89 	b.w	8008140 <atan>
 800862e:	17bc      	asrs	r4, r7, #30
 8008630:	f004 0402 	and.w	r4, r4, #2
 8008634:	ea53 0909 	orrs.w	r9, r3, r9
 8008638:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800863c:	d107      	bne.n	800864e <__ieee754_atan2+0x7e>
 800863e:	2c02      	cmp	r4, #2
 8008640:	d060      	beq.n	8008704 <__ieee754_atan2+0x134>
 8008642:	2c03      	cmp	r4, #3
 8008644:	d1e5      	bne.n	8008612 <__ieee754_atan2+0x42>
 8008646:	a142      	add	r1, pc, #264	; (adr r1, 8008750 <__ieee754_atan2+0x180>)
 8008648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800864c:	e7e1      	b.n	8008612 <__ieee754_atan2+0x42>
 800864e:	ea52 0808 	orrs.w	r8, r2, r8
 8008652:	d106      	bne.n	8008662 <__ieee754_atan2+0x92>
 8008654:	f1bc 0f00 	cmp.w	ip, #0
 8008658:	da5f      	bge.n	800871a <__ieee754_atan2+0x14a>
 800865a:	a13f      	add	r1, pc, #252	; (adr r1, 8008758 <__ieee754_atan2+0x188>)
 800865c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008660:	e7d7      	b.n	8008612 <__ieee754_atan2+0x42>
 8008662:	4572      	cmp	r2, lr
 8008664:	d10f      	bne.n	8008686 <__ieee754_atan2+0xb6>
 8008666:	4293      	cmp	r3, r2
 8008668:	f104 34ff 	add.w	r4, r4, #4294967295
 800866c:	d107      	bne.n	800867e <__ieee754_atan2+0xae>
 800866e:	2c02      	cmp	r4, #2
 8008670:	d84c      	bhi.n	800870c <__ieee754_atan2+0x13c>
 8008672:	4b35      	ldr	r3, [pc, #212]	; (8008748 <__ieee754_atan2+0x178>)
 8008674:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008678:	e9d4 0100 	ldrd	r0, r1, [r4]
 800867c:	e7c9      	b.n	8008612 <__ieee754_atan2+0x42>
 800867e:	2c02      	cmp	r4, #2
 8008680:	d848      	bhi.n	8008714 <__ieee754_atan2+0x144>
 8008682:	4b32      	ldr	r3, [pc, #200]	; (800874c <__ieee754_atan2+0x17c>)
 8008684:	e7f6      	b.n	8008674 <__ieee754_atan2+0xa4>
 8008686:	4573      	cmp	r3, lr
 8008688:	d0e4      	beq.n	8008654 <__ieee754_atan2+0x84>
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008690:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008694:	da1e      	bge.n	80086d4 <__ieee754_atan2+0x104>
 8008696:	2f00      	cmp	r7, #0
 8008698:	da01      	bge.n	800869e <__ieee754_atan2+0xce>
 800869a:	323c      	adds	r2, #60	; 0x3c
 800869c:	db1e      	blt.n	80086dc <__ieee754_atan2+0x10c>
 800869e:	4632      	mov	r2, r6
 80086a0:	463b      	mov	r3, r7
 80086a2:	f7f8 f8db 	bl	800085c <__aeabi_ddiv>
 80086a6:	ec41 0b10 	vmov	d0, r0, r1
 80086aa:	f7ff fee9 	bl	8008480 <fabs>
 80086ae:	f7ff fd47 	bl	8008140 <atan>
 80086b2:	ec51 0b10 	vmov	r0, r1, d0
 80086b6:	2c01      	cmp	r4, #1
 80086b8:	d013      	beq.n	80086e2 <__ieee754_atan2+0x112>
 80086ba:	2c02      	cmp	r4, #2
 80086bc:	d015      	beq.n	80086ea <__ieee754_atan2+0x11a>
 80086be:	2c00      	cmp	r4, #0
 80086c0:	d0a7      	beq.n	8008612 <__ieee754_atan2+0x42>
 80086c2:	a319      	add	r3, pc, #100	; (adr r3, 8008728 <__ieee754_atan2+0x158>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 fde6 	bl	8000298 <__aeabi_dsub>
 80086cc:	a318      	add	r3, pc, #96	; (adr r3, 8008730 <__ieee754_atan2+0x160>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	e014      	b.n	80086fe <__ieee754_atan2+0x12e>
 80086d4:	a118      	add	r1, pc, #96	; (adr r1, 8008738 <__ieee754_atan2+0x168>)
 80086d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086da:	e7ec      	b.n	80086b6 <__ieee754_atan2+0xe6>
 80086dc:	2000      	movs	r0, #0
 80086de:	2100      	movs	r1, #0
 80086e0:	e7e9      	b.n	80086b6 <__ieee754_atan2+0xe6>
 80086e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086e6:	4619      	mov	r1, r3
 80086e8:	e793      	b.n	8008612 <__ieee754_atan2+0x42>
 80086ea:	a30f      	add	r3, pc, #60	; (adr r3, 8008728 <__ieee754_atan2+0x158>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdd2 	bl	8000298 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	a10d      	add	r1, pc, #52	; (adr r1, 8008730 <__ieee754_atan2+0x160>)
 80086fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086fe:	f7f7 fdcb 	bl	8000298 <__aeabi_dsub>
 8008702:	e786      	b.n	8008612 <__ieee754_atan2+0x42>
 8008704:	a10a      	add	r1, pc, #40	; (adr r1, 8008730 <__ieee754_atan2+0x160>)
 8008706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870a:	e782      	b.n	8008612 <__ieee754_atan2+0x42>
 800870c:	a10c      	add	r1, pc, #48	; (adr r1, 8008740 <__ieee754_atan2+0x170>)
 800870e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008712:	e77e      	b.n	8008612 <__ieee754_atan2+0x42>
 8008714:	2000      	movs	r0, #0
 8008716:	2100      	movs	r1, #0
 8008718:	e77b      	b.n	8008612 <__ieee754_atan2+0x42>
 800871a:	a107      	add	r1, pc, #28	; (adr r1, 8008738 <__ieee754_atan2+0x168>)
 800871c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008720:	e777      	b.n	8008612 <__ieee754_atan2+0x42>
 8008722:	bf00      	nop
 8008724:	f3af 8000 	nop.w
 8008728:	33145c07 	.word	0x33145c07
 800872c:	3ca1a626 	.word	0x3ca1a626
 8008730:	54442d18 	.word	0x54442d18
 8008734:	400921fb 	.word	0x400921fb
 8008738:	54442d18 	.word	0x54442d18
 800873c:	3ff921fb 	.word	0x3ff921fb
 8008740:	54442d18 	.word	0x54442d18
 8008744:	3fe921fb 	.word	0x3fe921fb
 8008748:	08009948 	.word	0x08009948
 800874c:	08009960 	.word	0x08009960
 8008750:	54442d18 	.word	0x54442d18
 8008754:	c00921fb 	.word	0xc00921fb
 8008758:	54442d18 	.word	0x54442d18
 800875c:	bff921fb 	.word	0xbff921fb
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	00000000 	.word	0x00000000

08008768 <__ieee754_pow>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	ed2d 8b06 	vpush	{d8-d10}
 8008770:	b089      	sub	sp, #36	; 0x24
 8008772:	ed8d 1b00 	vstr	d1, [sp]
 8008776:	e9dd 2900 	ldrd	r2, r9, [sp]
 800877a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800877e:	ea58 0102 	orrs.w	r1, r8, r2
 8008782:	ec57 6b10 	vmov	r6, r7, d0
 8008786:	d115      	bne.n	80087b4 <__ieee754_pow+0x4c>
 8008788:	19b3      	adds	r3, r6, r6
 800878a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800878e:	4152      	adcs	r2, r2
 8008790:	4299      	cmp	r1, r3
 8008792:	4b89      	ldr	r3, [pc, #548]	; (80089b8 <__ieee754_pow+0x250>)
 8008794:	4193      	sbcs	r3, r2
 8008796:	f080 84d2 	bcs.w	800913e <__ieee754_pow+0x9d6>
 800879a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f7 fd7b 	bl	800029c <__adddf3>
 80087a6:	ec41 0b10 	vmov	d0, r0, r1
 80087aa:	b009      	add	sp, #36	; 0x24
 80087ac:	ecbd 8b06 	vpop	{d8-d10}
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	4b81      	ldr	r3, [pc, #516]	; (80089bc <__ieee754_pow+0x254>)
 80087b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80087ba:	429c      	cmp	r4, r3
 80087bc:	ee10 aa10 	vmov	sl, s0
 80087c0:	463d      	mov	r5, r7
 80087c2:	dc06      	bgt.n	80087d2 <__ieee754_pow+0x6a>
 80087c4:	d101      	bne.n	80087ca <__ieee754_pow+0x62>
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d1e7      	bne.n	800879a <__ieee754_pow+0x32>
 80087ca:	4598      	cmp	r8, r3
 80087cc:	dc01      	bgt.n	80087d2 <__ieee754_pow+0x6a>
 80087ce:	d10f      	bne.n	80087f0 <__ieee754_pow+0x88>
 80087d0:	b172      	cbz	r2, 80087f0 <__ieee754_pow+0x88>
 80087d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80087d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80087da:	ea55 050a 	orrs.w	r5, r5, sl
 80087de:	d1dc      	bne.n	800879a <__ieee754_pow+0x32>
 80087e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087e4:	18db      	adds	r3, r3, r3
 80087e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80087ea:	4152      	adcs	r2, r2
 80087ec:	429d      	cmp	r5, r3
 80087ee:	e7d0      	b.n	8008792 <__ieee754_pow+0x2a>
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	da3b      	bge.n	800886c <__ieee754_pow+0x104>
 80087f4:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <__ieee754_pow+0x258>)
 80087f6:	4598      	cmp	r8, r3
 80087f8:	dc51      	bgt.n	800889e <__ieee754_pow+0x136>
 80087fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80087fe:	4598      	cmp	r8, r3
 8008800:	f340 84ac 	ble.w	800915c <__ieee754_pow+0x9f4>
 8008804:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008808:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800880c:	2b14      	cmp	r3, #20
 800880e:	dd0f      	ble.n	8008830 <__ieee754_pow+0xc8>
 8008810:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008814:	fa22 f103 	lsr.w	r1, r2, r3
 8008818:	fa01 f303 	lsl.w	r3, r1, r3
 800881c:	4293      	cmp	r3, r2
 800881e:	f040 849d 	bne.w	800915c <__ieee754_pow+0x9f4>
 8008822:	f001 0101 	and.w	r1, r1, #1
 8008826:	f1c1 0302 	rsb	r3, r1, #2
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	b182      	cbz	r2, 8008850 <__ieee754_pow+0xe8>
 800882e:	e05f      	b.n	80088f0 <__ieee754_pow+0x188>
 8008830:	2a00      	cmp	r2, #0
 8008832:	d15b      	bne.n	80088ec <__ieee754_pow+0x184>
 8008834:	f1c3 0314 	rsb	r3, r3, #20
 8008838:	fa48 f103 	asr.w	r1, r8, r3
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	4543      	cmp	r3, r8
 8008842:	f040 8488 	bne.w	8009156 <__ieee754_pow+0x9ee>
 8008846:	f001 0101 	and.w	r1, r1, #1
 800884a:	f1c1 0302 	rsb	r3, r1, #2
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	4b5c      	ldr	r3, [pc, #368]	; (80089c4 <__ieee754_pow+0x25c>)
 8008852:	4598      	cmp	r8, r3
 8008854:	d132      	bne.n	80088bc <__ieee754_pow+0x154>
 8008856:	f1b9 0f00 	cmp.w	r9, #0
 800885a:	f280 8478 	bge.w	800914e <__ieee754_pow+0x9e6>
 800885e:	4959      	ldr	r1, [pc, #356]	; (80089c4 <__ieee754_pow+0x25c>)
 8008860:	4632      	mov	r2, r6
 8008862:	463b      	mov	r3, r7
 8008864:	2000      	movs	r0, #0
 8008866:	f7f7 fff9 	bl	800085c <__aeabi_ddiv>
 800886a:	e79c      	b.n	80087a6 <__ieee754_pow+0x3e>
 800886c:	2300      	movs	r3, #0
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	2a00      	cmp	r2, #0
 8008872:	d13d      	bne.n	80088f0 <__ieee754_pow+0x188>
 8008874:	4b51      	ldr	r3, [pc, #324]	; (80089bc <__ieee754_pow+0x254>)
 8008876:	4598      	cmp	r8, r3
 8008878:	d1ea      	bne.n	8008850 <__ieee754_pow+0xe8>
 800887a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800887e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008882:	ea53 030a 	orrs.w	r3, r3, sl
 8008886:	f000 845a 	beq.w	800913e <__ieee754_pow+0x9d6>
 800888a:	4b4f      	ldr	r3, [pc, #316]	; (80089c8 <__ieee754_pow+0x260>)
 800888c:	429c      	cmp	r4, r3
 800888e:	dd08      	ble.n	80088a2 <__ieee754_pow+0x13a>
 8008890:	f1b9 0f00 	cmp.w	r9, #0
 8008894:	f2c0 8457 	blt.w	8009146 <__ieee754_pow+0x9de>
 8008898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800889c:	e783      	b.n	80087a6 <__ieee754_pow+0x3e>
 800889e:	2302      	movs	r3, #2
 80088a0:	e7e5      	b.n	800886e <__ieee754_pow+0x106>
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	f04f 0000 	mov.w	r0, #0
 80088aa:	f04f 0100 	mov.w	r1, #0
 80088ae:	f6bf af7a 	bge.w	80087a6 <__ieee754_pow+0x3e>
 80088b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80088b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80088ba:	e774      	b.n	80087a6 <__ieee754_pow+0x3e>
 80088bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80088c0:	d106      	bne.n	80088d0 <__ieee754_pow+0x168>
 80088c2:	4632      	mov	r2, r6
 80088c4:	463b      	mov	r3, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fe9d 	bl	8000608 <__aeabi_dmul>
 80088ce:	e76a      	b.n	80087a6 <__ieee754_pow+0x3e>
 80088d0:	4b3e      	ldr	r3, [pc, #248]	; (80089cc <__ieee754_pow+0x264>)
 80088d2:	4599      	cmp	r9, r3
 80088d4:	d10c      	bne.n	80088f0 <__ieee754_pow+0x188>
 80088d6:	2d00      	cmp	r5, #0
 80088d8:	db0a      	blt.n	80088f0 <__ieee754_pow+0x188>
 80088da:	ec47 6b10 	vmov	d0, r6, r7
 80088de:	b009      	add	sp, #36	; 0x24
 80088e0:	ecbd 8b06 	vpop	{d8-d10}
 80088e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	f000 bc6c 	b.w	80091c4 <__ieee754_sqrt>
 80088ec:	2300      	movs	r3, #0
 80088ee:	9304      	str	r3, [sp, #16]
 80088f0:	ec47 6b10 	vmov	d0, r6, r7
 80088f4:	f7ff fdc4 	bl	8008480 <fabs>
 80088f8:	ec51 0b10 	vmov	r0, r1, d0
 80088fc:	f1ba 0f00 	cmp.w	sl, #0
 8008900:	d129      	bne.n	8008956 <__ieee754_pow+0x1ee>
 8008902:	b124      	cbz	r4, 800890e <__ieee754_pow+0x1a6>
 8008904:	4b2f      	ldr	r3, [pc, #188]	; (80089c4 <__ieee754_pow+0x25c>)
 8008906:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800890a:	429a      	cmp	r2, r3
 800890c:	d123      	bne.n	8008956 <__ieee754_pow+0x1ee>
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	da05      	bge.n	8008920 <__ieee754_pow+0x1b8>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	2000      	movs	r0, #0
 800891a:	492a      	ldr	r1, [pc, #168]	; (80089c4 <__ieee754_pow+0x25c>)
 800891c:	f7f7 ff9e 	bl	800085c <__aeabi_ddiv>
 8008920:	2d00      	cmp	r5, #0
 8008922:	f6bf af40 	bge.w	80087a6 <__ieee754_pow+0x3e>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800892c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008930:	4323      	orrs	r3, r4
 8008932:	d108      	bne.n	8008946 <__ieee754_pow+0x1de>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	e78f      	b.n	8008866 <__ieee754_pow+0xfe>
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	2b01      	cmp	r3, #1
 800894a:	f47f af2c 	bne.w	80087a6 <__ieee754_pow+0x3e>
 800894e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008952:	4619      	mov	r1, r3
 8008954:	e727      	b.n	80087a6 <__ieee754_pow+0x3e>
 8008956:	0feb      	lsrs	r3, r5, #31
 8008958:	3b01      	subs	r3, #1
 800895a:	9306      	str	r3, [sp, #24]
 800895c:	9a06      	ldr	r2, [sp, #24]
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	d102      	bne.n	800896a <__ieee754_pow+0x202>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	e7e6      	b.n	8008938 <__ieee754_pow+0x1d0>
 800896a:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <__ieee754_pow+0x268>)
 800896c:	4598      	cmp	r8, r3
 800896e:	f340 80fb 	ble.w	8008b68 <__ieee754_pow+0x400>
 8008972:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008976:	4598      	cmp	r8, r3
 8008978:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <__ieee754_pow+0x260>)
 800897a:	dd0c      	ble.n	8008996 <__ieee754_pow+0x22e>
 800897c:	429c      	cmp	r4, r3
 800897e:	dc0f      	bgt.n	80089a0 <__ieee754_pow+0x238>
 8008980:	f1b9 0f00 	cmp.w	r9, #0
 8008984:	da0f      	bge.n	80089a6 <__ieee754_pow+0x23e>
 8008986:	2000      	movs	r0, #0
 8008988:	b009      	add	sp, #36	; 0x24
 800898a:	ecbd 8b06 	vpop	{d8-d10}
 800898e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008992:	f000 bcf0 	b.w	8009376 <__math_oflow>
 8008996:	429c      	cmp	r4, r3
 8008998:	dbf2      	blt.n	8008980 <__ieee754_pow+0x218>
 800899a:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <__ieee754_pow+0x25c>)
 800899c:	429c      	cmp	r4, r3
 800899e:	dd19      	ble.n	80089d4 <__ieee754_pow+0x26c>
 80089a0:	f1b9 0f00 	cmp.w	r9, #0
 80089a4:	dcef      	bgt.n	8008986 <__ieee754_pow+0x21e>
 80089a6:	2000      	movs	r0, #0
 80089a8:	b009      	add	sp, #36	; 0x24
 80089aa:	ecbd 8b06 	vpop	{d8-d10}
 80089ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b2:	f000 bcd7 	b.w	8009364 <__math_uflow>
 80089b6:	bf00      	nop
 80089b8:	fff00000 	.word	0xfff00000
 80089bc:	7ff00000 	.word	0x7ff00000
 80089c0:	433fffff 	.word	0x433fffff
 80089c4:	3ff00000 	.word	0x3ff00000
 80089c8:	3fefffff 	.word	0x3fefffff
 80089cc:	3fe00000 	.word	0x3fe00000
 80089d0:	41e00000 	.word	0x41e00000
 80089d4:	4b60      	ldr	r3, [pc, #384]	; (8008b58 <__ieee754_pow+0x3f0>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	f7f7 fc5e 	bl	8000298 <__aeabi_dsub>
 80089dc:	a354      	add	r3, pc, #336	; (adr r3, 8008b30 <__ieee754_pow+0x3c8>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	4604      	mov	r4, r0
 80089e4:	460d      	mov	r5, r1
 80089e6:	f7f7 fe0f 	bl	8000608 <__aeabi_dmul>
 80089ea:	a353      	add	r3, pc, #332	; (adr r3, 8008b38 <__ieee754_pow+0x3d0>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	4606      	mov	r6, r0
 80089f2:	460f      	mov	r7, r1
 80089f4:	4620      	mov	r0, r4
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7f7 fe06 	bl	8000608 <__aeabi_dmul>
 80089fc:	4b57      	ldr	r3, [pc, #348]	; (8008b5c <__ieee754_pow+0x3f4>)
 80089fe:	4682      	mov	sl, r0
 8008a00:	468b      	mov	fp, r1
 8008a02:	2200      	movs	r2, #0
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	a14b      	add	r1, pc, #300	; (adr r1, 8008b40 <__ieee754_pow+0x3d8>)
 8008a12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a16:	f7f7 fc3f 	bl	8000298 <__aeabi_dsub>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	2000      	movs	r0, #0
 8008a28:	494d      	ldr	r1, [pc, #308]	; (8008b60 <__ieee754_pow+0x3f8>)
 8008a2a:	f7f7 fc35 	bl	8000298 <__aeabi_dsub>
 8008a2e:	4622      	mov	r2, r4
 8008a30:	4680      	mov	r8, r0
 8008a32:	4689      	mov	r9, r1
 8008a34:	462b      	mov	r3, r5
 8008a36:	4620      	mov	r0, r4
 8008a38:	4629      	mov	r1, r5
 8008a3a:	f7f7 fde5 	bl	8000608 <__aeabi_dmul>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4640      	mov	r0, r8
 8008a44:	4649      	mov	r1, r9
 8008a46:	f7f7 fddf 	bl	8000608 <__aeabi_dmul>
 8008a4a:	a33f      	add	r3, pc, #252	; (adr r3, 8008b48 <__ieee754_pow+0x3e0>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f7 fc1c 	bl	8000298 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4680      	mov	r8, r0
 8008a66:	4689      	mov	r9, r1
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f7f7 fc16 	bl	800029c <__adddf3>
 8008a70:	2000      	movs	r0, #0
 8008a72:	4632      	mov	r2, r6
 8008a74:	463b      	mov	r3, r7
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f7 fc0d 	bl	8000298 <__aeabi_dsub>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fc07 	bl	8000298 <__aeabi_dsub>
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	9a06      	ldr	r2, [sp, #24]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	4682      	mov	sl, r0
 8008a94:	468b      	mov	fp, r1
 8008a96:	f040 81e7 	bne.w	8008e68 <__ieee754_pow+0x700>
 8008a9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008b50 <__ieee754_pow+0x3e8>
 8008a9e:	eeb0 8a47 	vmov.f32	s16, s14
 8008aa2:	eef0 8a67 	vmov.f32	s17, s15
 8008aa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008aaa:	2600      	movs	r6, #0
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab4:	f7f7 fbf0 	bl	8000298 <__aeabi_dsub>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	462b      	mov	r3, r5
 8008abc:	f7f7 fda4 	bl	8000608 <__aeabi_dmul>
 8008ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	4689      	mov	r9, r1
 8008ac8:	4650      	mov	r0, sl
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f7 fd9c 	bl	8000608 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	f7f7 fbe0 	bl	800029c <__adddf3>
 8008adc:	4632      	mov	r2, r6
 8008ade:	463b      	mov	r3, r7
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	4689      	mov	r9, r1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fd8e 	bl	8000608 <__aeabi_dmul>
 8008aec:	460b      	mov	r3, r1
 8008aee:	4604      	mov	r4, r0
 8008af0:	460d      	mov	r5, r1
 8008af2:	4602      	mov	r2, r0
 8008af4:	4649      	mov	r1, r9
 8008af6:	4640      	mov	r0, r8
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	4b19      	ldr	r3, [pc, #100]	; (8008b64 <__ieee754_pow+0x3fc>)
 8008afe:	4299      	cmp	r1, r3
 8008b00:	ec45 4b19 	vmov	d9, r4, r5
 8008b04:	4606      	mov	r6, r0
 8008b06:	460f      	mov	r7, r1
 8008b08:	468b      	mov	fp, r1
 8008b0a:	f340 82f1 	ble.w	80090f0 <__ieee754_pow+0x988>
 8008b0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008b12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008b16:	4303      	orrs	r3, r0
 8008b18:	f000 81e4 	beq.w	8008ee4 <__ieee754_pow+0x77c>
 8008b1c:	ec51 0b18 	vmov	r0, r1, d8
 8008b20:	2200      	movs	r2, #0
 8008b22:	2300      	movs	r3, #0
 8008b24:	f7f7 ffe2 	bl	8000aec <__aeabi_dcmplt>
 8008b28:	3800      	subs	r0, #0
 8008b2a:	bf18      	it	ne
 8008b2c:	2001      	movne	r0, #1
 8008b2e:	e72b      	b.n	8008988 <__ieee754_pow+0x220>
 8008b30:	60000000 	.word	0x60000000
 8008b34:	3ff71547 	.word	0x3ff71547
 8008b38:	f85ddf44 	.word	0xf85ddf44
 8008b3c:	3e54ae0b 	.word	0x3e54ae0b
 8008b40:	55555555 	.word	0x55555555
 8008b44:	3fd55555 	.word	0x3fd55555
 8008b48:	652b82fe 	.word	0x652b82fe
 8008b4c:	3ff71547 	.word	0x3ff71547
 8008b50:	00000000 	.word	0x00000000
 8008b54:	bff00000 	.word	0xbff00000
 8008b58:	3ff00000 	.word	0x3ff00000
 8008b5c:	3fd00000 	.word	0x3fd00000
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	408fffff 	.word	0x408fffff
 8008b68:	4bd5      	ldr	r3, [pc, #852]	; (8008ec0 <__ieee754_pow+0x758>)
 8008b6a:	402b      	ands	r3, r5
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	b92b      	cbnz	r3, 8008b7c <__ieee754_pow+0x414>
 8008b70:	4bd4      	ldr	r3, [pc, #848]	; (8008ec4 <__ieee754_pow+0x75c>)
 8008b72:	f7f7 fd49 	bl	8000608 <__aeabi_dmul>
 8008b76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	1523      	asrs	r3, r4, #20
 8008b7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b82:	4413      	add	r3, r2
 8008b84:	9305      	str	r3, [sp, #20]
 8008b86:	4bd0      	ldr	r3, [pc, #832]	; (8008ec8 <__ieee754_pow+0x760>)
 8008b88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008b90:	429c      	cmp	r4, r3
 8008b92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b96:	dd08      	ble.n	8008baa <__ieee754_pow+0x442>
 8008b98:	4bcc      	ldr	r3, [pc, #816]	; (8008ecc <__ieee754_pow+0x764>)
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	f340 8162 	ble.w	8008e64 <__ieee754_pow+0x6fc>
 8008ba0:	9b05      	ldr	r3, [sp, #20]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008baa:	2400      	movs	r4, #0
 8008bac:	00e3      	lsls	r3, r4, #3
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	4bc7      	ldr	r3, [pc, #796]	; (8008ed0 <__ieee754_pow+0x768>)
 8008bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bb6:	ed93 7b00 	vldr	d7, [r3]
 8008bba:	4629      	mov	r1, r5
 8008bbc:	ec53 2b17 	vmov	r2, r3, d7
 8008bc0:	eeb0 9a47 	vmov.f32	s18, s14
 8008bc4:	eef0 9a67 	vmov.f32	s19, s15
 8008bc8:	4682      	mov	sl, r0
 8008bca:	f7f7 fb65 	bl	8000298 <__aeabi_dsub>
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	460f      	mov	r7, r1
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	ec51 0b19 	vmov	r0, r1, d9
 8008bda:	f7f7 fb5f 	bl	800029c <__adddf3>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	2000      	movs	r0, #0
 8008be4:	49bb      	ldr	r1, [pc, #748]	; (8008ed4 <__ieee754_pow+0x76c>)
 8008be6:	f7f7 fe39 	bl	800085c <__aeabi_ddiv>
 8008bea:	ec41 0b1a 	vmov	d10, r0, r1
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fd07 	bl	8000608 <__aeabi_dmul>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c00:	9302      	str	r3, [sp, #8]
 8008c02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c06:	46ab      	mov	fp, r5
 8008c08:	106d      	asrs	r5, r5, #1
 8008c0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008c0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008c12:	ec41 0b18 	vmov	d8, r0, r1
 8008c16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	f7f7 fcf0 	bl	8000608 <__aeabi_dmul>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	4639      	mov	r1, r7
 8008c30:	f7f7 fb32 	bl	8000298 <__aeabi_dsub>
 8008c34:	ec53 2b19 	vmov	r2, r3, d9
 8008c38:	4606      	mov	r6, r0
 8008c3a:	460f      	mov	r7, r1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 fb2a 	bl	8000298 <__aeabi_dsub>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4650      	mov	r0, sl
 8008c4a:	4659      	mov	r1, fp
 8008c4c:	f7f7 fb24 	bl	8000298 <__aeabi_dsub>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	f7f7 fcd8 	bl	8000608 <__aeabi_dmul>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 fb1a 	bl	8000298 <__aeabi_dsub>
 8008c64:	ec53 2b1a 	vmov	r2, r3, d10
 8008c68:	f7f7 fcce 	bl	8000608 <__aeabi_dmul>
 8008c6c:	ec53 2b18 	vmov	r2, r3, d8
 8008c70:	ec41 0b19 	vmov	d9, r0, r1
 8008c74:	ec51 0b18 	vmov	r0, r1, d8
 8008c78:	f7f7 fcc6 	bl	8000608 <__aeabi_dmul>
 8008c7c:	a37c      	add	r3, pc, #496	; (adr r3, 8008e70 <__ieee754_pow+0x708>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	4604      	mov	r4, r0
 8008c84:	460d      	mov	r5, r1
 8008c86:	f7f7 fcbf 	bl	8000608 <__aeabi_dmul>
 8008c8a:	a37b      	add	r3, pc, #492	; (adr r3, 8008e78 <__ieee754_pow+0x710>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fb04 	bl	800029c <__adddf3>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 fcb6 	bl	8000608 <__aeabi_dmul>
 8008c9c:	a378      	add	r3, pc, #480	; (adr r3, 8008e80 <__ieee754_pow+0x718>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fafb 	bl	800029c <__adddf3>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	f7f7 fcad 	bl	8000608 <__aeabi_dmul>
 8008cae:	a376      	add	r3, pc, #472	; (adr r3, 8008e88 <__ieee754_pow+0x720>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 faf2 	bl	800029c <__adddf3>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	462b      	mov	r3, r5
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	a373      	add	r3, pc, #460	; (adr r3, 8008e90 <__ieee754_pow+0x728>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fae9 	bl	800029c <__adddf3>
 8008cca:	4622      	mov	r2, r4
 8008ccc:	462b      	mov	r3, r5
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	a371      	add	r3, pc, #452	; (adr r3, 8008e98 <__ieee754_pow+0x730>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fae0 	bl	800029c <__adddf3>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	464b      	mov	r3, r9
 8008d00:	ec51 0b18 	vmov	r0, r1, d8
 8008d04:	f7f7 faca 	bl	800029c <__adddf3>
 8008d08:	ec53 2b19 	vmov	r2, r3, d9
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	4622      	mov	r2, r4
 8008d12:	462b      	mov	r3, r5
 8008d14:	f7f7 fac2 	bl	800029c <__adddf3>
 8008d18:	4642      	mov	r2, r8
 8008d1a:	4682      	mov	sl, r0
 8008d1c:	468b      	mov	fp, r1
 8008d1e:	464b      	mov	r3, r9
 8008d20:	4640      	mov	r0, r8
 8008d22:	4649      	mov	r1, r9
 8008d24:	f7f7 fc70 	bl	8000608 <__aeabi_dmul>
 8008d28:	4b6b      	ldr	r3, [pc, #428]	; (8008ed8 <__ieee754_pow+0x770>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	f7f7 fab4 	bl	800029c <__adddf3>
 8008d34:	4652      	mov	r2, sl
 8008d36:	465b      	mov	r3, fp
 8008d38:	f7f7 fab0 	bl	800029c <__adddf3>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460d      	mov	r5, r1
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	4b62      	ldr	r3, [pc, #392]	; (8008ed8 <__ieee754_pow+0x770>)
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	2200      	movs	r2, #0
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 fa9d 	bl	8000298 <__aeabi_dsub>
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	f7f7 fa99 	bl	8000298 <__aeabi_dsub>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	ec53 2b18 	vmov	r2, r3, d8
 8008d76:	f7f7 fc47 	bl	8000608 <__aeabi_dmul>
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	460f      	mov	r7, r1
 8008d80:	462b      	mov	r3, r5
 8008d82:	ec51 0b19 	vmov	r0, r1, d9
 8008d86:	f7f7 fc3f 	bl	8000608 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4630      	mov	r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	f7f7 fa83 	bl	800029c <__adddf3>
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fa7b 	bl	800029c <__adddf3>
 8008da6:	a33e      	add	r3, pc, #248	; (adr r3, 8008ea0 <__ieee754_pow+0x738>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	2000      	movs	r0, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	4642      	mov	r2, r8
 8008db8:	ec41 0b18 	vmov	d8, r0, r1
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fa69 	bl	8000298 <__aeabi_dsub>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	f7f7 fa63 	bl	8000298 <__aeabi_dsub>
 8008dd2:	a335      	add	r3, pc, #212	; (adr r3, 8008ea8 <__ieee754_pow+0x740>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	a334      	add	r3, pc, #208	; (adr r3, 8008eb0 <__ieee754_pow+0x748>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	4606      	mov	r6, r0
 8008de4:	460f      	mov	r7, r1
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fc0d 	bl	8000608 <__aeabi_dmul>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4630      	mov	r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 fa51 	bl	800029c <__adddf3>
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	4b37      	ldr	r3, [pc, #220]	; (8008edc <__ieee754_pow+0x774>)
 8008dfe:	4413      	add	r3, r2
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fa4a 	bl	800029c <__adddf3>
 8008e08:	4682      	mov	sl, r0
 8008e0a:	9805      	ldr	r0, [sp, #20]
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	f7f7 fb91 	bl	8000534 <__aeabi_i2d>
 8008e12:	9a07      	ldr	r2, [sp, #28]
 8008e14:	4b32      	ldr	r3, [pc, #200]	; (8008ee0 <__ieee754_pow+0x778>)
 8008e16:	4413      	add	r3, r2
 8008e18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	4652      	mov	r2, sl
 8008e22:	465b      	mov	r3, fp
 8008e24:	ec51 0b18 	vmov	r0, r1, d8
 8008e28:	f7f7 fa38 	bl	800029c <__adddf3>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	f7f7 fa34 	bl	800029c <__adddf3>
 8008e34:	4632      	mov	r2, r6
 8008e36:	463b      	mov	r3, r7
 8008e38:	f7f7 fa30 	bl	800029c <__adddf3>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	4632      	mov	r2, r6
 8008e40:	463b      	mov	r3, r7
 8008e42:	4604      	mov	r4, r0
 8008e44:	460d      	mov	r5, r1
 8008e46:	f7f7 fa27 	bl	8000298 <__aeabi_dsub>
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	f7f7 fa23 	bl	8000298 <__aeabi_dsub>
 8008e52:	ec53 2b18 	vmov	r2, r3, d8
 8008e56:	f7f7 fa1f 	bl	8000298 <__aeabi_dsub>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4650      	mov	r0, sl
 8008e60:	4659      	mov	r1, fp
 8008e62:	e610      	b.n	8008a86 <__ieee754_pow+0x31e>
 8008e64:	2401      	movs	r4, #1
 8008e66:	e6a1      	b.n	8008bac <__ieee754_pow+0x444>
 8008e68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008eb8 <__ieee754_pow+0x750>
 8008e6c:	e617      	b.n	8008a9e <__ieee754_pow+0x336>
 8008e6e:	bf00      	nop
 8008e70:	4a454eef 	.word	0x4a454eef
 8008e74:	3fca7e28 	.word	0x3fca7e28
 8008e78:	93c9db65 	.word	0x93c9db65
 8008e7c:	3fcd864a 	.word	0x3fcd864a
 8008e80:	a91d4101 	.word	0xa91d4101
 8008e84:	3fd17460 	.word	0x3fd17460
 8008e88:	518f264d 	.word	0x518f264d
 8008e8c:	3fd55555 	.word	0x3fd55555
 8008e90:	db6fabff 	.word	0xdb6fabff
 8008e94:	3fdb6db6 	.word	0x3fdb6db6
 8008e98:	33333303 	.word	0x33333303
 8008e9c:	3fe33333 	.word	0x3fe33333
 8008ea0:	e0000000 	.word	0xe0000000
 8008ea4:	3feec709 	.word	0x3feec709
 8008ea8:	dc3a03fd 	.word	0xdc3a03fd
 8008eac:	3feec709 	.word	0x3feec709
 8008eb0:	145b01f5 	.word	0x145b01f5
 8008eb4:	be3e2fe0 	.word	0xbe3e2fe0
 8008eb8:	00000000 	.word	0x00000000
 8008ebc:	3ff00000 	.word	0x3ff00000
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	43400000 	.word	0x43400000
 8008ec8:	0003988e 	.word	0x0003988e
 8008ecc:	000bb679 	.word	0x000bb679
 8008ed0:	08009978 	.word	0x08009978
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	40080000 	.word	0x40080000
 8008edc:	08009998 	.word	0x08009998
 8008ee0:	08009988 	.word	0x08009988
 8008ee4:	a3b5      	add	r3, pc, #724	; (adr r3, 80091bc <__ieee754_pow+0xa54>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 f9d5 	bl	800029c <__adddf3>
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	ec41 0b1a 	vmov	d10, r0, r1
 8008ef8:	462b      	mov	r3, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 f9cb 	bl	8000298 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	ec51 0b1a 	vmov	r0, r1, d10
 8008f0a:	f7f7 fe0d 	bl	8000b28 <__aeabi_dcmpgt>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f47f ae04 	bne.w	8008b1c <__ieee754_pow+0x3b4>
 8008f14:	4aa4      	ldr	r2, [pc, #656]	; (80091a8 <__ieee754_pow+0xa40>)
 8008f16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	f340 8108 	ble.w	8009130 <__ieee754_pow+0x9c8>
 8008f20:	151b      	asrs	r3, r3, #20
 8008f22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008f26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008f2a:	fa4a f303 	asr.w	r3, sl, r3
 8008f2e:	445b      	add	r3, fp
 8008f30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f34:	4e9d      	ldr	r6, [pc, #628]	; (80091ac <__ieee754_pow+0xa44>)
 8008f36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f3a:	4116      	asrs	r6, r2
 8008f3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008f40:	2000      	movs	r0, #0
 8008f42:	ea23 0106 	bic.w	r1, r3, r6
 8008f46:	f1c2 0214 	rsb	r2, r2, #20
 8008f4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008f4e:	fa4a fa02 	asr.w	sl, sl, r2
 8008f52:	f1bb 0f00 	cmp.w	fp, #0
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	bfb8      	it	lt
 8008f60:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f64:	f7f7 f998 	bl	8000298 <__aeabi_dsub>
 8008f68:	ec41 0b19 	vmov	d9, r0, r1
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	464b      	mov	r3, r9
 8008f70:	ec51 0b19 	vmov	r0, r1, d9
 8008f74:	f7f7 f992 	bl	800029c <__adddf3>
 8008f78:	a37b      	add	r3, pc, #492	; (adr r3, 8009168 <__ieee754_pow+0xa00>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	f7f7 fb40 	bl	8000608 <__aeabi_dmul>
 8008f88:	ec53 2b19 	vmov	r2, r3, d9
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 f980 	bl	8000298 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 f97a 	bl	8000298 <__aeabi_dsub>
 8008fa4:	a372      	add	r3, pc, #456	; (adr r3, 8009170 <__ieee754_pow+0xa08>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 fb2d 	bl	8000608 <__aeabi_dmul>
 8008fae:	a372      	add	r3, pc, #456	; (adr r3, 8009178 <__ieee754_pow+0xa10>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4689      	mov	r9, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 fb24 	bl	8000608 <__aeabi_dmul>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 f968 	bl	800029c <__adddf3>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 f960 	bl	800029c <__adddf3>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	4689      	mov	r9, r1
 8008fe4:	f7f7 f958 	bl	8000298 <__aeabi_dsub>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 f952 	bl	8000298 <__aeabi_dsub>
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 fb02 	bl	8000608 <__aeabi_dmul>
 8009004:	a35e      	add	r3, pc, #376	; (adr r3, 8009180 <__ieee754_pow+0xa18>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	4604      	mov	r4, r0
 800900c:	460d      	mov	r5, r1
 800900e:	f7f7 fafb 	bl	8000608 <__aeabi_dmul>
 8009012:	a35d      	add	r3, pc, #372	; (adr r3, 8009188 <__ieee754_pow+0xa20>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 f93e 	bl	8000298 <__aeabi_dsub>
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	f7f7 faf2 	bl	8000608 <__aeabi_dmul>
 8009024:	a35a      	add	r3, pc, #360	; (adr r3, 8009190 <__ieee754_pow+0xa28>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f937 	bl	800029c <__adddf3>
 800902e:	4622      	mov	r2, r4
 8009030:	462b      	mov	r3, r5
 8009032:	f7f7 fae9 	bl	8000608 <__aeabi_dmul>
 8009036:	a358      	add	r3, pc, #352	; (adr r3, 8009198 <__ieee754_pow+0xa30>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 f92c 	bl	8000298 <__aeabi_dsub>
 8009040:	4622      	mov	r2, r4
 8009042:	462b      	mov	r3, r5
 8009044:	f7f7 fae0 	bl	8000608 <__aeabi_dmul>
 8009048:	a355      	add	r3, pc, #340	; (adr r3, 80091a0 <__ieee754_pow+0xa38>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 f925 	bl	800029c <__adddf3>
 8009052:	4622      	mov	r2, r4
 8009054:	462b      	mov	r3, r5
 8009056:	f7f7 fad7 	bl	8000608 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 f919 	bl	8000298 <__aeabi_dsub>
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	f7f7 fac9 	bl	8000608 <__aeabi_dmul>
 8009076:	2200      	movs	r2, #0
 8009078:	ec41 0b19 	vmov	d9, r0, r1
 800907c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009080:	4620      	mov	r0, r4
 8009082:	4629      	mov	r1, r5
 8009084:	f7f7 f908 	bl	8000298 <__aeabi_dsub>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	ec51 0b19 	vmov	r0, r1, d9
 8009090:	f7f7 fbe4 	bl	800085c <__aeabi_ddiv>
 8009094:	4632      	mov	r2, r6
 8009096:	4604      	mov	r4, r0
 8009098:	460d      	mov	r5, r1
 800909a:	463b      	mov	r3, r7
 800909c:	4640      	mov	r0, r8
 800909e:	4649      	mov	r1, r9
 80090a0:	f7f7 fab2 	bl	8000608 <__aeabi_dmul>
 80090a4:	4632      	mov	r2, r6
 80090a6:	463b      	mov	r3, r7
 80090a8:	f7f7 f8f8 	bl	800029c <__adddf3>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4620      	mov	r0, r4
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7f7 f8f0 	bl	8000298 <__aeabi_dsub>
 80090b8:	4642      	mov	r2, r8
 80090ba:	464b      	mov	r3, r9
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	460b      	mov	r3, r1
 80090c2:	4602      	mov	r2, r0
 80090c4:	493a      	ldr	r1, [pc, #232]	; (80091b0 <__ieee754_pow+0xa48>)
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7f7 f8e6 	bl	8000298 <__aeabi_dsub>
 80090cc:	ec41 0b10 	vmov	d0, r0, r1
 80090d0:	ee10 3a90 	vmov	r3, s1
 80090d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80090d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090dc:	da2b      	bge.n	8009136 <__ieee754_pow+0x9ce>
 80090de:	4650      	mov	r0, sl
 80090e0:	f000 f95e 	bl	80093a0 <scalbn>
 80090e4:	ec51 0b10 	vmov	r0, r1, d0
 80090e8:	ec53 2b18 	vmov	r2, r3, d8
 80090ec:	f7ff bbed 	b.w	80088ca <__ieee754_pow+0x162>
 80090f0:	4b30      	ldr	r3, [pc, #192]	; (80091b4 <__ieee754_pow+0xa4c>)
 80090f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80090f6:	429e      	cmp	r6, r3
 80090f8:	f77f af0c 	ble.w	8008f14 <__ieee754_pow+0x7ac>
 80090fc:	4b2e      	ldr	r3, [pc, #184]	; (80091b8 <__ieee754_pow+0xa50>)
 80090fe:	440b      	add	r3, r1
 8009100:	4303      	orrs	r3, r0
 8009102:	d009      	beq.n	8009118 <__ieee754_pow+0x9b0>
 8009104:	ec51 0b18 	vmov	r0, r1, d8
 8009108:	2200      	movs	r2, #0
 800910a:	2300      	movs	r3, #0
 800910c:	f7f7 fcee 	bl	8000aec <__aeabi_dcmplt>
 8009110:	3800      	subs	r0, #0
 8009112:	bf18      	it	ne
 8009114:	2001      	movne	r0, #1
 8009116:	e447      	b.n	80089a8 <__ieee754_pow+0x240>
 8009118:	4622      	mov	r2, r4
 800911a:	462b      	mov	r3, r5
 800911c:	f7f7 f8bc 	bl	8000298 <__aeabi_dsub>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	f7f7 fcf6 	bl	8000b14 <__aeabi_dcmpge>
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f aef3 	beq.w	8008f14 <__ieee754_pow+0x7ac>
 800912e:	e7e9      	b.n	8009104 <__ieee754_pow+0x99c>
 8009130:	f04f 0a00 	mov.w	sl, #0
 8009134:	e71a      	b.n	8008f6c <__ieee754_pow+0x804>
 8009136:	ec51 0b10 	vmov	r0, r1, d0
 800913a:	4619      	mov	r1, r3
 800913c:	e7d4      	b.n	80090e8 <__ieee754_pow+0x980>
 800913e:	491c      	ldr	r1, [pc, #112]	; (80091b0 <__ieee754_pow+0xa48>)
 8009140:	2000      	movs	r0, #0
 8009142:	f7ff bb30 	b.w	80087a6 <__ieee754_pow+0x3e>
 8009146:	2000      	movs	r0, #0
 8009148:	2100      	movs	r1, #0
 800914a:	f7ff bb2c 	b.w	80087a6 <__ieee754_pow+0x3e>
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	f7ff bb28 	b.w	80087a6 <__ieee754_pow+0x3e>
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	f7ff bb7a 	b.w	8008850 <__ieee754_pow+0xe8>
 800915c:	2300      	movs	r3, #0
 800915e:	f7ff bb64 	b.w	800882a <__ieee754_pow+0xc2>
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	00000000 	.word	0x00000000
 800916c:	3fe62e43 	.word	0x3fe62e43
 8009170:	fefa39ef 	.word	0xfefa39ef
 8009174:	3fe62e42 	.word	0x3fe62e42
 8009178:	0ca86c39 	.word	0x0ca86c39
 800917c:	be205c61 	.word	0xbe205c61
 8009180:	72bea4d0 	.word	0x72bea4d0
 8009184:	3e663769 	.word	0x3e663769
 8009188:	c5d26bf1 	.word	0xc5d26bf1
 800918c:	3ebbbd41 	.word	0x3ebbbd41
 8009190:	af25de2c 	.word	0xaf25de2c
 8009194:	3f11566a 	.word	0x3f11566a
 8009198:	16bebd93 	.word	0x16bebd93
 800919c:	3f66c16c 	.word	0x3f66c16c
 80091a0:	5555553e 	.word	0x5555553e
 80091a4:	3fc55555 	.word	0x3fc55555
 80091a8:	3fe00000 	.word	0x3fe00000
 80091ac:	000fffff 	.word	0x000fffff
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	4090cbff 	.word	0x4090cbff
 80091b8:	3f6f3400 	.word	0x3f6f3400
 80091bc:	652b82fe 	.word	0x652b82fe
 80091c0:	3c971547 	.word	0x3c971547

080091c4 <__ieee754_sqrt>:
 80091c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c8:	ec55 4b10 	vmov	r4, r5, d0
 80091cc:	4e55      	ldr	r6, [pc, #340]	; (8009324 <__ieee754_sqrt+0x160>)
 80091ce:	43ae      	bics	r6, r5
 80091d0:	ee10 0a10 	vmov	r0, s0
 80091d4:	ee10 3a10 	vmov	r3, s0
 80091d8:	462a      	mov	r2, r5
 80091da:	4629      	mov	r1, r5
 80091dc:	d110      	bne.n	8009200 <__ieee754_sqrt+0x3c>
 80091de:	ee10 2a10 	vmov	r2, s0
 80091e2:	462b      	mov	r3, r5
 80091e4:	f7f7 fa10 	bl	8000608 <__aeabi_dmul>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7f7 f854 	bl	800029c <__adddf3>
 80091f4:	4604      	mov	r4, r0
 80091f6:	460d      	mov	r5, r1
 80091f8:	ec45 4b10 	vmov	d0, r4, r5
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	2d00      	cmp	r5, #0
 8009202:	dc10      	bgt.n	8009226 <__ieee754_sqrt+0x62>
 8009204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009208:	4330      	orrs	r0, r6
 800920a:	d0f5      	beq.n	80091f8 <__ieee754_sqrt+0x34>
 800920c:	b15d      	cbz	r5, 8009226 <__ieee754_sqrt+0x62>
 800920e:	ee10 2a10 	vmov	r2, s0
 8009212:	462b      	mov	r3, r5
 8009214:	ee10 0a10 	vmov	r0, s0
 8009218:	f7f7 f83e 	bl	8000298 <__aeabi_dsub>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	f7f7 fb1c 	bl	800085c <__aeabi_ddiv>
 8009224:	e7e6      	b.n	80091f4 <__ieee754_sqrt+0x30>
 8009226:	1512      	asrs	r2, r2, #20
 8009228:	d074      	beq.n	8009314 <__ieee754_sqrt+0x150>
 800922a:	07d4      	lsls	r4, r2, #31
 800922c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009230:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009238:	bf5e      	ittt	pl
 800923a:	0fda      	lsrpl	r2, r3, #31
 800923c:	005b      	lslpl	r3, r3, #1
 800923e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009242:	2400      	movs	r4, #0
 8009244:	0fda      	lsrs	r2, r3, #31
 8009246:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800924a:	107f      	asrs	r7, r7, #1
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	2516      	movs	r5, #22
 8009250:	4620      	mov	r0, r4
 8009252:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009256:	1886      	adds	r6, r0, r2
 8009258:	428e      	cmp	r6, r1
 800925a:	bfde      	ittt	le
 800925c:	1b89      	suble	r1, r1, r6
 800925e:	18b0      	addle	r0, r6, r2
 8009260:	18a4      	addle	r4, r4, r2
 8009262:	0049      	lsls	r1, r1, #1
 8009264:	3d01      	subs	r5, #1
 8009266:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800926a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800926e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009272:	d1f0      	bne.n	8009256 <__ieee754_sqrt+0x92>
 8009274:	462a      	mov	r2, r5
 8009276:	f04f 0e20 	mov.w	lr, #32
 800927a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800927e:	4281      	cmp	r1, r0
 8009280:	eb06 0c05 	add.w	ip, r6, r5
 8009284:	dc02      	bgt.n	800928c <__ieee754_sqrt+0xc8>
 8009286:	d113      	bne.n	80092b0 <__ieee754_sqrt+0xec>
 8009288:	459c      	cmp	ip, r3
 800928a:	d811      	bhi.n	80092b0 <__ieee754_sqrt+0xec>
 800928c:	f1bc 0f00 	cmp.w	ip, #0
 8009290:	eb0c 0506 	add.w	r5, ip, r6
 8009294:	da43      	bge.n	800931e <__ieee754_sqrt+0x15a>
 8009296:	2d00      	cmp	r5, #0
 8009298:	db41      	blt.n	800931e <__ieee754_sqrt+0x15a>
 800929a:	f100 0801 	add.w	r8, r0, #1
 800929e:	1a09      	subs	r1, r1, r0
 80092a0:	459c      	cmp	ip, r3
 80092a2:	bf88      	it	hi
 80092a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80092a8:	eba3 030c 	sub.w	r3, r3, ip
 80092ac:	4432      	add	r2, r6
 80092ae:	4640      	mov	r0, r8
 80092b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80092b4:	f1be 0e01 	subs.w	lr, lr, #1
 80092b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80092bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80092c4:	d1db      	bne.n	800927e <__ieee754_sqrt+0xba>
 80092c6:	430b      	orrs	r3, r1
 80092c8:	d006      	beq.n	80092d8 <__ieee754_sqrt+0x114>
 80092ca:	1c50      	adds	r0, r2, #1
 80092cc:	bf13      	iteet	ne
 80092ce:	3201      	addne	r2, #1
 80092d0:	3401      	addeq	r4, #1
 80092d2:	4672      	moveq	r2, lr
 80092d4:	f022 0201 	bicne.w	r2, r2, #1
 80092d8:	1063      	asrs	r3, r4, #1
 80092da:	0852      	lsrs	r2, r2, #1
 80092dc:	07e1      	lsls	r1, r4, #31
 80092de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80092e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80092e6:	bf48      	it	mi
 80092e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80092ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80092f0:	4614      	mov	r4, r2
 80092f2:	e781      	b.n	80091f8 <__ieee754_sqrt+0x34>
 80092f4:	0ad9      	lsrs	r1, r3, #11
 80092f6:	3815      	subs	r0, #21
 80092f8:	055b      	lsls	r3, r3, #21
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d0fa      	beq.n	80092f4 <__ieee754_sqrt+0x130>
 80092fe:	02cd      	lsls	r5, r1, #11
 8009300:	d50a      	bpl.n	8009318 <__ieee754_sqrt+0x154>
 8009302:	f1c2 0420 	rsb	r4, r2, #32
 8009306:	fa23 f404 	lsr.w	r4, r3, r4
 800930a:	1e55      	subs	r5, r2, #1
 800930c:	4093      	lsls	r3, r2
 800930e:	4321      	orrs	r1, r4
 8009310:	1b42      	subs	r2, r0, r5
 8009312:	e78a      	b.n	800922a <__ieee754_sqrt+0x66>
 8009314:	4610      	mov	r0, r2
 8009316:	e7f0      	b.n	80092fa <__ieee754_sqrt+0x136>
 8009318:	0049      	lsls	r1, r1, #1
 800931a:	3201      	adds	r2, #1
 800931c:	e7ef      	b.n	80092fe <__ieee754_sqrt+0x13a>
 800931e:	4680      	mov	r8, r0
 8009320:	e7bd      	b.n	800929e <__ieee754_sqrt+0xda>
 8009322:	bf00      	nop
 8009324:	7ff00000 	.word	0x7ff00000

08009328 <with_errno>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	4616      	mov	r6, r2
 8009330:	f7fb fff2 	bl	8005318 <__errno>
 8009334:	4629      	mov	r1, r5
 8009336:	6006      	str	r6, [r0, #0]
 8009338:	4620      	mov	r0, r4
 800933a:	bd70      	pop	{r4, r5, r6, pc}

0800933c <xflow>:
 800933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800933e:	4614      	mov	r4, r2
 8009340:	461d      	mov	r5, r3
 8009342:	b108      	cbz	r0, 8009348 <xflow+0xc>
 8009344:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009348:	e9cd 2300 	strd	r2, r3, [sp]
 800934c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7f7 f958 	bl	8000608 <__aeabi_dmul>
 8009358:	2222      	movs	r2, #34	; 0x22
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009360:	f7ff bfe2 	b.w	8009328 <with_errno>

08009364 <__math_uflow>:
 8009364:	b508      	push	{r3, lr}
 8009366:	2200      	movs	r2, #0
 8009368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800936c:	f7ff ffe6 	bl	800933c <xflow>
 8009370:	ec41 0b10 	vmov	d0, r0, r1
 8009374:	bd08      	pop	{r3, pc}

08009376 <__math_oflow>:
 8009376:	b508      	push	{r3, lr}
 8009378:	2200      	movs	r2, #0
 800937a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800937e:	f7ff ffdd 	bl	800933c <xflow>
 8009382:	ec41 0b10 	vmov	d0, r0, r1
 8009386:	bd08      	pop	{r3, pc}

08009388 <finite>:
 8009388:	b082      	sub	sp, #8
 800938a:	ed8d 0b00 	vstr	d0, [sp]
 800938e:	9801      	ldr	r0, [sp, #4]
 8009390:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009394:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009398:	0fc0      	lsrs	r0, r0, #31
 800939a:	b002      	add	sp, #8
 800939c:	4770      	bx	lr
	...

080093a0 <scalbn>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	ec55 4b10 	vmov	r4, r5, d0
 80093a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80093aa:	4606      	mov	r6, r0
 80093ac:	462b      	mov	r3, r5
 80093ae:	b99a      	cbnz	r2, 80093d8 <scalbn+0x38>
 80093b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093b4:	4323      	orrs	r3, r4
 80093b6:	d036      	beq.n	8009426 <scalbn+0x86>
 80093b8:	4b39      	ldr	r3, [pc, #228]	; (80094a0 <scalbn+0x100>)
 80093ba:	4629      	mov	r1, r5
 80093bc:	ee10 0a10 	vmov	r0, s0
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f921 	bl	8000608 <__aeabi_dmul>
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <scalbn+0x104>)
 80093c8:	429e      	cmp	r6, r3
 80093ca:	4604      	mov	r4, r0
 80093cc:	460d      	mov	r5, r1
 80093ce:	da10      	bge.n	80093f2 <scalbn+0x52>
 80093d0:	a32b      	add	r3, pc, #172	; (adr r3, 8009480 <scalbn+0xe0>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	e03a      	b.n	800944e <scalbn+0xae>
 80093d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80093dc:	428a      	cmp	r2, r1
 80093de:	d10c      	bne.n	80093fa <scalbn+0x5a>
 80093e0:	ee10 2a10 	vmov	r2, s0
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f6 ff58 	bl	800029c <__adddf3>
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	e019      	b.n	8009426 <scalbn+0x86>
 80093f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093f6:	460b      	mov	r3, r1
 80093f8:	3a36      	subs	r2, #54	; 0x36
 80093fa:	4432      	add	r2, r6
 80093fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009400:	428a      	cmp	r2, r1
 8009402:	dd08      	ble.n	8009416 <scalbn+0x76>
 8009404:	2d00      	cmp	r5, #0
 8009406:	a120      	add	r1, pc, #128	; (adr r1, 8009488 <scalbn+0xe8>)
 8009408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800940c:	da1c      	bge.n	8009448 <scalbn+0xa8>
 800940e:	a120      	add	r1, pc, #128	; (adr r1, 8009490 <scalbn+0xf0>)
 8009410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009414:	e018      	b.n	8009448 <scalbn+0xa8>
 8009416:	2a00      	cmp	r2, #0
 8009418:	dd08      	ble.n	800942c <scalbn+0x8c>
 800941a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800941e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009426:	ec45 4b10 	vmov	d0, r4, r5
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009430:	da19      	bge.n	8009466 <scalbn+0xc6>
 8009432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009436:	429e      	cmp	r6, r3
 8009438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800943c:	dd0a      	ble.n	8009454 <scalbn+0xb4>
 800943e:	a112      	add	r1, pc, #72	; (adr r1, 8009488 <scalbn+0xe8>)
 8009440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e2      	bne.n	800940e <scalbn+0x6e>
 8009448:	a30f      	add	r3, pc, #60	; (adr r3, 8009488 <scalbn+0xe8>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	f7f7 f8db 	bl	8000608 <__aeabi_dmul>
 8009452:	e7cb      	b.n	80093ec <scalbn+0x4c>
 8009454:	a10a      	add	r1, pc, #40	; (adr r1, 8009480 <scalbn+0xe0>)
 8009456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0b8      	beq.n	80093d0 <scalbn+0x30>
 800945e:	a10e      	add	r1, pc, #56	; (adr r1, 8009498 <scalbn+0xf8>)
 8009460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009464:	e7b4      	b.n	80093d0 <scalbn+0x30>
 8009466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800946a:	3236      	adds	r2, #54	; 0x36
 800946c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009474:	4620      	mov	r0, r4
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <scalbn+0x108>)
 8009478:	2200      	movs	r2, #0
 800947a:	e7e8      	b.n	800944e <scalbn+0xae>
 800947c:	f3af 8000 	nop.w
 8009480:	c2f8f359 	.word	0xc2f8f359
 8009484:	01a56e1f 	.word	0x01a56e1f
 8009488:	8800759c 	.word	0x8800759c
 800948c:	7e37e43c 	.word	0x7e37e43c
 8009490:	8800759c 	.word	0x8800759c
 8009494:	fe37e43c 	.word	0xfe37e43c
 8009498:	c2f8f359 	.word	0xc2f8f359
 800949c:	81a56e1f 	.word	0x81a56e1f
 80094a0:	43500000 	.word	0x43500000
 80094a4:	ffff3cb0 	.word	0xffff3cb0
 80094a8:	3c900000 	.word	0x3c900000

080094ac <_init>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr

080094b8 <_fini>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr
